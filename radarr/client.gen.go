// Package radarr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package radarr

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	X_Api_KeyScopes = "X_Api_Key.Scopes"
	ApikeyScopes    = "apikey.Scopes"
)

// Defines values for AddMovieMethod.
const (
	AddMovieMethodCollection AddMovieMethod = "collection"
	AddMovieMethodList       AddMovieMethod = "list"
	AddMovieMethodManual     AddMovieMethod = "manual"
)

// Defines values for ApplyTags.
const (
	Add     ApplyTags = "add"
	Remove  ApplyTags = "remove"
	Replace ApplyTags = "replace"
)

// Defines values for AuthenticationRequiredType.
const (
	AuthenticationRequiredTypeDisabledForLocalAddresses AuthenticationRequiredType = "disabledForLocalAddresses"
	AuthenticationRequiredTypeEnabled                   AuthenticationRequiredType = "enabled"
)

// Defines values for AuthenticationType.
const (
	AuthenticationTypeBasic    AuthenticationType = "basic"
	AuthenticationTypeExternal AuthenticationType = "external"
	AuthenticationTypeForms    AuthenticationType = "forms"
	AuthenticationTypeNone     AuthenticationType = "none"
)

// Defines values for BackupType.
const (
	BackupTypeManual    BackupType = "manual"
	BackupTypeScheduled BackupType = "scheduled"
	BackupTypeUpdate    BackupType = "update"
)

// Defines values for CertificateValidationType.
const (
	CertificateValidationTypeDisabled                  CertificateValidationType = "disabled"
	CertificateValidationTypeDisabledForLocalAddresses CertificateValidationType = "disabledForLocalAddresses"
	CertificateValidationTypeEnabled                   CertificateValidationType = "enabled"
)

// Defines values for ColonReplacementFormat.
const (
	Dash           ColonReplacementFormat = "dash"
	Delete         ColonReplacementFormat = "delete"
	Smart          ColonReplacementFormat = "smart"
	SpaceDash      ColonReplacementFormat = "spaceDash"
	SpaceDashSpace ColonReplacementFormat = "spaceDashSpace"
)

// Defines values for CommandPriority.
const (
	CommandPriorityHigh   CommandPriority = "high"
	CommandPriorityLow    CommandPriority = "low"
	CommandPriorityNormal CommandPriority = "normal"
)

// Defines values for CommandResult.
const (
	CommandResultSuccessful   CommandResult = "successful"
	CommandResultUnknown      CommandResult = "unknown"
	CommandResultUnsuccessful CommandResult = "unsuccessful"
)

// Defines values for CommandStatus.
const (
	CommandStatusAborted   CommandStatus = "aborted"
	CommandStatusCancelled CommandStatus = "cancelled"
	CommandStatusCompleted CommandStatus = "completed"
	CommandStatusFailed    CommandStatus = "failed"
	CommandStatusOrphaned  CommandStatus = "orphaned"
	CommandStatusQueued    CommandStatus = "queued"
	CommandStatusStarted   CommandStatus = "started"
)

// Defines values for CommandTrigger.
const (
	Manual      CommandTrigger = "manual"
	Scheduled   CommandTrigger = "scheduled"
	Unspecified CommandTrigger = "unspecified"
)

// Defines values for CreditType.
const (
	Cast CreditType = "cast"
	Crew CreditType = "crew"
)

// Defines values for DatabaseType.
const (
	PostgreSQL DatabaseType = "postgreSQL"
	SqLite     DatabaseType = "sqLite"
)

// Defines values for DownloadProtocol.
const (
	DownloadProtocolTorrent DownloadProtocol = "torrent"
	DownloadProtocolUnknown DownloadProtocol = "unknown"
	DownloadProtocolUsenet  DownloadProtocol = "usenet"
)

// Defines values for ExtraFileType.
const (
	ExtraFileTypeMetadata ExtraFileType = "metadata"
	ExtraFileTypeOther    ExtraFileType = "other"
	ExtraFileTypeSubtitle ExtraFileType = "subtitle"
)

// Defines values for FileDateType.
const (
	FileDateTypeCinemas FileDateType = "cinemas"
	FileDateTypeNone    FileDateType = "none"
	FileDateTypeRelease FileDateType = "release"
)

// Defines values for HealthCheckResult.
const (
	HealthCheckResultError   HealthCheckResult = "error"
	HealthCheckResultNotice  HealthCheckResult = "notice"
	HealthCheckResultOk      HealthCheckResult = "ok"
	HealthCheckResultWarning HealthCheckResult = "warning"
)

// Defines values for ImportListType.
const (
	ImportListTypeAdvanced ImportListType = "advanced"
	ImportListTypeOther    ImportListType = "other"
	ImportListTypePlex     ImportListType = "plex"
	ImportListTypeProgram  ImportListType = "program"
	ImportListTypeSimkl    ImportListType = "simkl"
	ImportListTypeTmdb     ImportListType = "tmdb"
	ImportListTypeTrakt    ImportListType = "trakt"
)

// Defines values for MediaCoverTypes.
const (
	MediaCoverTypesBanner     MediaCoverTypes = "banner"
	MediaCoverTypesClearlogo  MediaCoverTypes = "clearlogo"
	MediaCoverTypesFanart     MediaCoverTypes = "fanart"
	MediaCoverTypesHeadshot   MediaCoverTypes = "headshot"
	MediaCoverTypesPoster     MediaCoverTypes = "poster"
	MediaCoverTypesScreenshot MediaCoverTypes = "screenshot"
	MediaCoverTypesUnknown    MediaCoverTypes = "unknown"
)

// Defines values for Modifier.
const (
	ModifierBrdisk   Modifier = "brdisk"
	ModifierNone     Modifier = "none"
	ModifierRawhd    Modifier = "rawhd"
	ModifierRegional Modifier = "regional"
	ModifierRemux    Modifier = "remux"
	ModifierScreener Modifier = "screener"
)

// Defines values for MonitorTypes.
const (
	MonitorTypesMovieAndCollection MonitorTypes = "movieAndCollection"
	MonitorTypesMovieOnly          MonitorTypes = "movieOnly"
	MonitorTypesNone               MonitorTypes = "none"
)

// Defines values for MovieHistoryEventType.
const (
	MovieHistoryEventTypeDownloadFailed         MovieHistoryEventType = "downloadFailed"
	MovieHistoryEventTypeDownloadFolderImported MovieHistoryEventType = "downloadFolderImported"
	MovieHistoryEventTypeDownloadIgnored        MovieHistoryEventType = "downloadIgnored"
	MovieHistoryEventTypeGrabbed                MovieHistoryEventType = "grabbed"
	MovieHistoryEventTypeMovieFileDeleted       MovieHistoryEventType = "movieFileDeleted"
	MovieHistoryEventTypeMovieFileRenamed       MovieHistoryEventType = "movieFileRenamed"
	MovieHistoryEventTypeMovieFolderImported    MovieHistoryEventType = "movieFolderImported"
	MovieHistoryEventTypeUnknown                MovieHistoryEventType = "unknown"
)

// Defines values for MovieRuntimeFormatType.
const (
	HoursMinutes MovieRuntimeFormatType = "hoursMinutes"
	Minutes      MovieRuntimeFormatType = "minutes"
)

// Defines values for MovieStatusType.
const (
	Announced MovieStatusType = "announced"
	Deleted   MovieStatusType = "deleted"
	InCinemas MovieStatusType = "inCinemas"
	Released  MovieStatusType = "released"
	Tba       MovieStatusType = "tba"
)

// Defines values for PrivacyLevel.
const (
	PrivacyLevelApiKey   PrivacyLevel = "apiKey"
	PrivacyLevelNormal   PrivacyLevel = "normal"
	PrivacyLevelPassword PrivacyLevel = "password"
	PrivacyLevelUserName PrivacyLevel = "userName"
)

// Defines values for ProperDownloadTypes.
const (
	DoNotPrefer      ProperDownloadTypes = "doNotPrefer"
	DoNotUpgrade     ProperDownloadTypes = "doNotUpgrade"
	PreferAndUpgrade ProperDownloadTypes = "preferAndUpgrade"
)

// Defines values for ProviderMessageType.
const (
	ProviderMessageTypeError   ProviderMessageType = "error"
	ProviderMessageTypeInfo    ProviderMessageType = "info"
	ProviderMessageTypeWarning ProviderMessageType = "warning"
)

// Defines values for ProxyType.
const (
	Http   ProxyType = "http"
	Socks4 ProxyType = "socks4"
	Socks5 ProxyType = "socks5"
)

// Defines values for QualitySource.
const (
	Bluray    QualitySource = "bluray"
	Cam       QualitySource = "cam"
	Dvd       QualitySource = "dvd"
	Telecine  QualitySource = "telecine"
	Telesync  QualitySource = "telesync"
	Tv        QualitySource = "tv"
	Unknown   QualitySource = "unknown"
	Webdl     QualitySource = "webdl"
	Webrip    QualitySource = "webrip"
	Workprint QualitySource = "workprint"
)

// Defines values for QueueStatus.
const (
	QueueStatusCompleted                 QueueStatus = "completed"
	QueueStatusDelay                     QueueStatus = "delay"
	QueueStatusDownloadClientUnavailable QueueStatus = "downloadClientUnavailable"
	QueueStatusDownloading               QueueStatus = "downloading"
	QueueStatusFailed                    QueueStatus = "failed"
	QueueStatusFallback                  QueueStatus = "fallback"
	QueueStatusPaused                    QueueStatus = "paused"
	QueueStatusQueued                    QueueStatus = "queued"
	QueueStatusUnknown                   QueueStatus = "unknown"
	QueueStatusWarning                   QueueStatus = "warning"
)

// Defines values for RatingType.
const (
	RatingTypeCritic RatingType = "critic"
	RatingTypeUser   RatingType = "user"
)

// Defines values for RejectionType.
const (
	Permanent RejectionType = "permanent"
	Temporary RejectionType = "temporary"
)

// Defines values for RescanAfterRefreshType.
const (
	AfterManual RescanAfterRefreshType = "afterManual"
	Always      RescanAfterRefreshType = "always"
	Never       RescanAfterRefreshType = "never"
)

// Defines values for RuntimeMode.
const (
	Console RuntimeMode = "console"
	Service RuntimeMode = "service"
	Tray    RuntimeMode = "tray"
)

// Defines values for SortDirection.
const (
	Ascending  SortDirection = "ascending"
	Default    SortDirection = "default"
	Descending SortDirection = "descending"
)

// Defines values for SourceType.
const (
	SourceTypeIndexer  SourceType = "indexer"
	SourceTypeMappings SourceType = "mappings"
	SourceTypeTmdb     SourceType = "tmdb"
	SourceTypeUser     SourceType = "user"
)

// Defines values for TMDbCountryCode.
const (
	Au TMDbCountryCode = "au"
	Br TMDbCountryCode = "br"
	Ca TMDbCountryCode = "ca"
	De TMDbCountryCode = "de"
	Es TMDbCountryCode = "es"
	Fr TMDbCountryCode = "fr"
	Gb TMDbCountryCode = "gb"
	Ie TMDbCountryCode = "ie"
	In TMDbCountryCode = "in"
	It TMDbCountryCode = "it"
	Nz TMDbCountryCode = "nz"
	Ro TMDbCountryCode = "ro"
	Us TMDbCountryCode = "us"
)

// Defines values for TrackedDownloadState.
const (
	Downloading   TrackedDownloadState = "downloading"
	Failed        TrackedDownloadState = "failed"
	FailedPending TrackedDownloadState = "failedPending"
	Ignored       TrackedDownloadState = "ignored"
	ImportBlocked TrackedDownloadState = "importBlocked"
	ImportPending TrackedDownloadState = "importPending"
	Imported      TrackedDownloadState = "imported"
	Importing     TrackedDownloadState = "importing"
)

// Defines values for TrackedDownloadStatus.
const (
	Error   TrackedDownloadStatus = "error"
	Ok      TrackedDownloadStatus = "ok"
	Warning TrackedDownloadStatus = "warning"
)

// Defines values for UpdateMechanism.
const (
	Apt      UpdateMechanism = "apt"
	BuiltIn  UpdateMechanism = "builtIn"
	Docker   UpdateMechanism = "docker"
	External UpdateMechanism = "external"
	Script   UpdateMechanism = "script"
)

// AddMovieMethod defines model for AddMovieMethod.
type AddMovieMethod string

// AddMovieOptions defines model for AddMovieOptions.
type AddMovieOptions struct {
	AddMethod                  *AddMovieMethod `json:"addMethod,omitempty"`
	IgnoreEpisodesWithFiles    *bool           `json:"ignoreEpisodesWithFiles,omitempty"`
	IgnoreEpisodesWithoutFiles *bool           `json:"ignoreEpisodesWithoutFiles,omitempty"`
	Monitor                    *MonitorTypes   `json:"monitor,omitempty"`
	SearchForMovie             *bool           `json:"searchForMovie,omitempty"`
}

// AlternativeTitleResource defines model for AlternativeTitleResource.
type AlternativeTitleResource struct {
	CleanTitle      *string     `json:"cleanTitle"`
	Id              *int32      `json:"id,omitempty"`
	MovieMetadataId *int32      `json:"movieMetadataId,omitempty"`
	SourceType      *SourceType `json:"sourceType,omitempty"`
	Title           *string     `json:"title"`
}

// ApiInfoResource defines model for ApiInfoResource.
type ApiInfoResource struct {
	Current    *string   `json:"current"`
	Deprecated *[]string `json:"deprecated"`
}

// ApplyTags defines model for ApplyTags.
type ApplyTags string

// AuthenticationRequiredType defines model for AuthenticationRequiredType.
type AuthenticationRequiredType string

// AuthenticationType defines model for AuthenticationType.
type AuthenticationType string

// AutoTaggingResource defines model for AutoTaggingResource.
type AutoTaggingResource struct {
	Id                      *int32                            `json:"id,omitempty"`
	Name                    *string                           `json:"name"`
	RemoveTagsAutomatically *bool                             `json:"removeTagsAutomatically,omitempty"`
	Specifications          *[]AutoTaggingSpecificationSchema `json:"specifications"`
	Tags                    *[]int32                          `json:"tags"`
}

// AutoTaggingSpecificationSchema defines model for AutoTaggingSpecificationSchema.
type AutoTaggingSpecificationSchema struct {
	Fields             *[]Field `json:"fields"`
	Id                 *int32   `json:"id,omitempty"`
	Implementation     *string  `json:"implementation"`
	ImplementationName *string  `json:"implementationName"`
	Name               *string  `json:"name"`
	Negate             *bool    `json:"negate,omitempty"`
	Required           *bool    `json:"required,omitempty"`
}

// BackupResource defines model for BackupResource.
type BackupResource struct {
	Id   *int32      `json:"id,omitempty"`
	Name *string     `json:"name"`
	Path *string     `json:"path"`
	Size *int64      `json:"size,omitempty"`
	Time *time.Time  `json:"time,omitempty"`
	Type *BackupType `json:"type,omitempty"`
}

// BackupType defines model for BackupType.
type BackupType string

// BlocklistBulkResource defines model for BlocklistBulkResource.
type BlocklistBulkResource struct {
	Ids *[]int32 `json:"ids"`
}

// BlocklistResource defines model for BlocklistResource.
type BlocklistResource struct {
	CustomFormats *[]CustomFormatResource `json:"customFormats"`
	Date          *time.Time              `json:"date,omitempty"`
	Id            *int32                  `json:"id,omitempty"`
	Indexer       *string                 `json:"indexer"`
	Languages     *[]Language             `json:"languages"`
	Message       *string                 `json:"message"`
	Movie         *MovieResource          `json:"movie,omitempty"`
	MovieId       *int32                  `json:"movieId,omitempty"`
	Protocol      *DownloadProtocol       `json:"protocol,omitempty"`
	Quality       *QualityModel           `json:"quality,omitempty"`
	SourceTitle   *string                 `json:"sourceTitle"`
}

// BlocklistResourcePagingResource defines model for BlocklistResourcePagingResource.
type BlocklistResourcePagingResource struct {
	Page          *int32               `json:"page,omitempty"`
	PageSize      *int32               `json:"pageSize,omitempty"`
	Records       *[]BlocklistResource `json:"records"`
	SortDirection *SortDirection       `json:"sortDirection,omitempty"`
	SortKey       *string              `json:"sortKey"`
	TotalRecords  *int32               `json:"totalRecords,omitempty"`
}

// CertificateValidationType defines model for CertificateValidationType.
type CertificateValidationType string

// CollectionMovieResource defines model for CollectionMovieResource.
type CollectionMovieResource struct {
	CleanTitle *string          `json:"cleanTitle"`
	Folder     *string          `json:"folder"`
	Genres     *[]string        `json:"genres"`
	Images     *[]MediaCover    `json:"images"`
	ImdbId     *string          `json:"imdbId"`
	IsExcluded *bool            `json:"isExcluded,omitempty"`
	IsExisting *bool            `json:"isExisting,omitempty"`
	Overview   *string          `json:"overview"`
	Ratings    *Ratings         `json:"ratings,omitempty"`
	Runtime    *int32           `json:"runtime,omitempty"`
	SortTitle  *string          `json:"sortTitle"`
	Status     *MovieStatusType `json:"status,omitempty"`
	Title      *string          `json:"title"`
	TmdbId     *int32           `json:"tmdbId,omitempty"`
	Year       *int32           `json:"year,omitempty"`
}

// CollectionResource defines model for CollectionResource.
type CollectionResource struct {
	Id                  *int32                     `json:"id,omitempty"`
	Images              *[]MediaCover              `json:"images"`
	MinimumAvailability *MovieStatusType           `json:"minimumAvailability,omitempty"`
	MissingMovies       *int32                     `json:"missingMovies,omitempty"`
	Monitored           *bool                      `json:"monitored,omitempty"`
	Movies              *[]CollectionMovieResource `json:"movies"`
	Overview            *string                    `json:"overview"`
	QualityProfileId    *int32                     `json:"qualityProfileId,omitempty"`
	RootFolderPath      *string                    `json:"rootFolderPath"`
	SearchOnAdd         *bool                      `json:"searchOnAdd,omitempty"`
	SortTitle           *string                    `json:"sortTitle"`
	Tags                *[]int32                   `json:"tags"`
	Title               *string                    `json:"title"`
	TmdbId              *int32                     `json:"tmdbId,omitempty"`
}

// CollectionUpdateResource defines model for CollectionUpdateResource.
type CollectionUpdateResource struct {
	CollectionIds       *[]int32         `json:"collectionIds"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
	MonitorMovies       *bool            `json:"monitorMovies"`
	Monitored           *bool            `json:"monitored"`
	QualityProfileId    *int32           `json:"qualityProfileId"`
	RootFolderPath      *string          `json:"rootFolderPath"`
	SearchOnAdd         *bool            `json:"searchOnAdd"`
}

// ColonReplacementFormat defines model for ColonReplacementFormat.
type ColonReplacementFormat string

// Command defines model for Command.
type Command struct {
	ClientUserAgent     *string         `json:"clientUserAgent"`
	CompletionMessage   *string         `json:"completionMessage"`
	IsExclusive         *bool           `json:"isExclusive,omitempty"`
	IsLongRunning       *bool           `json:"isLongRunning,omitempty"`
	IsTypeExclusive     *bool           `json:"isTypeExclusive,omitempty"`
	LastExecutionTime   *time.Time      `json:"lastExecutionTime"`
	LastStartTime       *time.Time      `json:"lastStartTime"`
	Name                *string         `json:"name"`
	RequiresDiskAccess  *bool           `json:"requiresDiskAccess,omitempty"`
	SendUpdatesToClient *bool           `json:"sendUpdatesToClient,omitempty"`
	SuppressMessages    *bool           `json:"suppressMessages,omitempty"`
	Trigger             *CommandTrigger `json:"trigger,omitempty"`
	UpdateScheduledTask *bool           `json:"updateScheduledTask,omitempty"`
}

// CommandPriority defines model for CommandPriority.
type CommandPriority string

// CommandResource defines model for CommandResource.
type CommandResource struct {
	Body                *Command         `json:"body,omitempty"`
	ClientUserAgent     *string          `json:"clientUserAgent"`
	CommandName         *string          `json:"commandName"`
	Duration            *string          `json:"duration"`
	Ended               *time.Time       `json:"ended"`
	Exception           *string          `json:"exception"`
	Id                  *int32           `json:"id,omitempty"`
	LastExecutionTime   *time.Time       `json:"lastExecutionTime"`
	Message             *string          `json:"message"`
	Name                *string          `json:"name"`
	Priority            *CommandPriority `json:"priority,omitempty"`
	Queued              *time.Time       `json:"queued,omitempty"`
	Result              *CommandResult   `json:"result,omitempty"`
	SendUpdatesToClient *bool            `json:"sendUpdatesToClient,omitempty"`
	Started             *time.Time       `json:"started"`
	StateChangeTime     *time.Time       `json:"stateChangeTime"`
	Status              *CommandStatus   `json:"status,omitempty"`
	Trigger             *CommandTrigger  `json:"trigger,omitempty"`
	UpdateScheduledTask *bool            `json:"updateScheduledTask,omitempty"`
}

// CommandResult defines model for CommandResult.
type CommandResult string

// CommandStatus defines model for CommandStatus.
type CommandStatus string

// CommandTrigger defines model for CommandTrigger.
type CommandTrigger string

// CreditResource defines model for CreditResource.
type CreditResource struct {
	Character       *string       `json:"character"`
	CreditTmdbId    *string       `json:"creditTmdbId"`
	Department      *string       `json:"department"`
	Id              *int32        `json:"id,omitempty"`
	Images          *[]MediaCover `json:"images"`
	Job             *string       `json:"job"`
	MovieMetadataId *int32        `json:"movieMetadataId,omitempty"`
	Order           *int32        `json:"order,omitempty"`
	PersonName      *string       `json:"personName"`
	PersonTmdbId    *int32        `json:"personTmdbId,omitempty"`
	Type            *CreditType   `json:"type,omitempty"`
}

// CreditType defines model for CreditType.
type CreditType string

// CustomFilterResource defines model for CustomFilterResource.
type CustomFilterResource struct {
	Filters *[]map[string]interface{} `json:"filters"`
	Id      *int32                    `json:"id,omitempty"`
	Label   *string                   `json:"label"`
	Type    *string                   `json:"type"`
}

// CustomFormatBulkResource defines model for CustomFormatBulkResource.
type CustomFormatBulkResource struct {
	Ids                             *[]int32 `json:"ids"`
	IncludeCustomFormatWhenRenaming *bool    `json:"includeCustomFormatWhenRenaming"`
}

// CustomFormatResource defines model for CustomFormatResource.
type CustomFormatResource struct {
	Id                              *int32                             `json:"id,omitempty"`
	IncludeCustomFormatWhenRenaming *bool                              `json:"includeCustomFormatWhenRenaming"`
	Name                            *string                            `json:"name"`
	Specifications                  *[]CustomFormatSpecificationSchema `json:"specifications"`
}

// CustomFormatSpecificationSchema defines model for CustomFormatSpecificationSchema.
type CustomFormatSpecificationSchema struct {
	Fields             *[]Field                           `json:"fields"`
	Id                 *int32                             `json:"id,omitempty"`
	Implementation     *string                            `json:"implementation"`
	ImplementationName *string                            `json:"implementationName"`
	InfoLink           *string                            `json:"infoLink"`
	Name               *string                            `json:"name"`
	Negate             *bool                              `json:"negate,omitempty"`
	Presets            *[]CustomFormatSpecificationSchema `json:"presets"`
	Required           *bool                              `json:"required,omitempty"`
}

// DatabaseType defines model for DatabaseType.
type DatabaseType string

// DelayProfileResource defines model for DelayProfileResource.
type DelayProfileResource struct {
	BypassIfAboveCustomFormatScore *bool             `json:"bypassIfAboveCustomFormatScore,omitempty"`
	BypassIfHighestQuality         *bool             `json:"bypassIfHighestQuality,omitempty"`
	EnableTorrent                  *bool             `json:"enableTorrent,omitempty"`
	EnableUsenet                   *bool             `json:"enableUsenet,omitempty"`
	Id                             *int32            `json:"id,omitempty"`
	MinimumCustomFormatScore       *int32            `json:"minimumCustomFormatScore,omitempty"`
	Order                          *int32            `json:"order,omitempty"`
	PreferredProtocol              *DownloadProtocol `json:"preferredProtocol,omitempty"`
	Tags                           *[]int32          `json:"tags"`
	TorrentDelay                   *int32            `json:"torrentDelay,omitempty"`
	UsenetDelay                    *int32            `json:"usenetDelay,omitempty"`
}

// DiskSpaceResource defines model for DiskSpaceResource.
type DiskSpaceResource struct {
	FreeSpace  *int64  `json:"freeSpace,omitempty"`
	Id         *int32  `json:"id,omitempty"`
	Label      *string `json:"label"`
	Path       *string `json:"path"`
	TotalSpace *int64  `json:"totalSpace,omitempty"`
}

// DownloadClientBulkResource defines model for DownloadClientBulkResource.
type DownloadClientBulkResource struct {
	ApplyTags                *ApplyTags `json:"applyTags,omitempty"`
	Enable                   *bool      `json:"enable"`
	Ids                      *[]int32   `json:"ids"`
	Priority                 *int32     `json:"priority"`
	RemoveCompletedDownloads *bool      `json:"removeCompletedDownloads"`
	RemoveFailedDownloads    *bool      `json:"removeFailedDownloads"`
	Tags                     *[]int32   `json:"tags"`
}

// DownloadClientConfigResource defines model for DownloadClientConfigResource.
type DownloadClientConfigResource struct {
	AutoRedownloadFailed                      *bool   `json:"autoRedownloadFailed,omitempty"`
	AutoRedownloadFailedFromInteractiveSearch *bool   `json:"autoRedownloadFailedFromInteractiveSearch,omitempty"`
	CheckForFinishedDownloadInterval          *int32  `json:"checkForFinishedDownloadInterval,omitempty"`
	DownloadClientWorkingFolders              *string `json:"downloadClientWorkingFolders"`
	EnableCompletedDownloadHandling           *bool   `json:"enableCompletedDownloadHandling,omitempty"`
	Id                                        *int32  `json:"id,omitempty"`
}

// DownloadClientResource defines model for DownloadClientResource.
type DownloadClientResource struct {
	ConfigContract           *string                   `json:"configContract"`
	Enable                   *bool                     `json:"enable,omitempty"`
	Fields                   *[]Field                  `json:"fields"`
	Id                       *int32                    `json:"id,omitempty"`
	Implementation           *string                   `json:"implementation"`
	ImplementationName       *string                   `json:"implementationName"`
	InfoLink                 *string                   `json:"infoLink"`
	Message                  *ProviderMessage          `json:"message,omitempty"`
	Name                     *string                   `json:"name"`
	Presets                  *[]DownloadClientResource `json:"presets"`
	Priority                 *int32                    `json:"priority,omitempty"`
	Protocol                 *DownloadProtocol         `json:"protocol,omitempty"`
	RemoveCompletedDownloads *bool                     `json:"removeCompletedDownloads,omitempty"`
	RemoveFailedDownloads    *bool                     `json:"removeFailedDownloads,omitempty"`
	Tags                     *[]int32                  `json:"tags"`
}

// DownloadProtocol defines model for DownloadProtocol.
type DownloadProtocol string

// ExtraFileResource defines model for ExtraFileResource.
type ExtraFileResource struct {
	Extension    *string        `json:"extension"`
	Id           *int32         `json:"id,omitempty"`
	LanguageTags *[]string      `json:"languageTags"`
	MovieFileId  *int32         `json:"movieFileId"`
	MovieId      *int32         `json:"movieId,omitempty"`
	RelativePath *string        `json:"relativePath"`
	Title        *string        `json:"title"`
	Type         *ExtraFileType `json:"type,omitempty"`
}

// ExtraFileType defines model for ExtraFileType.
type ExtraFileType string

// Field defines model for Field.
type Field struct {
	Advanced                    *bool           `json:"advanced,omitempty"`
	HelpLink                    *string         `json:"helpLink"`
	HelpText                    *string         `json:"helpText"`
	HelpTextWarning             *string         `json:"helpTextWarning"`
	Hidden                      *string         `json:"hidden"`
	IsFloat                     *bool           `json:"isFloat,omitempty"`
	Label                       *string         `json:"label"`
	Name                        *string         `json:"name"`
	Order                       *int32          `json:"order,omitempty"`
	Placeholder                 *string         `json:"placeholder"`
	Privacy                     *PrivacyLevel   `json:"privacy,omitempty"`
	Section                     *string         `json:"section"`
	SelectOptions               *[]SelectOption `json:"selectOptions"`
	SelectOptionsProviderAction *string         `json:"selectOptionsProviderAction"`
	Type                        *string         `json:"type"`
	Unit                        *string         `json:"unit"`
	Value                       *interface{}    `json:"value"`
}

// FileDateType defines model for FileDateType.
type FileDateType string

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult string

// HealthResource defines model for HealthResource.
type HealthResource struct {
	Id      *int32             `json:"id,omitempty"`
	Message *string            `json:"message"`
	Source  *string            `json:"source"`
	Type    *HealthCheckResult `json:"type,omitempty"`
	WikiUrl *string            `json:"wikiUrl,omitempty"`
}

// HistoryResource defines model for HistoryResource.
type HistoryResource struct {
	CustomFormatScore   *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats       *[]CustomFormatResource `json:"customFormats"`
	Data                *map[string]*string     `json:"data"`
	Date                *time.Time              `json:"date,omitempty"`
	DownloadId          *string                 `json:"downloadId"`
	EventType           *MovieHistoryEventType  `json:"eventType,omitempty"`
	Id                  *int32                  `json:"id,omitempty"`
	Languages           *[]Language             `json:"languages"`
	Movie               *MovieResource          `json:"movie,omitempty"`
	MovieId             *int32                  `json:"movieId,omitempty"`
	Quality             *QualityModel           `json:"quality,omitempty"`
	QualityCutoffNotMet *bool                   `json:"qualityCutoffNotMet,omitempty"`
	SourceTitle         *string                 `json:"sourceTitle"`
}

// HistoryResourcePagingResource defines model for HistoryResourcePagingResource.
type HistoryResourcePagingResource struct {
	Page          *int32             `json:"page,omitempty"`
	PageSize      *int32             `json:"pageSize,omitempty"`
	Records       *[]HistoryResource `json:"records"`
	SortDirection *SortDirection     `json:"sortDirection,omitempty"`
	SortKey       *string            `json:"sortKey"`
	TotalRecords  *int32             `json:"totalRecords,omitempty"`
}

// HostConfigResource defines model for HostConfigResource.
type HostConfigResource struct {
	AnalyticsEnabled          *bool                       `json:"analyticsEnabled,omitempty"`
	ApiKey                    *string                     `json:"apiKey"`
	ApplicationUrl            *string                     `json:"applicationUrl"`
	AuthenticationMethod      *AuthenticationType         `json:"authenticationMethod,omitempty"`
	AuthenticationRequired    *AuthenticationRequiredType `json:"authenticationRequired,omitempty"`
	BackupFolder              *string                     `json:"backupFolder"`
	BackupInterval            *int32                      `json:"backupInterval,omitempty"`
	BackupRetention           *int32                      `json:"backupRetention,omitempty"`
	BindAddress               *string                     `json:"bindAddress"`
	Branch                    *string                     `json:"branch"`
	CertificateValidation     *CertificateValidationType  `json:"certificateValidation,omitempty"`
	ConsoleLogLevel           *string                     `json:"consoleLogLevel"`
	EnableSsl                 *bool                       `json:"enableSsl,omitempty"`
	Id                        *int32                      `json:"id,omitempty"`
	InstanceName              *string                     `json:"instanceName"`
	LaunchBrowser             *bool                       `json:"launchBrowser,omitempty"`
	LogLevel                  *string                     `json:"logLevel"`
	LogSizeLimit              *int32                      `json:"logSizeLimit,omitempty"`
	Password                  *string                     `json:"password"`
	PasswordConfirmation      *string                     `json:"passwordConfirmation"`
	Port                      *int32                      `json:"port,omitempty"`
	ProxyBypassFilter         *string                     `json:"proxyBypassFilter"`
	ProxyBypassLocalAddresses *bool                       `json:"proxyBypassLocalAddresses,omitempty"`
	ProxyEnabled              *bool                       `json:"proxyEnabled,omitempty"`
	ProxyHostname             *string                     `json:"proxyHostname"`
	ProxyPassword             *string                     `json:"proxyPassword"`
	ProxyPort                 *int32                      `json:"proxyPort,omitempty"`
	ProxyType                 *ProxyType                  `json:"proxyType,omitempty"`
	ProxyUsername             *string                     `json:"proxyUsername"`
	SslCertPassword           *string                     `json:"sslCertPassword"`
	SslCertPath               *string                     `json:"sslCertPath"`
	SslPort                   *int32                      `json:"sslPort,omitempty"`
	TrustCgnatIpAddresses     *bool                       `json:"trustCgnatIpAddresses,omitempty"`
	UpdateAutomatically       *bool                       `json:"updateAutomatically,omitempty"`
	UpdateMechanism           *UpdateMechanism            `json:"updateMechanism,omitempty"`
	UpdateScriptPath          *string                     `json:"updateScriptPath"`
	UrlBase                   *string                     `json:"urlBase"`
	Username                  *string                     `json:"username"`
}

// ImportListBulkResource defines model for ImportListBulkResource.
type ImportListBulkResource struct {
	ApplyTags           *ApplyTags       `json:"applyTags,omitempty"`
	EnableAuto          *bool            `json:"enableAuto"`
	Enabled             *bool            `json:"enabled"`
	Ids                 *[]int32         `json:"ids"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
	QualityProfileId    *int32           `json:"qualityProfileId"`
	RootFolderPath      *string          `json:"rootFolderPath"`
	Tags                *[]int32         `json:"tags"`
}

// ImportListConfigResource defines model for ImportListConfigResource.
type ImportListConfigResource struct {
	Id            *int32  `json:"id,omitempty"`
	ListSyncLevel *string `json:"listSyncLevel"`
}

// ImportListExclusionBulkResource defines model for ImportListExclusionBulkResource.
type ImportListExclusionBulkResource struct {
	Ids *[]int32 `json:"ids"`
}

// ImportListExclusionResource defines model for ImportListExclusionResource.
type ImportListExclusionResource struct {
	ConfigContract     *string                        `json:"configContract"`
	Fields             *[]Field                       `json:"fields"`
	Id                 *int32                         `json:"id,omitempty"`
	Implementation     *string                        `json:"implementation"`
	ImplementationName *string                        `json:"implementationName"`
	InfoLink           *string                        `json:"infoLink"`
	Message            *ProviderMessage               `json:"message,omitempty"`
	MovieTitle         *string                        `json:"movieTitle"`
	MovieYear          *int32                         `json:"movieYear,omitempty"`
	Name               *string                        `json:"name"`
	Presets            *[]ImportListExclusionResource `json:"presets"`
	Tags               *[]int32                       `json:"tags"`
	TmdbId             *int32                         `json:"tmdbId,omitempty"`
}

// ImportListExclusionResourcePagingResource defines model for ImportListExclusionResourcePagingResource.
type ImportListExclusionResourcePagingResource struct {
	Page          *int32                         `json:"page,omitempty"`
	PageSize      *int32                         `json:"pageSize,omitempty"`
	Records       *[]ImportListExclusionResource `json:"records"`
	SortDirection *SortDirection                 `json:"sortDirection,omitempty"`
	SortKey       *string                        `json:"sortKey"`
	TotalRecords  *int32                         `json:"totalRecords,omitempty"`
}

// ImportListResource defines model for ImportListResource.
type ImportListResource struct {
	ConfigContract      *string               `json:"configContract"`
	EnableAuto          *bool                 `json:"enableAuto,omitempty"`
	Enabled             *bool                 `json:"enabled,omitempty"`
	Fields              *[]Field              `json:"fields"`
	Id                  *int32                `json:"id,omitempty"`
	Implementation      *string               `json:"implementation"`
	ImplementationName  *string               `json:"implementationName"`
	InfoLink            *string               `json:"infoLink"`
	ListOrder           *int32                `json:"listOrder,omitempty"`
	ListType            *ImportListType       `json:"listType,omitempty"`
	Message             *ProviderMessage      `json:"message,omitempty"`
	MinRefreshInterval  *string               `json:"minRefreshInterval,omitempty"`
	MinimumAvailability *MovieStatusType      `json:"minimumAvailability,omitempty"`
	Monitor             *MonitorTypes         `json:"monitor,omitempty"`
	Name                *string               `json:"name"`
	Presets             *[]ImportListResource `json:"presets"`
	QualityProfileId    *int32                `json:"qualityProfileId,omitempty"`
	RootFolderPath      *string               `json:"rootFolderPath"`
	SearchOnAdd         *bool                 `json:"searchOnAdd,omitempty"`
	Tags                *[]int32              `json:"tags"`
}

// ImportListType defines model for ImportListType.
type ImportListType string

// IndexerBulkResource defines model for IndexerBulkResource.
type IndexerBulkResource struct {
	ApplyTags               *ApplyTags `json:"applyTags,omitempty"`
	EnableAutomaticSearch   *bool      `json:"enableAutomaticSearch"`
	EnableInteractiveSearch *bool      `json:"enableInteractiveSearch"`
	EnableRss               *bool      `json:"enableRss"`
	Ids                     *[]int32   `json:"ids"`
	Priority                *int32     `json:"priority"`
	Tags                    *[]int32   `json:"tags"`
}

// IndexerConfigResource defines model for IndexerConfigResource.
type IndexerConfigResource struct {
	AllowHardcodedSubs       *bool   `json:"allowHardcodedSubs,omitempty"`
	AvailabilityDelay        *int32  `json:"availabilityDelay,omitempty"`
	Id                       *int32  `json:"id,omitempty"`
	MaximumSize              *int32  `json:"maximumSize,omitempty"`
	MinimumAge               *int32  `json:"minimumAge,omitempty"`
	PreferIndexerFlags       *bool   `json:"preferIndexerFlags,omitempty"`
	Retention                *int32  `json:"retention,omitempty"`
	RssSyncInterval          *int32  `json:"rssSyncInterval,omitempty"`
	WhitelistedHardcodedSubs *string `json:"whitelistedHardcodedSubs"`
}

// IndexerFlagResource defines model for IndexerFlagResource.
type IndexerFlagResource struct {
	Id        *int32  `json:"id,omitempty"`
	Name      *string `json:"name"`
	NameLower *string `json:"nameLower"`
}

// IndexerResource defines model for IndexerResource.
type IndexerResource struct {
	ConfigContract          *string            `json:"configContract"`
	DownloadClientId        *int32             `json:"downloadClientId,omitempty"`
	EnableAutomaticSearch   *bool              `json:"enableAutomaticSearch,omitempty"`
	EnableInteractiveSearch *bool              `json:"enableInteractiveSearch,omitempty"`
	EnableRss               *bool              `json:"enableRss,omitempty"`
	Fields                  *[]Field           `json:"fields"`
	Id                      *int32             `json:"id,omitempty"`
	Implementation          *string            `json:"implementation"`
	ImplementationName      *string            `json:"implementationName"`
	InfoLink                *string            `json:"infoLink"`
	Message                 *ProviderMessage   `json:"message,omitempty"`
	Name                    *string            `json:"name"`
	Presets                 *[]IndexerResource `json:"presets"`
	Priority                *int32             `json:"priority,omitempty"`
	Protocol                *DownloadProtocol  `json:"protocol,omitempty"`
	SupportsRss             *bool              `json:"supportsRss,omitempty"`
	SupportsSearch          *bool              `json:"supportsSearch,omitempty"`
	Tags                    *[]int32           `json:"tags"`
}

// Language defines model for Language.
type Language struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name"`
}

// LanguageResource defines model for LanguageResource.
type LanguageResource struct {
	Id        *int32  `json:"id,omitempty"`
	Name      *string `json:"name"`
	NameLower *string `json:"nameLower"`
}

// LocalizationLanguageResource defines model for LocalizationLanguageResource.
type LocalizationLanguageResource struct {
	Identifier *string `json:"identifier"`
}

// LogFileResource defines model for LogFileResource.
type LogFileResource struct {
	ContentsUrl   *string    `json:"contentsUrl"`
	DownloadUrl   *string    `json:"downloadUrl"`
	Filename      *string    `json:"filename"`
	Id            *int32     `json:"id,omitempty"`
	LastWriteTime *time.Time `json:"lastWriteTime,omitempty"`
}

// LogResource defines model for LogResource.
type LogResource struct {
	Exception     *string    `json:"exception"`
	ExceptionType *string    `json:"exceptionType"`
	Id            *int32     `json:"id,omitempty"`
	Level         *string    `json:"level"`
	Logger        *string    `json:"logger"`
	Message       *string    `json:"message"`
	Method        *string    `json:"method"`
	Time          *time.Time `json:"time,omitempty"`
}

// LogResourcePagingResource defines model for LogResourcePagingResource.
type LogResourcePagingResource struct {
	Page          *int32         `json:"page,omitempty"`
	PageSize      *int32         `json:"pageSize,omitempty"`
	Records       *[]LogResource `json:"records"`
	SortDirection *SortDirection `json:"sortDirection,omitempty"`
	SortKey       *string        `json:"sortKey"`
	TotalRecords  *int32         `json:"totalRecords,omitempty"`
}

// ManualImportReprocessResource defines model for ManualImportReprocessResource.
type ManualImportReprocessResource struct {
	CustomFormatScore *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats     *[]CustomFormatResource `json:"customFormats"`
	DownloadId        *string                 `json:"downloadId"`
	Id                *int32                  `json:"id,omitempty"`
	IndexerFlags      *int32                  `json:"indexerFlags,omitempty"`
	Languages         *[]Language             `json:"languages"`
	Movie             *MovieResource          `json:"movie,omitempty"`
	MovieId           *int32                  `json:"movieId,omitempty"`
	Path              *string                 `json:"path"`
	Quality           *QualityModel           `json:"quality,omitempty"`
	Rejections        *[]Rejection            `json:"rejections"`
	ReleaseGroup      *string                 `json:"releaseGroup"`
}

// ManualImportResource defines model for ManualImportResource.
type ManualImportResource struct {
	CustomFormatScore *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats     *[]CustomFormatResource `json:"customFormats"`
	DownloadId        *string                 `json:"downloadId"`
	FolderName        *string                 `json:"folderName"`
	Id                *int32                  `json:"id,omitempty"`
	IndexerFlags      *int32                  `json:"indexerFlags,omitempty"`
	Languages         *[]Language             `json:"languages"`
	Movie             *MovieResource          `json:"movie,omitempty"`
	Name              *string                 `json:"name"`
	Path              *string                 `json:"path"`
	Quality           *QualityModel           `json:"quality,omitempty"`
	QualityWeight     *int32                  `json:"qualityWeight,omitempty"`
	Rejections        *[]Rejection            `json:"rejections"`
	RelativePath      *string                 `json:"relativePath"`
	ReleaseGroup      *string                 `json:"releaseGroup"`
	Size              *int64                  `json:"size,omitempty"`
}

// MediaCover defines model for MediaCover.
type MediaCover struct {
	CoverType *MediaCoverTypes `json:"coverType,omitempty"`
	RemoteUrl *string          `json:"remoteUrl"`
	Url       *string          `json:"url"`
}

// MediaCoverTypes defines model for MediaCoverTypes.
type MediaCoverTypes string

// MediaInfoResource defines model for MediaInfoResource.
type MediaInfoResource struct {
	AudioBitrate          *int64   `json:"audioBitrate,omitempty"`
	AudioChannels         *float64 `json:"audioChannels,omitempty"`
	AudioCodec            *string  `json:"audioCodec"`
	AudioLanguages        *string  `json:"audioLanguages"`
	AudioStreamCount      *int32   `json:"audioStreamCount,omitempty"`
	Id                    *int32   `json:"id,omitempty"`
	Resolution            *string  `json:"resolution"`
	RunTime               *string  `json:"runTime"`
	ScanType              *string  `json:"scanType"`
	Subtitles             *string  `json:"subtitles"`
	VideoBitDepth         *int32   `json:"videoBitDepth,omitempty"`
	VideoBitrate          *int64   `json:"videoBitrate,omitempty"`
	VideoCodec            *string  `json:"videoCodec"`
	VideoDynamicRange     *string  `json:"videoDynamicRange"`
	VideoDynamicRangeType *string  `json:"videoDynamicRangeType"`
	VideoFps              *float64 `json:"videoFps,omitempty"`
}

// MediaManagementConfigResource defines model for MediaManagementConfigResource.
type MediaManagementConfigResource struct {
	AutoRenameFolders                       *bool                   `json:"autoRenameFolders,omitempty"`
	AutoUnmonitorPreviouslyDownloadedMovies *bool                   `json:"autoUnmonitorPreviouslyDownloadedMovies,omitempty"`
	ChmodFolder                             *string                 `json:"chmodFolder"`
	ChownGroup                              *string                 `json:"chownGroup"`
	CopyUsingHardlinks                      *bool                   `json:"copyUsingHardlinks,omitempty"`
	CreateEmptyMovieFolders                 *bool                   `json:"createEmptyMovieFolders,omitempty"`
	DeleteEmptyFolders                      *bool                   `json:"deleteEmptyFolders,omitempty"`
	DownloadPropersAndRepacks               *ProperDownloadTypes    `json:"downloadPropersAndRepacks,omitempty"`
	EnableMediaInfo                         *bool                   `json:"enableMediaInfo,omitempty"`
	ExtraFileExtensions                     *string                 `json:"extraFileExtensions"`
	FileDate                                *FileDateType           `json:"fileDate,omitempty"`
	Id                                      *int32                  `json:"id,omitempty"`
	ImportExtraFiles                        *bool                   `json:"importExtraFiles,omitempty"`
	MinimumFreeSpaceWhenImporting           *int32                  `json:"minimumFreeSpaceWhenImporting,omitempty"`
	PathsDefaultStatic                      *bool                   `json:"pathsDefaultStatic,omitempty"`
	RecycleBin                              *string                 `json:"recycleBin"`
	RecycleBinCleanupDays                   *int32                  `json:"recycleBinCleanupDays,omitempty"`
	RescanAfterRefresh                      *RescanAfterRefreshType `json:"rescanAfterRefresh,omitempty"`
	ScriptImportPath                        *string                 `json:"scriptImportPath"`
	SetPermissionsLinux                     *bool                   `json:"setPermissionsLinux,omitempty"`
	SkipFreeSpaceCheckWhenImporting         *bool                   `json:"skipFreeSpaceCheckWhenImporting,omitempty"`
	UseScriptImport                         *bool                   `json:"useScriptImport,omitempty"`
}

// MetadataConfigResource defines model for MetadataConfigResource.
type MetadataConfigResource struct {
	CertificationCountry *TMDbCountryCode `json:"certificationCountry,omitempty"`
	Id                   *int32           `json:"id,omitempty"`
}

// MetadataResource defines model for MetadataResource.
type MetadataResource struct {
	ConfigContract     *string             `json:"configContract"`
	Enable             *bool               `json:"enable,omitempty"`
	Fields             *[]Field            `json:"fields"`
	Id                 *int32              `json:"id,omitempty"`
	Implementation     *string             `json:"implementation"`
	ImplementationName *string             `json:"implementationName"`
	InfoLink           *string             `json:"infoLink"`
	Message            *ProviderMessage    `json:"message,omitempty"`
	Name               *string             `json:"name"`
	Presets            *[]MetadataResource `json:"presets"`
	Tags               *[]int32            `json:"tags"`
}

// Modifier defines model for Modifier.
type Modifier string

// MonitorTypes defines model for MonitorTypes.
type MonitorTypes string

// MovieCollectionResource defines model for MovieCollectionResource.
type MovieCollectionResource struct {
	Title  *string `json:"title"`
	TmdbId *int32  `json:"tmdbId,omitempty"`
}

// MovieEditorResource defines model for MovieEditorResource.
type MovieEditorResource struct {
	AddImportExclusion  *bool            `json:"addImportExclusion,omitempty"`
	ApplyTags           *ApplyTags       `json:"applyTags,omitempty"`
	DeleteFiles         *bool            `json:"deleteFiles,omitempty"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
	Monitored           *bool            `json:"monitored"`
	MoveFiles           *bool            `json:"moveFiles,omitempty"`
	MovieIds            *[]int32         `json:"movieIds"`
	QualityProfileId    *int32           `json:"qualityProfileId"`
	RootFolderPath      *string          `json:"rootFolderPath"`
	Tags                *[]int32         `json:"tags"`
}

// MovieFileListResource defines model for MovieFileListResource.
type MovieFileListResource struct {
	Edition      *string       `json:"edition"`
	IndexerFlags *int32        `json:"indexerFlags"`
	Languages    *[]Language   `json:"languages"`
	MovieFileIds *[]int32      `json:"movieFileIds"`
	Quality      *QualityModel `json:"quality,omitempty"`
	ReleaseGroup *string       `json:"releaseGroup"`
	SceneName    *string       `json:"sceneName"`
}

// MovieFileResource defines model for MovieFileResource.
type MovieFileResource struct {
	CustomFormatScore   *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats       *[]CustomFormatResource `json:"customFormats"`
	DateAdded           *time.Time              `json:"dateAdded,omitempty"`
	Edition             *string                 `json:"edition"`
	Id                  *int32                  `json:"id,omitempty"`
	IndexerFlags        *int32                  `json:"indexerFlags"`
	Languages           *[]Language             `json:"languages"`
	MediaInfo           *MediaInfoResource      `json:"mediaInfo,omitempty"`
	MovieId             *int32                  `json:"movieId,omitempty"`
	OriginalFilePath    *string                 `json:"originalFilePath"`
	Path                *string                 `json:"path"`
	Quality             *QualityModel           `json:"quality,omitempty"`
	QualityCutoffNotMet *bool                   `json:"qualityCutoffNotMet,omitempty"`
	RelativePath        *string                 `json:"relativePath"`
	ReleaseGroup        *string                 `json:"releaseGroup"`
	SceneName           *string                 `json:"sceneName"`
	Size                *int64                  `json:"size,omitempty"`
}

// MovieHistoryEventType defines model for MovieHistoryEventType.
type MovieHistoryEventType string

// MovieResource defines model for MovieResource.
type MovieResource struct {
	AddOptions            *AddMovieOptions            `json:"addOptions,omitempty"`
	Added                 *time.Time                  `json:"added,omitempty"`
	AlternateTitles       *[]AlternativeTitleResource `json:"alternateTitles"`
	Certification         *string                     `json:"certification"`
	CleanTitle            *string                     `json:"cleanTitle"`
	Collection            *MovieCollectionResource    `json:"collection,omitempty"`
	DigitalRelease        *time.Time                  `json:"digitalRelease"`
	Folder                *string                     `json:"folder"`
	FolderName            *string                     `json:"folderName"`
	Genres                *[]string                   `json:"genres"`
	HasFile               *bool                       `json:"hasFile"`
	Id                    *int32                      `json:"id,omitempty"`
	Images                *[]MediaCover               `json:"images"`
	ImdbId                *string                     `json:"imdbId"`
	InCinemas             *time.Time                  `json:"inCinemas"`
	IsAvailable           *bool                       `json:"isAvailable,omitempty"`
	LastSearchTime        *time.Time                  `json:"lastSearchTime"`
	MinimumAvailability   *MovieStatusType            `json:"minimumAvailability,omitempty"`
	Monitored             *bool                       `json:"monitored,omitempty"`
	MovieFile             *MovieFileResource          `json:"movieFile,omitempty"`
	MovieFileId           *int32                      `json:"movieFileId,omitempty"`
	OriginalLanguage      *Language                   `json:"originalLanguage,omitempty"`
	OriginalTitle         *string                     `json:"originalTitle"`
	Overview              *string                     `json:"overview"`
	Path                  *string                     `json:"path"`
	PhysicalRelease       *time.Time                  `json:"physicalRelease"`
	PhysicalReleaseNote   *string                     `json:"physicalReleaseNote"`
	Popularity            *float32                    `json:"popularity,omitempty"`
	QualityProfileId      *int32                      `json:"qualityProfileId,omitempty"`
	Ratings               *Ratings                    `json:"ratings,omitempty"`
	ReleaseDate           *time.Time                  `json:"releaseDate"`
	RemotePoster          *string                     `json:"remotePoster"`
	RootFolderPath        *string                     `json:"rootFolderPath"`
	Runtime               *int32                      `json:"runtime,omitempty"`
	SecondaryYear         *int32                      `json:"secondaryYear"`
	SecondaryYearSourceId *int32                      `json:"secondaryYearSourceId,omitempty"`
	SizeOnDisk            *int64                      `json:"sizeOnDisk"`
	SortTitle             *string                     `json:"sortTitle"`
	Statistics            *MovieStatisticsResource    `json:"statistics,omitempty"`
	Status                *MovieStatusType            `json:"status,omitempty"`
	Studio                *string                     `json:"studio"`
	Tags                  *[]int32                    `json:"tags"`
	Title                 *string                     `json:"title"`
	TitleSlug             *string                     `json:"titleSlug"`
	TmdbId                *int32                      `json:"tmdbId,omitempty"`
	Website               *string                     `json:"website"`
	Year                  *int32                      `json:"year,omitempty"`
	YouTubeTrailerId      *string                     `json:"youTubeTrailerId"`
}

// MovieResourcePagingResource defines model for MovieResourcePagingResource.
type MovieResourcePagingResource struct {
	Page          *int32           `json:"page,omitempty"`
	PageSize      *int32           `json:"pageSize,omitempty"`
	Records       *[]MovieResource `json:"records"`
	SortDirection *SortDirection   `json:"sortDirection,omitempty"`
	SortKey       *string          `json:"sortKey"`
	TotalRecords  *int32           `json:"totalRecords,omitempty"`
}

// MovieRuntimeFormatType defines model for MovieRuntimeFormatType.
type MovieRuntimeFormatType string

// MovieStatisticsResource defines model for MovieStatisticsResource.
type MovieStatisticsResource struct {
	MovieFileCount *int32    `json:"movieFileCount,omitempty"`
	ReleaseGroups  *[]string `json:"releaseGroups"`
	SizeOnDisk     *int64    `json:"sizeOnDisk,omitempty"`
}

// MovieStatusType defines model for MovieStatusType.
type MovieStatusType string

// NamingConfigResource defines model for NamingConfigResource.
type NamingConfigResource struct {
	ColonReplacementFormat   *ColonReplacementFormat `json:"colonReplacementFormat,omitempty"`
	Id                       *int32                  `json:"id,omitempty"`
	MovieFolderFormat        *string                 `json:"movieFolderFormat"`
	RenameMovies             *bool                   `json:"renameMovies,omitempty"`
	ReplaceIllegalCharacters *bool                   `json:"replaceIllegalCharacters,omitempty"`
	StandardMovieFormat      *string                 `json:"standardMovieFormat"`
}

// NotificationResource defines model for NotificationResource.
type NotificationResource struct {
	ConfigContract                      *string                 `json:"configContract"`
	Fields                              *[]Field                `json:"fields"`
	Id                                  *int32                  `json:"id,omitempty"`
	Implementation                      *string                 `json:"implementation"`
	ImplementationName                  *string                 `json:"implementationName"`
	IncludeHealthWarnings               *bool                   `json:"includeHealthWarnings,omitempty"`
	InfoLink                            *string                 `json:"infoLink"`
	Link                                *string                 `json:"link"`
	Message                             *ProviderMessage        `json:"message,omitempty"`
	Name                                *string                 `json:"name"`
	OnApplicationUpdate                 *bool                   `json:"onApplicationUpdate,omitempty"`
	OnDownload                          *bool                   `json:"onDownload,omitempty"`
	OnGrab                              *bool                   `json:"onGrab,omitempty"`
	OnHealthIssue                       *bool                   `json:"onHealthIssue,omitempty"`
	OnHealthRestored                    *bool                   `json:"onHealthRestored,omitempty"`
	OnManualInteractionRequired         *bool                   `json:"onManualInteractionRequired,omitempty"`
	OnMovieAdded                        *bool                   `json:"onMovieAdded,omitempty"`
	OnMovieDelete                       *bool                   `json:"onMovieDelete,omitempty"`
	OnMovieFileDelete                   *bool                   `json:"onMovieFileDelete,omitempty"`
	OnMovieFileDeleteForUpgrade         *bool                   `json:"onMovieFileDeleteForUpgrade,omitempty"`
	OnRename                            *bool                   `json:"onRename,omitempty"`
	OnUpgrade                           *bool                   `json:"onUpgrade,omitempty"`
	Presets                             *[]NotificationResource `json:"presets"`
	SupportsOnApplicationUpdate         *bool                   `json:"supportsOnApplicationUpdate,omitempty"`
	SupportsOnDownload                  *bool                   `json:"supportsOnDownload,omitempty"`
	SupportsOnGrab                      *bool                   `json:"supportsOnGrab,omitempty"`
	SupportsOnHealthIssue               *bool                   `json:"supportsOnHealthIssue,omitempty"`
	SupportsOnHealthRestored            *bool                   `json:"supportsOnHealthRestored,omitempty"`
	SupportsOnManualInteractionRequired *bool                   `json:"supportsOnManualInteractionRequired,omitempty"`
	SupportsOnMovieAdded                *bool                   `json:"supportsOnMovieAdded,omitempty"`
	SupportsOnMovieDelete               *bool                   `json:"supportsOnMovieDelete,omitempty"`
	SupportsOnMovieFileDelete           *bool                   `json:"supportsOnMovieFileDelete,omitempty"`
	SupportsOnMovieFileDeleteForUpgrade *bool                   `json:"supportsOnMovieFileDeleteForUpgrade,omitempty"`
	SupportsOnRename                    *bool                   `json:"supportsOnRename,omitempty"`
	SupportsOnUpgrade                   *bool                   `json:"supportsOnUpgrade,omitempty"`
	Tags                                *[]int32                `json:"tags"`
	TestCommand                         *string                 `json:"testCommand"`
}

// ParseResource defines model for ParseResource.
type ParseResource struct {
	CustomFormatScore *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats     *[]CustomFormatResource `json:"customFormats"`
	Id                *int32                  `json:"id,omitempty"`
	Languages         *[]Language             `json:"languages"`
	Movie             *MovieResource          `json:"movie,omitempty"`
	ParsedMovieInfo   *ParsedMovieInfo        `json:"parsedMovieInfo,omitempty"`
	Title             *string                 `json:"title"`
}

// ParsedMovieInfo defines model for ParsedMovieInfo.
type ParsedMovieInfo struct {
	Edition            *string       `json:"edition"`
	HardcodedSubs      *string       `json:"hardcodedSubs"`
	ImdbId             *string       `json:"imdbId"`
	Languages          *[]Language   `json:"languages"`
	MovieTitle         *string       `json:"movieTitle"`
	MovieTitles        *[]string     `json:"movieTitles"`
	OriginalTitle      *string       `json:"originalTitle"`
	PrimaryMovieTitle  *string       `json:"primaryMovieTitle"`
	Quality            *QualityModel `json:"quality,omitempty"`
	ReleaseGroup       *string       `json:"releaseGroup"`
	ReleaseHash        *string       `json:"releaseHash"`
	ReleaseTitle       *string       `json:"releaseTitle"`
	SimpleReleaseTitle *string       `json:"simpleReleaseTitle"`
	TmdbId             *int32        `json:"tmdbId,omitempty"`
	Year               *int32        `json:"year,omitempty"`
}

// PingResource defines model for PingResource.
type PingResource struct {
	Status *string `json:"status"`
}

// PrivacyLevel defines model for PrivacyLevel.
type PrivacyLevel string

// ProfileFormatItemResource defines model for ProfileFormatItemResource.
type ProfileFormatItemResource struct {
	Format *int32  `json:"format,omitempty"`
	Id     *int32  `json:"id,omitempty"`
	Name   *string `json:"name"`
	Score  *int32  `json:"score,omitempty"`
}

// ProperDownloadTypes defines model for ProperDownloadTypes.
type ProperDownloadTypes string

// ProviderMessage defines model for ProviderMessage.
type ProviderMessage struct {
	Message *string              `json:"message"`
	Type    *ProviderMessageType `json:"type,omitempty"`
}

// ProviderMessageType defines model for ProviderMessageType.
type ProviderMessageType string

// ProxyType defines model for ProxyType.
type ProxyType string

// Quality defines model for Quality.
type Quality struct {
	Id         *int32         `json:"id,omitempty"`
	Modifier   *Modifier      `json:"modifier,omitempty"`
	Name       *string        `json:"name"`
	Resolution *int32         `json:"resolution,omitempty"`
	Source     *QualitySource `json:"source,omitempty"`
}

// QualityDefinitionResource defines model for QualityDefinitionResource.
type QualityDefinitionResource struct {
	Id            *int32   `json:"id,omitempty"`
	MaxSize       *float64 `json:"maxSize"`
	MinSize       *float64 `json:"minSize"`
	PreferredSize *float64 `json:"preferredSize"`
	Quality       *Quality `json:"quality,omitempty"`
	Title         *string  `json:"title"`
	Weight        *int32   `json:"weight,omitempty"`
}

// QualityModel defines model for QualityModel.
type QualityModel struct {
	Quality  *Quality  `json:"quality,omitempty"`
	Revision *Revision `json:"revision,omitempty"`
}

// QualityProfileQualityItemResource defines model for QualityProfileQualityItemResource.
type QualityProfileQualityItemResource struct {
	Allowed *bool                                `json:"allowed,omitempty"`
	Id      *int32                               `json:"id,omitempty"`
	Items   *[]QualityProfileQualityItemResource `json:"items"`
	Name    *string                              `json:"name"`
	Quality *Quality                             `json:"quality,omitempty"`
}

// QualityProfileResource defines model for QualityProfileResource.
type QualityProfileResource struct {
	Cutoff                *int32                               `json:"cutoff,omitempty"`
	CutoffFormatScore     *int32                               `json:"cutoffFormatScore,omitempty"`
	FormatItems           *[]ProfileFormatItemResource         `json:"formatItems"`
	Id                    *int32                               `json:"id,omitempty"`
	Items                 *[]QualityProfileQualityItemResource `json:"items"`
	Language              *Language                            `json:"language,omitempty"`
	MinFormatScore        *int32                               `json:"minFormatScore,omitempty"`
	MinUpgradeFormatScore *int32                               `json:"minUpgradeFormatScore,omitempty"`
	Name                  *string                              `json:"name"`
	UpgradeAllowed        *bool                                `json:"upgradeAllowed,omitempty"`
}

// QualitySource defines model for QualitySource.
type QualitySource string

// QueueBulkResource defines model for QueueBulkResource.
type QueueBulkResource struct {
	Ids *[]int32 `json:"ids"`
}

// QueueResource defines model for QueueResource.
type QueueResource struct {
	Added                               *time.Time              `json:"added"`
	CustomFormatScore                   *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats                       *[]CustomFormatResource `json:"customFormats"`
	DownloadClient                      *string                 `json:"downloadClient"`
	DownloadClientHasPostImportCategory *bool                   `json:"downloadClientHasPostImportCategory,omitempty"`
	DownloadId                          *string                 `json:"downloadId"`
	ErrorMessage                        *string                 `json:"errorMessage"`
	EstimatedCompletionTime             *time.Time              `json:"estimatedCompletionTime"`
	Id                                  *int32                  `json:"id,omitempty"`
	Indexer                             *string                 `json:"indexer"`
	Languages                           *[]Language             `json:"languages"`
	Movie                               *MovieResource          `json:"movie,omitempty"`
	MovieId                             *int32                  `json:"movieId"`
	OutputPath                          *string                 `json:"outputPath"`
	Protocol                            *DownloadProtocol       `json:"protocol,omitempty"`
	Quality                             *QualityModel           `json:"quality,omitempty"`
	Size                                *float64                `json:"size,omitempty"`
	// Deprecated:
	Sizeleft       *float64                        `json:"sizeleft,omitempty"`
	Status         *QueueStatus                    `json:"status,omitempty"`
	StatusMessages *[]TrackedDownloadStatusMessage `json:"statusMessages"`
	// Deprecated:
	Timeleft              *string                `json:"timeleft"`
	Title                 *string                `json:"title"`
	TrackedDownloadState  *TrackedDownloadState  `json:"trackedDownloadState,omitempty"`
	TrackedDownloadStatus *TrackedDownloadStatus `json:"trackedDownloadStatus,omitempty"`
}

// QueueResourcePagingResource defines model for QueueResourcePagingResource.
type QueueResourcePagingResource struct {
	Page          *int32           `json:"page,omitempty"`
	PageSize      *int32           `json:"pageSize,omitempty"`
	Records       *[]QueueResource `json:"records"`
	SortDirection *SortDirection   `json:"sortDirection,omitempty"`
	SortKey       *string          `json:"sortKey"`
	TotalRecords  *int32           `json:"totalRecords,omitempty"`
}

// QueueStatus defines model for QueueStatus.
type QueueStatus string

// QueueStatusResource defines model for QueueStatusResource.
type QueueStatusResource struct {
	Count           *int32 `json:"count,omitempty"`
	Errors          *bool  `json:"errors,omitempty"`
	Id              *int32 `json:"id,omitempty"`
	TotalCount      *int32 `json:"totalCount,omitempty"`
	UnknownCount    *int32 `json:"unknownCount,omitempty"`
	UnknownErrors   *bool  `json:"unknownErrors,omitempty"`
	UnknownWarnings *bool  `json:"unknownWarnings,omitempty"`
	Warnings        *bool  `json:"warnings,omitempty"`
}

// RatingChild defines model for RatingChild.
type RatingChild struct {
	Type  *RatingType `json:"type,omitempty"`
	Value *float64    `json:"value,omitempty"`
	Votes *int32      `json:"votes,omitempty"`
}

// RatingType defines model for RatingType.
type RatingType string

// Ratings defines model for Ratings.
type Ratings struct {
	Imdb           *RatingChild `json:"imdb,omitempty"`
	Metacritic     *RatingChild `json:"metacritic,omitempty"`
	RottenTomatoes *RatingChild `json:"rottenTomatoes,omitempty"`
	Tmdb           *RatingChild `json:"tmdb,omitempty"`
	Trakt          *RatingChild `json:"trakt,omitempty"`
}

// Rejection defines model for Rejection.
type Rejection struct {
	Reason *string        `json:"reason"`
	Type   *RejectionType `json:"type,omitempty"`
}

// RejectionType defines model for RejectionType.
type RejectionType string

// ReleaseProfileResource defines model for ReleaseProfileResource.
type ReleaseProfileResource struct {
	Enabled   *bool        `json:"enabled,omitempty"`
	Id        *int32       `json:"id,omitempty"`
	Ignored   *interface{} `json:"ignored"`
	IndexerId *int32       `json:"indexerId,omitempty"`
	Name      *string      `json:"name"`
	Required  *interface{} `json:"required"`
	Tags      *[]int32     `json:"tags"`
}

// ReleaseResource defines model for ReleaseResource.
type ReleaseResource struct {
	Age                 *int32                  `json:"age,omitempty"`
	AgeHours            *float64                `json:"ageHours,omitempty"`
	AgeMinutes          *float64                `json:"ageMinutes,omitempty"`
	Approved            *bool                   `json:"approved,omitempty"`
	CommentUrl          *string                 `json:"commentUrl"`
	CustomFormatScore   *int32                  `json:"customFormatScore,omitempty"`
	CustomFormats       *[]CustomFormatResource `json:"customFormats"`
	DownloadAllowed     *bool                   `json:"downloadAllowed,omitempty"`
	DownloadClient      *string                 `json:"downloadClient"`
	DownloadClientId    *int32                  `json:"downloadClientId"`
	DownloadUrl         *string                 `json:"downloadUrl"`
	Edition             *string                 `json:"edition"`
	Guid                *string                 `json:"guid"`
	Id                  *int32                  `json:"id,omitempty"`
	ImdbId              *int32                  `json:"imdbId,omitempty"`
	Indexer             *string                 `json:"indexer"`
	IndexerFlags        *interface{}            `json:"indexerFlags"`
	IndexerId           *int32                  `json:"indexerId,omitempty"`
	InfoHash            *string                 `json:"infoHash"`
	InfoUrl             *string                 `json:"infoUrl"`
	Languages           *[]Language             `json:"languages"`
	Leechers            *int32                  `json:"leechers"`
	MagnetUrl           *string                 `json:"magnetUrl"`
	MappedMovieId       *int32                  `json:"mappedMovieId"`
	MovieId             *int32                  `json:"movieId"`
	MovieTitles         *[]string               `json:"movieTitles"`
	Protocol            *DownloadProtocol       `json:"protocol,omitempty"`
	PublishDate         *time.Time              `json:"publishDate,omitempty"`
	Quality             *QualityModel           `json:"quality,omitempty"`
	QualityWeight       *int32                  `json:"qualityWeight,omitempty"`
	Rejected            *bool                   `json:"rejected,omitempty"`
	Rejections          *[]string               `json:"rejections"`
	ReleaseGroup        *string                 `json:"releaseGroup"`
	ReleaseHash         *string                 `json:"releaseHash"`
	ReleaseWeight       *int32                  `json:"releaseWeight,omitempty"`
	SceneSource         *bool                   `json:"sceneSource,omitempty"`
	Seeders             *int32                  `json:"seeders"`
	ShouldOverride      *bool                   `json:"shouldOverride"`
	Size                *int64                  `json:"size,omitempty"`
	SubGroup            *string                 `json:"subGroup"`
	TemporarilyRejected *bool                   `json:"temporarilyRejected,omitempty"`
	Title               *string                 `json:"title"`
	TmdbId              *int32                  `json:"tmdbId,omitempty"`
}

// RemotePathMappingResource defines model for RemotePathMappingResource.
type RemotePathMappingResource struct {
	Host       *string `json:"host"`
	Id         *int32  `json:"id,omitempty"`
	LocalPath  *string `json:"localPath"`
	RemotePath *string `json:"remotePath"`
}

// RenameMovieResource defines model for RenameMovieResource.
type RenameMovieResource struct {
	ExistingPath *string `json:"existingPath"`
	Id           *int32  `json:"id,omitempty"`
	MovieFileId  *int32  `json:"movieFileId,omitempty"`
	MovieId      *int32  `json:"movieId,omitempty"`
	NewPath      *string `json:"newPath"`
}

// RescanAfterRefreshType defines model for RescanAfterRefreshType.
type RescanAfterRefreshType string

// Revision defines model for Revision.
type Revision struct {
	IsRepack *bool  `json:"isRepack,omitempty"`
	Real     *int32 `json:"real,omitempty"`
	Version  *int32 `json:"version,omitempty"`
}

// RootFolderResource defines model for RootFolderResource.
type RootFolderResource struct {
	Accessible      *bool             `json:"accessible,omitempty"`
	FreeSpace       *int64            `json:"freeSpace"`
	Id              *int32            `json:"id,omitempty"`
	Path            *string           `json:"path"`
	UnmappedFolders *[]UnmappedFolder `json:"unmappedFolders"`
}

// RuntimeMode defines model for RuntimeMode.
type RuntimeMode string

// SelectOption defines model for SelectOption.
type SelectOption struct {
	DividerAfter *bool   `json:"dividerAfter,omitempty"`
	Hint         *string `json:"hint"`
	Name         *string `json:"name"`
	Order        *int32  `json:"order,omitempty"`
	Value        *int32  `json:"value,omitempty"`
}

// SortDirection defines model for SortDirection.
type SortDirection string

// SourceType defines model for SourceType.
type SourceType string

// SystemResource defines model for SystemResource.
type SystemResource struct {
	AppData                       *string             `json:"appData"`
	AppName                       *string             `json:"appName"`
	Authentication                *AuthenticationType `json:"authentication,omitempty"`
	Branch                        *string             `json:"branch"`
	BuildTime                     *time.Time          `json:"buildTime,omitempty"`
	DatabaseType                  *DatabaseType       `json:"databaseType,omitempty"`
	DatabaseVersion               *string             `json:"databaseVersion"`
	InstanceName                  *string             `json:"instanceName"`
	IsAdmin                       *bool               `json:"isAdmin,omitempty"`
	IsDebug                       *bool               `json:"isDebug,omitempty"`
	IsDocker                      *bool               `json:"isDocker,omitempty"`
	IsLinux                       *bool               `json:"isLinux,omitempty"`
	IsNetCore                     *bool               `json:"isNetCore,omitempty"`
	IsOsx                         *bool               `json:"isOsx,omitempty"`
	IsProduction                  *bool               `json:"isProduction,omitempty"`
	IsUserInteractive             *bool               `json:"isUserInteractive,omitempty"`
	IsWindows                     *bool               `json:"isWindows,omitempty"`
	MigrationVersion              *int32              `json:"migrationVersion,omitempty"`
	Mode                          *RuntimeMode        `json:"mode,omitempty"`
	OsName                        *string             `json:"osName"`
	OsVersion                     *string             `json:"osVersion"`
	PackageAuthor                 *string             `json:"packageAuthor"`
	PackageUpdateMechanism        *UpdateMechanism    `json:"packageUpdateMechanism,omitempty"`
	PackageUpdateMechanismMessage *string             `json:"packageUpdateMechanismMessage"`
	PackageVersion                *string             `json:"packageVersion"`
	RuntimeName                   *string             `json:"runtimeName"`
	RuntimeVersion                *string             `json:"runtimeVersion"`
	StartTime                     *time.Time          `json:"startTime,omitempty"`
	StartupPath                   *string             `json:"startupPath"`
	UrlBase                       *string             `json:"urlBase"`
	Version                       *string             `json:"version"`
}

// TMDbCountryCode defines model for TMDbCountryCode.
type TMDbCountryCode string

// TagDetailsResource defines model for TagDetailsResource.
type TagDetailsResource struct {
	AutoTagIds        *[]int32 `json:"autoTagIds"`
	DelayProfileIds   *[]int32 `json:"delayProfileIds"`
	DownloadClientIds *[]int32 `json:"downloadClientIds"`
	Id                *int32   `json:"id,omitempty"`
	ImportListIds     *[]int32 `json:"importListIds"`
	IndexerIds        *[]int32 `json:"indexerIds"`
	Label             *string  `json:"label"`
	MovieIds          *[]int32 `json:"movieIds"`
	NotificationIds   *[]int32 `json:"notificationIds"`
	ReleaseProfileIds *[]int32 `json:"releaseProfileIds"`
}

// TagResource defines model for TagResource.
type TagResource struct {
	Id    *int32  `json:"id,omitempty"`
	Label *string `json:"label"`
}

// TaskResource defines model for TaskResource.
type TaskResource struct {
	Id            *int32     `json:"id,omitempty"`
	Interval      *int32     `json:"interval,omitempty"`
	LastDuration  *string    `json:"lastDuration,omitempty"`
	LastExecution *time.Time `json:"lastExecution,omitempty"`
	LastStartTime *time.Time `json:"lastStartTime,omitempty"`
	Name          *string    `json:"name"`
	NextExecution *time.Time `json:"nextExecution,omitempty"`
	TaskName      *string    `json:"taskName"`
}

// TrackedDownloadState defines model for TrackedDownloadState.
type TrackedDownloadState string

// TrackedDownloadStatus defines model for TrackedDownloadStatus.
type TrackedDownloadStatus string

// TrackedDownloadStatusMessage defines model for TrackedDownloadStatusMessage.
type TrackedDownloadStatusMessage struct {
	Messages *[]string `json:"messages"`
	Title    *string   `json:"title"`
}

// UiConfigResource defines model for UiConfigResource.
type UiConfigResource struct {
	CalendarWeekColumnHeader *string                 `json:"calendarWeekColumnHeader"`
	EnableColorImpairedMode  *bool                   `json:"enableColorImpairedMode,omitempty"`
	FirstDayOfWeek           *int32                  `json:"firstDayOfWeek,omitempty"`
	Id                       *int32                  `json:"id,omitempty"`
	LongDateFormat           *string                 `json:"longDateFormat"`
	MovieInfoLanguage        *int32                  `json:"movieInfoLanguage,omitempty"`
	MovieRuntimeFormat       *MovieRuntimeFormatType `json:"movieRuntimeFormat,omitempty"`
	ShortDateFormat          *string                 `json:"shortDateFormat"`
	ShowRelativeDates        *bool                   `json:"showRelativeDates,omitempty"`
	Theme                    *string                 `json:"theme"`
	TimeFormat               *string                 `json:"timeFormat"`
	UiLanguage               *int32                  `json:"uiLanguage,omitempty"`
}

// UnmappedFolder defines model for UnmappedFolder.
type UnmappedFolder struct {
	Name         *string `json:"name"`
	Path         *string `json:"path"`
	RelativePath *string `json:"relativePath"`
}

// UpdateChanges defines model for UpdateChanges.
type UpdateChanges struct {
	Fixed *[]string `json:"fixed"`
	New   *[]string `json:"new"`
}

// UpdateMechanism defines model for UpdateMechanism.
type UpdateMechanism string

// UpdateResource defines model for UpdateResource.
type UpdateResource struct {
	Branch      *string        `json:"branch"`
	Changes     *UpdateChanges `json:"changes,omitempty"`
	FileName    *string        `json:"fileName"`
	Hash        *string        `json:"hash"`
	Id          *int32         `json:"id,omitempty"`
	Installable *bool          `json:"installable,omitempty"`
	Installed   *bool          `json:"installed,omitempty"`
	InstalledOn *time.Time     `json:"installedOn"`
	Latest      *bool          `json:"latest,omitempty"`
	ReleaseDate *time.Time     `json:"releaseDate,omitempty"`
	Url         *string        `json:"url"`
	Version     *string        `json:"version"`
}

// GetApiV3AlttitleParams defines parameters for GetApiV3Alttitle.
type GetApiV3AlttitleParams struct {
	MovieId         *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
	MovieMetadataId *int32 `form:"movieMetadataId,omitempty" json:"movieMetadataId,omitempty"`
}

// GetApiV3BlocklistParams defines parameters for GetApiV3Blocklist.
type GetApiV3BlocklistParams struct {
	Page          *int32              `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32              `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string             `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection      `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	MovieIds      *[]int32            `form:"movieIds,omitempty" json:"movieIds,omitempty"`
	Protocols     *[]DownloadProtocol `form:"protocols,omitempty" json:"protocols,omitempty"`
}

// GetApiV3BlocklistMovieParams defines parameters for GetApiV3BlocklistMovie.
type GetApiV3BlocklistMovieParams struct {
	MovieId *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
}

// GetApiV3CalendarParams defines parameters for GetApiV3Calendar.
type GetApiV3CalendarParams struct {
	Start       *time.Time `form:"start,omitempty" json:"start,omitempty"`
	End         *time.Time `form:"end,omitempty" json:"end,omitempty"`
	Unmonitored *bool      `form:"unmonitored,omitempty" json:"unmonitored,omitempty"`
	Tags        *string    `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetApiV3CollectionParams defines parameters for GetApiV3Collection.
type GetApiV3CollectionParams struct {
	TmdbId *int32 `form:"tmdbId,omitempty" json:"tmdbId,omitempty"`
}

// GetApiV3ConfigNamingExamplesParams defines parameters for GetApiV3ConfigNamingExamples.
type GetApiV3ConfigNamingExamplesParams struct {
	RenameMovies             *bool                   `form:"renameMovies,omitempty" json:"renameMovies,omitempty"`
	ReplaceIllegalCharacters *bool                   `form:"replaceIllegalCharacters,omitempty" json:"replaceIllegalCharacters,omitempty"`
	ColonReplacementFormat   *ColonReplacementFormat `form:"colonReplacementFormat,omitempty" json:"colonReplacementFormat,omitempty"`
	StandardMovieFormat      *string                 `form:"standardMovieFormat,omitempty" json:"standardMovieFormat,omitempty"`
	MovieFolderFormat        *string                 `form:"movieFolderFormat,omitempty" json:"movieFolderFormat,omitempty"`
	Id                       *int32                  `form:"id,omitempty" json:"id,omitempty"`
	ResourceName             *string                 `form:"resourceName,omitempty" json:"resourceName,omitempty"`
}

// GetApiV3CreditParams defines parameters for GetApiV3Credit.
type GetApiV3CreditParams struct {
	MovieId         *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
	MovieMetadataId *int32 `form:"movieMetadataId,omitempty" json:"movieMetadataId,omitempty"`
}

// PutApiV3DelayprofileReorderIdParams defines parameters for PutApiV3DelayprofileReorderId.
type PutApiV3DelayprofileReorderIdParams struct {
	After *int32 `form:"after,omitempty" json:"after,omitempty"`
}

// PostApiV3DownloadclientParams defines parameters for PostApiV3Downloadclient.
type PostApiV3DownloadclientParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3DownloadclientTestParams defines parameters for PostApiV3DownloadclientTest.
type PostApiV3DownloadclientTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV3DownloadclientIdParams defines parameters for PutApiV3DownloadclientId.
type PutApiV3DownloadclientIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3ExclusionsBulkApplicationWildcardPlusJSONBody defines parameters for PostApiV3ExclusionsBulk.
type PostApiV3ExclusionsBulkApplicationWildcardPlusJSONBody = []ImportListExclusionResource

// PostApiV3ExclusionsBulkJSONBody defines parameters for PostApiV3ExclusionsBulk.
type PostApiV3ExclusionsBulkJSONBody = []ImportListExclusionResource

// GetApiV3ExclusionsPagedParams defines parameters for GetApiV3ExclusionsPaged.
type GetApiV3ExclusionsPagedParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// GetApiV3ExtrafileParams defines parameters for GetApiV3Extrafile.
type GetApiV3ExtrafileParams struct {
	MovieId *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
}

// GetApiV3FilesystemParams defines parameters for GetApiV3Filesystem.
type GetApiV3FilesystemParams struct {
	Path                               *string `form:"path,omitempty" json:"path,omitempty"`
	IncludeFiles                       *bool   `form:"includeFiles,omitempty" json:"includeFiles,omitempty"`
	AllowFoldersWithoutTrailingSlashes *bool   `form:"allowFoldersWithoutTrailingSlashes,omitempty" json:"allowFoldersWithoutTrailingSlashes,omitempty"`
}

// GetApiV3FilesystemMediafilesParams defines parameters for GetApiV3FilesystemMediafiles.
type GetApiV3FilesystemMediafilesParams struct {
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetApiV3FilesystemTypeParams defines parameters for GetApiV3FilesystemType.
type GetApiV3FilesystemTypeParams struct {
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetApiV3HistoryParams defines parameters for GetApiV3History.
type GetApiV3HistoryParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	IncludeMovie  *bool          `form:"includeMovie,omitempty" json:"includeMovie,omitempty"`
	EventType     *[]int32       `form:"eventType,omitempty" json:"eventType,omitempty"`
	DownloadId    *string        `form:"downloadId,omitempty" json:"downloadId,omitempty"`
	MovieIds      *[]int32       `form:"movieIds,omitempty" json:"movieIds,omitempty"`
	Languages     *[]int32       `form:"languages,omitempty" json:"languages,omitempty"`
	Quality       *[]int32       `form:"quality,omitempty" json:"quality,omitempty"`
}

// GetApiV3HistoryMovieParams defines parameters for GetApiV3HistoryMovie.
type GetApiV3HistoryMovieParams struct {
	MovieId      *int32                 `form:"movieId,omitempty" json:"movieId,omitempty"`
	EventType    *MovieHistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
	IncludeMovie *bool                  `form:"includeMovie,omitempty" json:"includeMovie,omitempty"`
}

// GetApiV3HistorySinceParams defines parameters for GetApiV3HistorySince.
type GetApiV3HistorySinceParams struct {
	Date         *time.Time             `form:"date,omitempty" json:"date,omitempty"`
	EventType    *MovieHistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
	IncludeMovie *bool                  `form:"includeMovie,omitempty" json:"includeMovie,omitempty"`
}

// PostApiV3ImportlistParams defines parameters for PostApiV3Importlist.
type PostApiV3ImportlistParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV3ImportlistMovieParams defines parameters for GetApiV3ImportlistMovie.
type GetApiV3ImportlistMovieParams struct {
	IncludeRecommendations *bool `form:"includeRecommendations,omitempty" json:"includeRecommendations,omitempty"`
	IncludeTrending        *bool `form:"includeTrending,omitempty" json:"includeTrending,omitempty"`
	IncludePopular         *bool `form:"includePopular,omitempty" json:"includePopular,omitempty"`
}

// PostApiV3ImportlistMovieApplicationWildcardPlusJSONBody defines parameters for PostApiV3ImportlistMovie.
type PostApiV3ImportlistMovieApplicationWildcardPlusJSONBody = []MovieResource

// PostApiV3ImportlistMovieJSONBody defines parameters for PostApiV3ImportlistMovie.
type PostApiV3ImportlistMovieJSONBody = []MovieResource

// PostApiV3ImportlistTestParams defines parameters for PostApiV3ImportlistTest.
type PostApiV3ImportlistTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV3ImportlistIdParams defines parameters for PutApiV3ImportlistId.
type PutApiV3ImportlistIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3IndexerParams defines parameters for PostApiV3Indexer.
type PostApiV3IndexerParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3IndexerTestParams defines parameters for PostApiV3IndexerTest.
type PostApiV3IndexerTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV3IndexerIdParams defines parameters for PutApiV3IndexerId.
type PutApiV3IndexerIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV3LogParams defines parameters for GetApiV3Log.
type GetApiV3LogParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Level         *string        `form:"level,omitempty" json:"level,omitempty"`
}

// GetApiV3ManualimportParams defines parameters for GetApiV3Manualimport.
type GetApiV3ManualimportParams struct {
	Folder              *string `form:"folder,omitempty" json:"folder,omitempty"`
	DownloadId          *string `form:"downloadId,omitempty" json:"downloadId,omitempty"`
	MovieId             *int32  `form:"movieId,omitempty" json:"movieId,omitempty"`
	FilterExistingFiles *bool   `form:"filterExistingFiles,omitempty" json:"filterExistingFiles,omitempty"`
}

// PostApiV3ManualimportJSONBody defines parameters for PostApiV3Manualimport.
type PostApiV3ManualimportJSONBody = []ManualImportReprocessResource

// PostApiV3MetadataParams defines parameters for PostApiV3Metadata.
type PostApiV3MetadataParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3MetadataTestParams defines parameters for PostApiV3MetadataTest.
type PostApiV3MetadataTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV3MetadataIdParams defines parameters for PutApiV3MetadataId.
type PutApiV3MetadataIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV3MovieParams defines parameters for GetApiV3Movie.
type GetApiV3MovieParams struct {
	TmdbId             *int32 `form:"tmdbId,omitempty" json:"tmdbId,omitempty"`
	ExcludeLocalCovers *bool  `form:"excludeLocalCovers,omitempty" json:"excludeLocalCovers,omitempty"`
	LanguageId         *int32 `form:"languageId,omitempty" json:"languageId,omitempty"`
}

// PostApiV3MovieImportJSONBody defines parameters for PostApiV3MovieImport.
type PostApiV3MovieImportJSONBody = []MovieResource

// GetApiV3MovieLookupParams defines parameters for GetApiV3MovieLookup.
type GetApiV3MovieLookupParams struct {
	Term *string `form:"term,omitempty" json:"term,omitempty"`
}

// GetApiV3MovieLookupImdbParams defines parameters for GetApiV3MovieLookupImdb.
type GetApiV3MovieLookupImdbParams struct {
	ImdbId *string `form:"imdbId,omitempty" json:"imdbId,omitempty"`
}

// GetApiV3MovieLookupTmdbParams defines parameters for GetApiV3MovieLookupTmdb.
type GetApiV3MovieLookupTmdbParams struct {
	TmdbId *int32 `form:"tmdbId,omitempty" json:"tmdbId,omitempty"`
}

// DeleteApiV3MovieIdParams defines parameters for DeleteApiV3MovieId.
type DeleteApiV3MovieIdParams struct {
	DeleteFiles        *bool `form:"deleteFiles,omitempty" json:"deleteFiles,omitempty"`
	AddImportExclusion *bool `form:"addImportExclusion,omitempty" json:"addImportExclusion,omitempty"`
}

// PutApiV3MovieIdParams defines parameters for PutApiV3MovieId.
type PutApiV3MovieIdParams struct {
	MoveFiles *bool `form:"moveFiles,omitempty" json:"moveFiles,omitempty"`
}

// GetApiV3MoviefileParams defines parameters for GetApiV3Moviefile.
type GetApiV3MoviefileParams struct {
	MovieId      *[]int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
	MovieFileIds *[]int32 `form:"movieFileIds,omitempty" json:"movieFileIds,omitempty"`
}

// PostApiV3NotificationParams defines parameters for PostApiV3Notification.
type PostApiV3NotificationParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV3NotificationTestParams defines parameters for PostApiV3NotificationTest.
type PostApiV3NotificationTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV3NotificationIdParams defines parameters for PutApiV3NotificationId.
type PutApiV3NotificationIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV3ParseParams defines parameters for GetApiV3Parse.
type GetApiV3ParseParams struct {
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONBody defines parameters for PutApiV3QualitydefinitionUpdate.
type PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONBody = []QualityDefinitionResource

// PutApiV3QualitydefinitionUpdateJSONBody defines parameters for PutApiV3QualitydefinitionUpdate.
type PutApiV3QualitydefinitionUpdateJSONBody = []QualityDefinitionResource

// GetApiV3QueueParams defines parameters for GetApiV3Queue.
type GetApiV3QueueParams struct {
	Page                     *int32            `form:"page,omitempty" json:"page,omitempty"`
	PageSize                 *int32            `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey                  *string           `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection            *SortDirection    `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	IncludeUnknownMovieItems *bool             `form:"includeUnknownMovieItems,omitempty" json:"includeUnknownMovieItems,omitempty"`
	IncludeMovie             *bool             `form:"includeMovie,omitempty" json:"includeMovie,omitempty"`
	MovieIds                 *[]int32          `form:"movieIds,omitempty" json:"movieIds,omitempty"`
	Protocol                 *DownloadProtocol `form:"protocol,omitempty" json:"protocol,omitempty"`
	Languages                *[]int32          `form:"languages,omitempty" json:"languages,omitempty"`
	Quality                  *[]int32          `form:"quality,omitempty" json:"quality,omitempty"`
	Status                   *[]QueueStatus    `form:"status,omitempty" json:"status,omitempty"`
}

// DeleteApiV3QueueBulkParams defines parameters for DeleteApiV3QueueBulk.
type DeleteApiV3QueueBulkParams struct {
	RemoveFromClient *bool `form:"removeFromClient,omitempty" json:"removeFromClient,omitempty"`
	Blocklist        *bool `form:"blocklist,omitempty" json:"blocklist,omitempty"`
	SkipRedownload   *bool `form:"skipRedownload,omitempty" json:"skipRedownload,omitempty"`
	ChangeCategory   *bool `form:"changeCategory,omitempty" json:"changeCategory,omitempty"`
}

// GetApiV3QueueDetailsParams defines parameters for GetApiV3QueueDetails.
type GetApiV3QueueDetailsParams struct {
	MovieId      *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
	IncludeMovie *bool  `form:"includeMovie,omitempty" json:"includeMovie,omitempty"`
}

// DeleteApiV3QueueIdParams defines parameters for DeleteApiV3QueueId.
type DeleteApiV3QueueIdParams struct {
	RemoveFromClient *bool `form:"removeFromClient,omitempty" json:"removeFromClient,omitempty"`
	Blocklist        *bool `form:"blocklist,omitempty" json:"blocklist,omitempty"`
	SkipRedownload   *bool `form:"skipRedownload,omitempty" json:"skipRedownload,omitempty"`
	ChangeCategory   *bool `form:"changeCategory,omitempty" json:"changeCategory,omitempty"`
}

// GetApiV3ReleaseParams defines parameters for GetApiV3Release.
type GetApiV3ReleaseParams struct {
	MovieId *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
}

// GetApiV3RenameParams defines parameters for GetApiV3Rename.
type GetApiV3RenameParams struct {
	MovieId *int32 `form:"movieId,omitempty" json:"movieId,omitempty"`
}

// GetApiV3WantedCutoffParams defines parameters for GetApiV3WantedCutoff.
type GetApiV3WantedCutoffParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Monitored     *bool          `form:"monitored,omitempty" json:"monitored,omitempty"`
}

// GetApiV3WantedMissingParams defines parameters for GetApiV3WantedMissing.
type GetApiV3WantedMissingParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Monitored     *bool          `form:"monitored,omitempty" json:"monitored,omitempty"`
}

// GetFeedV3CalendarRadarrIcsParams defines parameters for GetFeedV3CalendarRadarrIcs.
type GetFeedV3CalendarRadarrIcsParams struct {
	PastDays    *int32  `form:"pastDays,omitempty" json:"pastDays,omitempty"`
	FutureDays  *int32  `form:"futureDays,omitempty" json:"futureDays,omitempty"`
	Tags        *string `form:"tags,omitempty" json:"tags,omitempty"`
	Unmonitored *bool   `form:"unmonitored,omitempty" json:"unmonitored,omitempty"`
}

// PostLoginMultipartBody defines parameters for PostLogin.
type PostLoginMultipartBody struct {
	Password   *string `json:"password,omitempty"`
	RememberMe *string `json:"rememberMe,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// PostLoginParams defines parameters for PostLogin.
type PostLoginParams struct {
	ReturnUrl *string `form:"returnUrl,omitempty" json:"returnUrl,omitempty"`
}

// PostApiV3AutotaggingJSONRequestBody defines body for PostApiV3Autotagging for application/json ContentType.
type PostApiV3AutotaggingJSONRequestBody = AutoTaggingResource

// PutApiV3AutotaggingIdJSONRequestBody defines body for PutApiV3AutotaggingId for application/json ContentType.
type PutApiV3AutotaggingIdJSONRequestBody = AutoTaggingResource

// DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody defines body for DeleteApiV3BlocklistBulk for application/*+json ContentType.
type DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody = BlocklistBulkResource

// DeleteApiV3BlocklistBulkJSONRequestBody defines body for DeleteApiV3BlocklistBulk for application/json ContentType.
type DeleteApiV3BlocklistBulkJSONRequestBody = BlocklistBulkResource

// PutApiV3CollectionJSONRequestBody defines body for PutApiV3Collection for application/json ContentType.
type PutApiV3CollectionJSONRequestBody = CollectionUpdateResource

// PutApiV3CollectionIdJSONRequestBody defines body for PutApiV3CollectionId for application/json ContentType.
type PutApiV3CollectionIdJSONRequestBody = CollectionResource

// PostApiV3CommandJSONRequestBody defines body for PostApiV3Command for application/json ContentType.
type PostApiV3CommandJSONRequestBody = CommandResource

// PutApiV3ConfigDownloadclientIdJSONRequestBody defines body for PutApiV3ConfigDownloadclientId for application/json ContentType.
type PutApiV3ConfigDownloadclientIdJSONRequestBody = DownloadClientConfigResource

// PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody defines body for PutApiV3ConfigHostId for application/*+json ContentType.
type PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody = HostConfigResource

// PutApiV3ConfigHostIdJSONRequestBody defines body for PutApiV3ConfigHostId for application/json ContentType.
type PutApiV3ConfigHostIdJSONRequestBody = HostConfigResource

// PutApiV3ConfigImportlistIdJSONRequestBody defines body for PutApiV3ConfigImportlistId for application/json ContentType.
type PutApiV3ConfigImportlistIdJSONRequestBody = ImportListConfigResource

// PutApiV3ConfigIndexerIdJSONRequestBody defines body for PutApiV3ConfigIndexerId for application/json ContentType.
type PutApiV3ConfigIndexerIdJSONRequestBody = IndexerConfigResource

// PutApiV3ConfigMediamanagementIdJSONRequestBody defines body for PutApiV3ConfigMediamanagementId for application/json ContentType.
type PutApiV3ConfigMediamanagementIdJSONRequestBody = MediaManagementConfigResource

// PutApiV3ConfigMetadataIdJSONRequestBody defines body for PutApiV3ConfigMetadataId for application/json ContentType.
type PutApiV3ConfigMetadataIdJSONRequestBody = MetadataConfigResource

// PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody defines body for PutApiV3ConfigNamingId for application/*+json ContentType.
type PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody = NamingConfigResource

// PutApiV3ConfigNamingIdJSONRequestBody defines body for PutApiV3ConfigNamingId for application/json ContentType.
type PutApiV3ConfigNamingIdJSONRequestBody = NamingConfigResource

// PutApiV3ConfigUiIdJSONRequestBody defines body for PutApiV3ConfigUiId for application/json ContentType.
type PutApiV3ConfigUiIdJSONRequestBody = UiConfigResource

// PostApiV3CustomfilterJSONRequestBody defines body for PostApiV3Customfilter for application/json ContentType.
type PostApiV3CustomfilterJSONRequestBody = CustomFilterResource

// PutApiV3CustomfilterIdJSONRequestBody defines body for PutApiV3CustomfilterId for application/json ContentType.
type PutApiV3CustomfilterIdJSONRequestBody = CustomFilterResource

// PostApiV3CustomformatJSONRequestBody defines body for PostApiV3Customformat for application/json ContentType.
type PostApiV3CustomformatJSONRequestBody = CustomFormatResource

// DeleteApiV3CustomformatBulkJSONRequestBody defines body for DeleteApiV3CustomformatBulk for application/json ContentType.
type DeleteApiV3CustomformatBulkJSONRequestBody = CustomFormatBulkResource

// PutApiV3CustomformatBulkJSONRequestBody defines body for PutApiV3CustomformatBulk for application/json ContentType.
type PutApiV3CustomformatBulkJSONRequestBody = CustomFormatBulkResource

// PutApiV3CustomformatIdJSONRequestBody defines body for PutApiV3CustomformatId for application/json ContentType.
type PutApiV3CustomformatIdJSONRequestBody = CustomFormatResource

// PostApiV3DelayprofileJSONRequestBody defines body for PostApiV3Delayprofile for application/json ContentType.
type PostApiV3DelayprofileJSONRequestBody = DelayProfileResource

// PutApiV3DelayprofileIdJSONRequestBody defines body for PutApiV3DelayprofileId for application/json ContentType.
type PutApiV3DelayprofileIdJSONRequestBody = DelayProfileResource

// PostApiV3DownloadclientJSONRequestBody defines body for PostApiV3Downloadclient for application/json ContentType.
type PostApiV3DownloadclientJSONRequestBody = DownloadClientResource

// PostApiV3DownloadclientActionNameJSONRequestBody defines body for PostApiV3DownloadclientActionName for application/json ContentType.
type PostApiV3DownloadclientActionNameJSONRequestBody = DownloadClientResource

// DeleteApiV3DownloadclientBulkJSONRequestBody defines body for DeleteApiV3DownloadclientBulk for application/json ContentType.
type DeleteApiV3DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PutApiV3DownloadclientBulkJSONRequestBody defines body for PutApiV3DownloadclientBulk for application/json ContentType.
type PutApiV3DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PostApiV3DownloadclientTestJSONRequestBody defines body for PostApiV3DownloadclientTest for application/json ContentType.
type PostApiV3DownloadclientTestJSONRequestBody = DownloadClientResource

// PutApiV3DownloadclientIdJSONRequestBody defines body for PutApiV3DownloadclientId for application/json ContentType.
type PutApiV3DownloadclientIdJSONRequestBody = DownloadClientResource

// PostApiV3ExclusionsJSONRequestBody defines body for PostApiV3Exclusions for application/json ContentType.
type PostApiV3ExclusionsJSONRequestBody = ImportListExclusionResource

// DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody defines body for DeleteApiV3ExclusionsBulk for application/*+json ContentType.
type DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody = ImportListExclusionBulkResource

// DeleteApiV3ExclusionsBulkJSONRequestBody defines body for DeleteApiV3ExclusionsBulk for application/json ContentType.
type DeleteApiV3ExclusionsBulkJSONRequestBody = ImportListExclusionBulkResource

// PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody defines body for PostApiV3ExclusionsBulk for application/*+json ContentType.
type PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody = PostApiV3ExclusionsBulkApplicationWildcardPlusJSONBody

// PostApiV3ExclusionsBulkJSONRequestBody defines body for PostApiV3ExclusionsBulk for application/json ContentType.
type PostApiV3ExclusionsBulkJSONRequestBody = PostApiV3ExclusionsBulkJSONBody

// PutApiV3ExclusionsIdJSONRequestBody defines body for PutApiV3ExclusionsId for application/json ContentType.
type PutApiV3ExclusionsIdJSONRequestBody = ImportListExclusionResource

// PostApiV3ImportlistJSONRequestBody defines body for PostApiV3Importlist for application/json ContentType.
type PostApiV3ImportlistJSONRequestBody = ImportListResource

// PostApiV3ImportlistActionNameJSONRequestBody defines body for PostApiV3ImportlistActionName for application/json ContentType.
type PostApiV3ImportlistActionNameJSONRequestBody = ImportListResource

// DeleteApiV3ImportlistBulkJSONRequestBody defines body for DeleteApiV3ImportlistBulk for application/json ContentType.
type DeleteApiV3ImportlistBulkJSONRequestBody = ImportListBulkResource

// PutApiV3ImportlistBulkJSONRequestBody defines body for PutApiV3ImportlistBulk for application/json ContentType.
type PutApiV3ImportlistBulkJSONRequestBody = ImportListBulkResource

// PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody defines body for PostApiV3ImportlistMovie for application/*+json ContentType.
type PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody = PostApiV3ImportlistMovieApplicationWildcardPlusJSONBody

// PostApiV3ImportlistMovieJSONRequestBody defines body for PostApiV3ImportlistMovie for application/json ContentType.
type PostApiV3ImportlistMovieJSONRequestBody = PostApiV3ImportlistMovieJSONBody

// PostApiV3ImportlistTestJSONRequestBody defines body for PostApiV3ImportlistTest for application/json ContentType.
type PostApiV3ImportlistTestJSONRequestBody = ImportListResource

// PutApiV3ImportlistIdJSONRequestBody defines body for PutApiV3ImportlistId for application/json ContentType.
type PutApiV3ImportlistIdJSONRequestBody = ImportListResource

// PostApiV3IndexerJSONRequestBody defines body for PostApiV3Indexer for application/json ContentType.
type PostApiV3IndexerJSONRequestBody = IndexerResource

// PostApiV3IndexerActionNameJSONRequestBody defines body for PostApiV3IndexerActionName for application/json ContentType.
type PostApiV3IndexerActionNameJSONRequestBody = IndexerResource

// DeleteApiV3IndexerBulkJSONRequestBody defines body for DeleteApiV3IndexerBulk for application/json ContentType.
type DeleteApiV3IndexerBulkJSONRequestBody = IndexerBulkResource

// PutApiV3IndexerBulkJSONRequestBody defines body for PutApiV3IndexerBulk for application/json ContentType.
type PutApiV3IndexerBulkJSONRequestBody = IndexerBulkResource

// PostApiV3IndexerTestJSONRequestBody defines body for PostApiV3IndexerTest for application/json ContentType.
type PostApiV3IndexerTestJSONRequestBody = IndexerResource

// PutApiV3IndexerIdJSONRequestBody defines body for PutApiV3IndexerId for application/json ContentType.
type PutApiV3IndexerIdJSONRequestBody = IndexerResource

// PostApiV3ManualimportJSONRequestBody defines body for PostApiV3Manualimport for application/json ContentType.
type PostApiV3ManualimportJSONRequestBody = PostApiV3ManualimportJSONBody

// PostApiV3MetadataJSONRequestBody defines body for PostApiV3Metadata for application/json ContentType.
type PostApiV3MetadataJSONRequestBody = MetadataResource

// PostApiV3MetadataActionNameJSONRequestBody defines body for PostApiV3MetadataActionName for application/json ContentType.
type PostApiV3MetadataActionNameJSONRequestBody = MetadataResource

// PostApiV3MetadataTestJSONRequestBody defines body for PostApiV3MetadataTest for application/json ContentType.
type PostApiV3MetadataTestJSONRequestBody = MetadataResource

// PutApiV3MetadataIdJSONRequestBody defines body for PutApiV3MetadataId for application/json ContentType.
type PutApiV3MetadataIdJSONRequestBody = MetadataResource

// PostApiV3MovieJSONRequestBody defines body for PostApiV3Movie for application/json ContentType.
type PostApiV3MovieJSONRequestBody = MovieResource

// DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody defines body for DeleteApiV3MovieEditor for application/*+json ContentType.
type DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody = MovieEditorResource

// DeleteApiV3MovieEditorJSONRequestBody defines body for DeleteApiV3MovieEditor for application/json ContentType.
type DeleteApiV3MovieEditorJSONRequestBody = MovieEditorResource

// PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody defines body for PutApiV3MovieEditor for application/*+json ContentType.
type PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody = MovieEditorResource

// PutApiV3MovieEditorJSONRequestBody defines body for PutApiV3MovieEditor for application/json ContentType.
type PutApiV3MovieEditorJSONRequestBody = MovieEditorResource

// PostApiV3MovieImportJSONRequestBody defines body for PostApiV3MovieImport for application/json ContentType.
type PostApiV3MovieImportJSONRequestBody = PostApiV3MovieImportJSONBody

// PutApiV3MovieIdJSONRequestBody defines body for PutApiV3MovieId for application/json ContentType.
type PutApiV3MovieIdJSONRequestBody = MovieResource

// DeleteApiV3MoviefileBulkJSONRequestBody defines body for DeleteApiV3MoviefileBulk for application/json ContentType.
type DeleteApiV3MoviefileBulkJSONRequestBody = MovieFileListResource

// PutApiV3MoviefileEditorJSONRequestBody defines body for PutApiV3MoviefileEditor for application/json ContentType.
type PutApiV3MoviefileEditorJSONRequestBody = MovieFileListResource

// PutApiV3MoviefileIdJSONRequestBody defines body for PutApiV3MoviefileId for application/json ContentType.
type PutApiV3MoviefileIdJSONRequestBody = MovieFileResource

// PostApiV3NotificationJSONRequestBody defines body for PostApiV3Notification for application/json ContentType.
type PostApiV3NotificationJSONRequestBody = NotificationResource

// PostApiV3NotificationActionNameJSONRequestBody defines body for PostApiV3NotificationActionName for application/json ContentType.
type PostApiV3NotificationActionNameJSONRequestBody = NotificationResource

// PostApiV3NotificationTestJSONRequestBody defines body for PostApiV3NotificationTest for application/json ContentType.
type PostApiV3NotificationTestJSONRequestBody = NotificationResource

// PutApiV3NotificationIdJSONRequestBody defines body for PutApiV3NotificationId for application/json ContentType.
type PutApiV3NotificationIdJSONRequestBody = NotificationResource

// PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody defines body for PutApiV3QualitydefinitionUpdate for application/*+json ContentType.
type PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody = PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONBody

// PutApiV3QualitydefinitionUpdateJSONRequestBody defines body for PutApiV3QualitydefinitionUpdate for application/json ContentType.
type PutApiV3QualitydefinitionUpdateJSONRequestBody = PutApiV3QualitydefinitionUpdateJSONBody

// PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody defines body for PutApiV3QualitydefinitionId for application/*+json ContentType.
type PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody = QualityDefinitionResource

// PutApiV3QualitydefinitionIdJSONRequestBody defines body for PutApiV3QualitydefinitionId for application/json ContentType.
type PutApiV3QualitydefinitionIdJSONRequestBody = QualityDefinitionResource

// PostApiV3QualityprofileJSONRequestBody defines body for PostApiV3Qualityprofile for application/json ContentType.
type PostApiV3QualityprofileJSONRequestBody = QualityProfileResource

// PutApiV3QualityprofileIdJSONRequestBody defines body for PutApiV3QualityprofileId for application/json ContentType.
type PutApiV3QualityprofileIdJSONRequestBody = QualityProfileResource

// DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody defines body for DeleteApiV3QueueBulk for application/*+json ContentType.
type DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody = QueueBulkResource

// DeleteApiV3QueueBulkJSONRequestBody defines body for DeleteApiV3QueueBulk for application/json ContentType.
type DeleteApiV3QueueBulkJSONRequestBody = QueueBulkResource

// PostApiV3QueueGrabBulkJSONRequestBody defines body for PostApiV3QueueGrabBulk for application/json ContentType.
type PostApiV3QueueGrabBulkJSONRequestBody = QueueBulkResource

// PostApiV3ReleaseJSONRequestBody defines body for PostApiV3Release for application/json ContentType.
type PostApiV3ReleaseJSONRequestBody = ReleaseResource

// PostApiV3ReleasePushJSONRequestBody defines body for PostApiV3ReleasePush for application/json ContentType.
type PostApiV3ReleasePushJSONRequestBody = ReleaseResource

// PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody defines body for PostApiV3Releaseprofile for application/*+json ContentType.
type PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody = ReleaseProfileResource

// PostApiV3ReleaseprofileJSONRequestBody defines body for PostApiV3Releaseprofile for application/json ContentType.
type PostApiV3ReleaseprofileJSONRequestBody = ReleaseProfileResource

// PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody defines body for PutApiV3ReleaseprofileId for application/*+json ContentType.
type PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody = ReleaseProfileResource

// PutApiV3ReleaseprofileIdJSONRequestBody defines body for PutApiV3ReleaseprofileId for application/json ContentType.
type PutApiV3ReleaseprofileIdJSONRequestBody = ReleaseProfileResource

// PostApiV3RemotepathmappingJSONRequestBody defines body for PostApiV3Remotepathmapping for application/json ContentType.
type PostApiV3RemotepathmappingJSONRequestBody = RemotePathMappingResource

// PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody defines body for PutApiV3RemotepathmappingId for application/*+json ContentType.
type PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody = RemotePathMappingResource

// PutApiV3RemotepathmappingIdJSONRequestBody defines body for PutApiV3RemotepathmappingId for application/json ContentType.
type PutApiV3RemotepathmappingIdJSONRequestBody = RemotePathMappingResource

// PostApiV3RootfolderJSONRequestBody defines body for PostApiV3Rootfolder for application/json ContentType.
type PostApiV3RootfolderJSONRequestBody = RootFolderResource

// PostApiV3TagJSONRequestBody defines body for PostApiV3Tag for application/json ContentType.
type PostApiV3TagJSONRequestBody = TagResource

// PutApiV3TagIdJSONRequestBody defines body for PutApiV3TagId for application/json ContentType.
type PutApiV3TagIdJSONRequestBody = TagResource

// PostLoginMultipartRequestBody defines body for PostLogin for multipart/form-data ContentType.
type PostLoginMultipartRequestBody PostLoginMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApi request
	GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Alttitle request
	GetApiV3Alttitle(ctx context.Context, params *GetApiV3AlttitleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3AlttitleId request
	GetApiV3AlttitleId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Autotagging request
	GetApiV3Autotagging(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3AutotaggingWithBody request with any body
	PostApiV3AutotaggingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Autotagging(ctx context.Context, body PostApiV3AutotaggingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3AutotaggingSchema request
	GetApiV3AutotaggingSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3AutotaggingId request
	DeleteApiV3AutotaggingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3AutotaggingId request
	GetApiV3AutotaggingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3AutotaggingIdWithBody request with any body
	PutApiV3AutotaggingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3AutotaggingId(ctx context.Context, id string, body PutApiV3AutotaggingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Blocklist request
	GetApiV3Blocklist(ctx context.Context, params *GetApiV3BlocklistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3BlocklistBulkWithBody request with any body
	DeleteApiV3BlocklistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3BlocklistBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3BlocklistBulk(ctx context.Context, body DeleteApiV3BlocklistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3BlocklistMovie request
	GetApiV3BlocklistMovie(ctx context.Context, params *GetApiV3BlocklistMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3BlocklistId request
	DeleteApiV3BlocklistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Calendar request
	GetApiV3Calendar(ctx context.Context, params *GetApiV3CalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Collection request
	GetApiV3Collection(ctx context.Context, params *GetApiV3CollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3CollectionWithBody request with any body
	PutApiV3CollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3Collection(ctx context.Context, body PutApiV3CollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CollectionId request
	GetApiV3CollectionId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3CollectionIdWithBody request with any body
	PutApiV3CollectionIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3CollectionId(ctx context.Context, id string, body PutApiV3CollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Command request
	GetApiV3Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3CommandWithBody request with any body
	PostApiV3CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Command(ctx context.Context, body PostApiV3CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3CommandId request
	DeleteApiV3CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CommandId request
	GetApiV3CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigDownloadclient request
	GetApiV3ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigDownloadclientId request
	GetApiV3ConfigDownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigDownloadclientIdWithBody request with any body
	PutApiV3ConfigDownloadclientIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigDownloadclientId(ctx context.Context, id string, body PutApiV3ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigHost request
	GetApiV3ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigHostId request
	GetApiV3ConfigHostId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigHostIdWithBody request with any body
	PutApiV3ConfigHostIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigHostIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigHostId(ctx context.Context, id string, body PutApiV3ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigImportlist request
	GetApiV3ConfigImportlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigImportlistId request
	GetApiV3ConfigImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigImportlistIdWithBody request with any body
	PutApiV3ConfigImportlistIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigImportlistId(ctx context.Context, id string, body PutApiV3ConfigImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigIndexer request
	GetApiV3ConfigIndexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigIndexerId request
	GetApiV3ConfigIndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigIndexerIdWithBody request with any body
	PutApiV3ConfigIndexerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigIndexerId(ctx context.Context, id string, body PutApiV3ConfigIndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigMediamanagement request
	GetApiV3ConfigMediamanagement(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigMediamanagementId request
	GetApiV3ConfigMediamanagementId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigMediamanagementIdWithBody request with any body
	PutApiV3ConfigMediamanagementIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigMediamanagementId(ctx context.Context, id string, body PutApiV3ConfigMediamanagementIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigMetadata request
	GetApiV3ConfigMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigMetadataId request
	GetApiV3ConfigMetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigMetadataIdWithBody request with any body
	PutApiV3ConfigMetadataIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigMetadataId(ctx context.Context, id string, body PutApiV3ConfigMetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigNaming request
	GetApiV3ConfigNaming(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigNamingExamples request
	GetApiV3ConfigNamingExamples(ctx context.Context, params *GetApiV3ConfigNamingExamplesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigNamingId request
	GetApiV3ConfigNamingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigNamingIdWithBody request with any body
	PutApiV3ConfigNamingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigNamingIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigNamingId(ctx context.Context, id string, body PutApiV3ConfigNamingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigUi request
	GetApiV3ConfigUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ConfigUiId request
	GetApiV3ConfigUiId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ConfigUiIdWithBody request with any body
	PutApiV3ConfigUiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ConfigUiId(ctx context.Context, id string, body PutApiV3ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Credit request
	GetApiV3Credit(ctx context.Context, params *GetApiV3CreditParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CreditId request
	GetApiV3CreditId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Customfilter request
	GetApiV3Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3CustomfilterWithBody request with any body
	PostApiV3CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Customfilter(ctx context.Context, body PostApiV3CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3CustomfilterId request
	DeleteApiV3CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CustomfilterId request
	GetApiV3CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3CustomfilterIdWithBody request with any body
	PutApiV3CustomfilterIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3CustomfilterId(ctx context.Context, id string, body PutApiV3CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Customformat request
	GetApiV3Customformat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3CustomformatWithBody request with any body
	PostApiV3CustomformatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Customformat(ctx context.Context, body PostApiV3CustomformatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3CustomformatBulkWithBody request with any body
	DeleteApiV3CustomformatBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3CustomformatBulk(ctx context.Context, body DeleteApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3CustomformatBulkWithBody request with any body
	PutApiV3CustomformatBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3CustomformatBulk(ctx context.Context, body PutApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CustomformatSchema request
	GetApiV3CustomformatSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3CustomformatId request
	DeleteApiV3CustomformatId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3CustomformatId request
	GetApiV3CustomformatId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3CustomformatIdWithBody request with any body
	PutApiV3CustomformatIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3CustomformatId(ctx context.Context, id string, body PutApiV3CustomformatIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Delayprofile request
	GetApiV3Delayprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3DelayprofileWithBody request with any body
	PostApiV3DelayprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Delayprofile(ctx context.Context, body PostApiV3DelayprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3DelayprofileReorderId request
	PutApiV3DelayprofileReorderId(ctx context.Context, id int32, params *PutApiV3DelayprofileReorderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3DelayprofileId request
	DeleteApiV3DelayprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3DelayprofileId request
	GetApiV3DelayprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3DelayprofileIdWithBody request with any body
	PutApiV3DelayprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3DelayprofileId(ctx context.Context, id string, body PutApiV3DelayprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Diskspace request
	GetApiV3Diskspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Downloadclient request
	GetApiV3Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3DownloadclientWithBody request with any body
	PostApiV3DownloadclientWithBody(ctx context.Context, params *PostApiV3DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Downloadclient(ctx context.Context, params *PostApiV3DownloadclientParams, body PostApiV3DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3DownloadclientActionNameWithBody request with any body
	PostApiV3DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3DownloadclientActionName(ctx context.Context, name string, body PostApiV3DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3DownloadclientBulkWithBody request with any body
	DeleteApiV3DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3DownloadclientBulk(ctx context.Context, body DeleteApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3DownloadclientBulkWithBody request with any body
	PutApiV3DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3DownloadclientBulk(ctx context.Context, body PutApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3DownloadclientSchema request
	GetApiV3DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3DownloadclientTestWithBody request with any body
	PostApiV3DownloadclientTestWithBody(ctx context.Context, params *PostApiV3DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3DownloadclientTest(ctx context.Context, params *PostApiV3DownloadclientTestParams, body PostApiV3DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3DownloadclientTestall request
	PostApiV3DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3DownloadclientId request
	DeleteApiV3DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3DownloadclientId request
	GetApiV3DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3DownloadclientIdWithBody request with any body
	PutApiV3DownloadclientIdWithBody(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3DownloadclientId(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, body PutApiV3DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Exclusions request
	GetApiV3Exclusions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ExclusionsWithBody request with any body
	PostApiV3ExclusionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Exclusions(ctx context.Context, body PostApiV3ExclusionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3ExclusionsBulkWithBody request with any body
	DeleteApiV3ExclusionsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3ExclusionsBulk(ctx context.Context, body DeleteApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ExclusionsBulkWithBody request with any body
	PostApiV3ExclusionsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ExclusionsBulk(ctx context.Context, body PostApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ExclusionsPaged request
	GetApiV3ExclusionsPaged(ctx context.Context, params *GetApiV3ExclusionsPagedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3ExclusionsId request
	DeleteApiV3ExclusionsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ExclusionsId request
	GetApiV3ExclusionsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ExclusionsIdWithBody request with any body
	PutApiV3ExclusionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ExclusionsId(ctx context.Context, id string, body PutApiV3ExclusionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Extrafile request
	GetApiV3Extrafile(ctx context.Context, params *GetApiV3ExtrafileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Filesystem request
	GetApiV3Filesystem(ctx context.Context, params *GetApiV3FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3FilesystemMediafiles request
	GetApiV3FilesystemMediafiles(ctx context.Context, params *GetApiV3FilesystemMediafilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3FilesystemType request
	GetApiV3FilesystemType(ctx context.Context, params *GetApiV3FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Health request
	GetApiV3Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3History request
	GetApiV3History(ctx context.Context, params *GetApiV3HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3HistoryFailedId request
	PostApiV3HistoryFailedId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3HistoryMovie request
	GetApiV3HistoryMovie(ctx context.Context, params *GetApiV3HistoryMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3HistorySince request
	GetApiV3HistorySince(ctx context.Context, params *GetApiV3HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Importlist request
	GetApiV3Importlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ImportlistWithBody request with any body
	PostApiV3ImportlistWithBody(ctx context.Context, params *PostApiV3ImportlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Importlist(ctx context.Context, params *PostApiV3ImportlistParams, body PostApiV3ImportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ImportlistActionNameWithBody request with any body
	PostApiV3ImportlistActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ImportlistActionName(ctx context.Context, name string, body PostApiV3ImportlistActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3ImportlistBulkWithBody request with any body
	DeleteApiV3ImportlistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3ImportlistBulk(ctx context.Context, body DeleteApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ImportlistBulkWithBody request with any body
	PutApiV3ImportlistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ImportlistBulk(ctx context.Context, body PutApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ImportlistMovie request
	GetApiV3ImportlistMovie(ctx context.Context, params *GetApiV3ImportlistMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ImportlistMovieWithBody request with any body
	PostApiV3ImportlistMovieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ImportlistMovieWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ImportlistMovie(ctx context.Context, body PostApiV3ImportlistMovieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ImportlistSchema request
	GetApiV3ImportlistSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ImportlistTestWithBody request with any body
	PostApiV3ImportlistTestWithBody(ctx context.Context, params *PostApiV3ImportlistTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ImportlistTest(ctx context.Context, params *PostApiV3ImportlistTestParams, body PostApiV3ImportlistTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ImportlistTestall request
	PostApiV3ImportlistTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3ImportlistId request
	DeleteApiV3ImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ImportlistId request
	GetApiV3ImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ImportlistIdWithBody request with any body
	PutApiV3ImportlistIdWithBody(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ImportlistId(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, body PutApiV3ImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Indexer request
	GetApiV3Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3IndexerWithBody request with any body
	PostApiV3IndexerWithBody(ctx context.Context, params *PostApiV3IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Indexer(ctx context.Context, params *PostApiV3IndexerParams, body PostApiV3IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3IndexerActionNameWithBody request with any body
	PostApiV3IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3IndexerActionName(ctx context.Context, name string, body PostApiV3IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3IndexerBulkWithBody request with any body
	DeleteApiV3IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3IndexerBulk(ctx context.Context, body DeleteApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3IndexerBulkWithBody request with any body
	PutApiV3IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3IndexerBulk(ctx context.Context, body PutApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3IndexerSchema request
	GetApiV3IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3IndexerTestWithBody request with any body
	PostApiV3IndexerTestWithBody(ctx context.Context, params *PostApiV3IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3IndexerTest(ctx context.Context, params *PostApiV3IndexerTestParams, body PostApiV3IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3IndexerTestall request
	PostApiV3IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3IndexerId request
	DeleteApiV3IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3IndexerId request
	GetApiV3IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3IndexerIdWithBody request with any body
	PutApiV3IndexerIdWithBody(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3IndexerId(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, body PutApiV3IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Indexerflag request
	GetApiV3Indexerflag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Language request
	GetApiV3Language(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LanguageId request
	GetApiV3LanguageId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Localization request
	GetApiV3Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LocalizationLanguage request
	GetApiV3LocalizationLanguage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Log request
	GetApiV3Log(ctx context.Context, params *GetApiV3LogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LogFile request
	GetApiV3LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LogFileUpdate request
	GetApiV3LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LogFileUpdateFilename request
	GetApiV3LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3LogFileFilename request
	GetApiV3LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Manualimport request
	GetApiV3Manualimport(ctx context.Context, params *GetApiV3ManualimportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ManualimportWithBody request with any body
	PostApiV3ManualimportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Manualimport(ctx context.Context, body PostApiV3ManualimportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MediacoverMovieIdFilename request
	GetApiV3MediacoverMovieIdFilename(ctx context.Context, movieId int32, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Metadata request
	GetApiV3Metadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MetadataWithBody request with any body
	PostApiV3MetadataWithBody(ctx context.Context, params *PostApiV3MetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Metadata(ctx context.Context, params *PostApiV3MetadataParams, body PostApiV3MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MetadataActionNameWithBody request with any body
	PostApiV3MetadataActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3MetadataActionName(ctx context.Context, name string, body PostApiV3MetadataActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MetadataSchema request
	GetApiV3MetadataSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MetadataTestWithBody request with any body
	PostApiV3MetadataTestWithBody(ctx context.Context, params *PostApiV3MetadataTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3MetadataTest(ctx context.Context, params *PostApiV3MetadataTestParams, body PostApiV3MetadataTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MetadataTestall request
	PostApiV3MetadataTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3MetadataId request
	DeleteApiV3MetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MetadataId request
	GetApiV3MetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3MetadataIdWithBody request with any body
	PutApiV3MetadataIdWithBody(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MetadataId(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, body PutApiV3MetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Movie request
	GetApiV3Movie(ctx context.Context, params *GetApiV3MovieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MovieWithBody request with any body
	PostApiV3MovieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Movie(ctx context.Context, body PostApiV3MovieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3MovieEditorWithBody request with any body
	DeleteApiV3MovieEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3MovieEditor(ctx context.Context, body DeleteApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3MovieEditorWithBody request with any body
	PutApiV3MovieEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MovieEditor(ctx context.Context, body PutApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3MovieImportWithBody request with any body
	PostApiV3MovieImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3MovieImport(ctx context.Context, body PostApiV3MovieImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MovieLookup request
	GetApiV3MovieLookup(ctx context.Context, params *GetApiV3MovieLookupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MovieLookupImdb request
	GetApiV3MovieLookupImdb(ctx context.Context, params *GetApiV3MovieLookupImdbParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MovieLookupTmdb request
	GetApiV3MovieLookupTmdb(ctx context.Context, params *GetApiV3MovieLookupTmdbParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3MovieId request
	DeleteApiV3MovieId(ctx context.Context, id int32, params *DeleteApiV3MovieIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MovieId request
	GetApiV3MovieId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3MovieIdWithBody request with any body
	PutApiV3MovieIdWithBody(ctx context.Context, id string, params *PutApiV3MovieIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MovieId(ctx context.Context, id string, params *PutApiV3MovieIdParams, body PutApiV3MovieIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Moviefile request
	GetApiV3Moviefile(ctx context.Context, params *GetApiV3MoviefileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3MoviefileBulkWithBody request with any body
	DeleteApiV3MoviefileBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3MoviefileBulk(ctx context.Context, body DeleteApiV3MoviefileBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3MoviefileEditorWithBody request with any body
	PutApiV3MoviefileEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MoviefileEditor(ctx context.Context, body PutApiV3MoviefileEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3MoviefileId request
	DeleteApiV3MoviefileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3MoviefileId request
	GetApiV3MoviefileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3MoviefileIdWithBody request with any body
	PutApiV3MoviefileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3MoviefileId(ctx context.Context, id string, body PutApiV3MoviefileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Notification request
	GetApiV3Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3NotificationWithBody request with any body
	PostApiV3NotificationWithBody(ctx context.Context, params *PostApiV3NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Notification(ctx context.Context, params *PostApiV3NotificationParams, body PostApiV3NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3NotificationActionNameWithBody request with any body
	PostApiV3NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3NotificationActionName(ctx context.Context, name string, body PostApiV3NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3NotificationSchema request
	GetApiV3NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3NotificationTestWithBody request with any body
	PostApiV3NotificationTestWithBody(ctx context.Context, params *PostApiV3NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3NotificationTest(ctx context.Context, params *PostApiV3NotificationTestParams, body PostApiV3NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3NotificationTestall request
	PostApiV3NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3NotificationId request
	DeleteApiV3NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3NotificationId request
	GetApiV3NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3NotificationIdWithBody request with any body
	PutApiV3NotificationIdWithBody(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3NotificationId(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, body PutApiV3NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Parse request
	GetApiV3Parse(ctx context.Context, params *GetApiV3ParseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Qualitydefinition request
	GetApiV3Qualitydefinition(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3QualitydefinitionUpdateWithBody request with any body
	PutApiV3QualitydefinitionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3QualitydefinitionUpdateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3QualitydefinitionUpdate(ctx context.Context, body PutApiV3QualitydefinitionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3QualitydefinitionId request
	GetApiV3QualitydefinitionId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3QualitydefinitionIdWithBody request with any body
	PutApiV3QualitydefinitionIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3QualitydefinitionIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3QualitydefinitionId(ctx context.Context, id string, body PutApiV3QualitydefinitionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Qualityprofile request
	GetApiV3Qualityprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3QualityprofileWithBody request with any body
	PostApiV3QualityprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Qualityprofile(ctx context.Context, body PostApiV3QualityprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3QualityprofileSchema request
	GetApiV3QualityprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3QualityprofileId request
	DeleteApiV3QualityprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3QualityprofileId request
	GetApiV3QualityprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3QualityprofileIdWithBody request with any body
	PutApiV3QualityprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3QualityprofileId(ctx context.Context, id string, body PutApiV3QualityprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Queue request
	GetApiV3Queue(ctx context.Context, params *GetApiV3QueueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3QueueBulkWithBody request with any body
	DeleteApiV3QueueBulkWithBody(ctx context.Context, params *DeleteApiV3QueueBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3QueueBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV3QueueBulk(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3QueueDetails request
	GetApiV3QueueDetails(ctx context.Context, params *GetApiV3QueueDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3QueueGrabBulkWithBody request with any body
	PostApiV3QueueGrabBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3QueueGrabBulk(ctx context.Context, body PostApiV3QueueGrabBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3QueueGrabId request
	PostApiV3QueueGrabId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3QueueStatus request
	GetApiV3QueueStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3QueueId request
	DeleteApiV3QueueId(ctx context.Context, id int32, params *DeleteApiV3QueueIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Release request
	GetApiV3Release(ctx context.Context, params *GetApiV3ReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ReleaseWithBody request with any body
	PostApiV3ReleaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Release(ctx context.Context, body PostApiV3ReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ReleasePushWithBody request with any body
	PostApiV3ReleasePushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ReleasePush(ctx context.Context, body PostApiV3ReleasePushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Releaseprofile request
	GetApiV3Releaseprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3ReleaseprofileWithBody request with any body
	PostApiV3ReleaseprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3ReleaseprofileWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Releaseprofile(ctx context.Context, body PostApiV3ReleaseprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3ReleaseprofileId request
	DeleteApiV3ReleaseprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3ReleaseprofileId request
	GetApiV3ReleaseprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3ReleaseprofileIdWithBody request with any body
	PutApiV3ReleaseprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ReleaseprofileIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3ReleaseprofileId(ctx context.Context, id string, body PutApiV3ReleaseprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Remotepathmapping request
	GetApiV3Remotepathmapping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3RemotepathmappingWithBody request with any body
	PostApiV3RemotepathmappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Remotepathmapping(ctx context.Context, body PostApiV3RemotepathmappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3RemotepathmappingId request
	DeleteApiV3RemotepathmappingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3RemotepathmappingId request
	GetApiV3RemotepathmappingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3RemotepathmappingIdWithBody request with any body
	PutApiV3RemotepathmappingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3RemotepathmappingIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3RemotepathmappingId(ctx context.Context, id string, body PutApiV3RemotepathmappingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Rename request
	GetApiV3Rename(ctx context.Context, params *GetApiV3RenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Rootfolder request
	GetApiV3Rootfolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3RootfolderWithBody request with any body
	PostApiV3RootfolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Rootfolder(ctx context.Context, body PostApiV3RootfolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3RootfolderId request
	DeleteApiV3RootfolderId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3RootfolderId request
	GetApiV3RootfolderId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemBackup request
	GetApiV3SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3SystemBackupRestoreUpload request
	PostApiV3SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3SystemBackupRestoreId request
	PostApiV3SystemBackupRestoreId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3SystemBackupId request
	DeleteApiV3SystemBackupId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3SystemRestart request
	PostApiV3SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemRoutes request
	GetApiV3SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemRoutesDuplicate request
	GetApiV3SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3SystemShutdown request
	PostApiV3SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemStatus request
	GetApiV3SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemTask request
	GetApiV3SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3SystemTaskId request
	GetApiV3SystemTaskId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Tag request
	GetApiV3Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV3TagWithBody request with any body
	PostApiV3TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV3Tag(ctx context.Context, body PostApiV3TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3TagDetail request
	GetApiV3TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3TagDetailId request
	GetApiV3TagDetailId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV3TagId request
	DeleteApiV3TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3TagId request
	GetApiV3TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV3TagIdWithBody request with any body
	PutApiV3TagIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV3TagId(ctx context.Context, id string, body PutApiV3TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3Update request
	GetApiV3Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3WantedCutoff request
	GetApiV3WantedCutoff(ctx context.Context, params *GetApiV3WantedCutoffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV3WantedMissing request
	GetApiV3WantedMissing(ctx context.Context, params *GetApiV3WantedMissingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentPath request
	GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedV3CalendarRadarrIcs request
	GetFeedV3CalendarRadarrIcs(ctx context.Context, params *GetFeedV3CalendarRadarrIcsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogin request
	GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogout request
	GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadPing request
	HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPath request
	GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Alttitle(ctx context.Context, params *GetApiV3AlttitleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3AlttitleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3AlttitleId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3AlttitleIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Autotagging(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3AutotaggingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3AutotaggingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3AutotaggingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Autotagging(ctx context.Context, body PostApiV3AutotaggingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3AutotaggingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3AutotaggingSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3AutotaggingSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3AutotaggingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3AutotaggingIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3AutotaggingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3AutotaggingIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3AutotaggingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3AutotaggingIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3AutotaggingId(ctx context.Context, id string, body PutApiV3AutotaggingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3AutotaggingIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Blocklist(ctx context.Context, params *GetApiV3BlocklistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3BlocklistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3BlocklistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3BlocklistBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3BlocklistBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3BlocklistBulkRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3BlocklistBulk(ctx context.Context, body DeleteApiV3BlocklistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3BlocklistBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3BlocklistMovie(ctx context.Context, params *GetApiV3BlocklistMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3BlocklistMovieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3BlocklistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3BlocklistIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Calendar(ctx context.Context, params *GetApiV3CalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Collection(ctx context.Context, params *GetApiV3CollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3Collection(ctx context.Context, body PutApiV3CollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CollectionId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CollectionIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CollectionIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CollectionIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CollectionId(ctx context.Context, id string, body PutApiV3CollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CollectionIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CommandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CommandRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Command(ctx context.Context, body PostApiV3CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CommandRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3CommandIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CommandIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigDownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigDownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigDownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigDownloadclientIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigDownloadclientIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigDownloadclientId(ctx context.Context, id string, body PutApiV3ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigDownloadclientIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigHostId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigHostIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigHostIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigHostIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigHostIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigHostIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigHostId(ctx context.Context, id string, body PutApiV3ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigHostIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigImportlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigImportlistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigImportlistIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigImportlistIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigImportlistIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigImportlistId(ctx context.Context, id string, body PutApiV3ConfigImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigImportlistIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigIndexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigIndexerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigIndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigIndexerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigIndexerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigIndexerIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigIndexerId(ctx context.Context, id string, body PutApiV3ConfigIndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigIndexerIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigMediamanagement(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigMediamanagementRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigMediamanagementId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigMediamanagementIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigMediamanagementIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigMediamanagementIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigMediamanagementId(ctx context.Context, id string, body PutApiV3ConfigMediamanagementIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigMediamanagementIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigMetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigMetadataIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigMetadataIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigMetadataIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigMetadataId(ctx context.Context, id string, body PutApiV3ConfigMetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigMetadataIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigNaming(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigNamingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigNamingExamples(ctx context.Context, params *GetApiV3ConfigNamingExamplesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigNamingExamplesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigNamingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigNamingIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigNamingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigNamingIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigNamingIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigNamingIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigNamingId(ctx context.Context, id string, body PutApiV3ConfigNamingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigNamingIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigUiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ConfigUiId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ConfigUiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigUiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigUiIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ConfigUiId(ctx context.Context, id string, body PutApiV3ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ConfigUiIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Credit(ctx context.Context, params *GetApiV3CreditParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CreditRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CreditId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CreditIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CustomfilterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CustomfilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Customfilter(ctx context.Context, body PostApiV3CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CustomfilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3CustomfilterIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CustomfilterIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomfilterIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomfilterIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomfilterId(ctx context.Context, id string, body PutApiV3CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomfilterIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Customformat(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CustomformatRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3CustomformatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CustomformatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Customformat(ctx context.Context, body PostApiV3CustomformatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3CustomformatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3CustomformatBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3CustomformatBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3CustomformatBulk(ctx context.Context, body DeleteApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3CustomformatBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomformatBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomformatBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomformatBulk(ctx context.Context, body PutApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomformatBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CustomformatSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CustomformatSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3CustomformatId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3CustomformatIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3CustomformatId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3CustomformatIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomformatIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomformatIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3CustomformatId(ctx context.Context, id string, body PutApiV3CustomformatIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3CustomformatIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Delayprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DelayprofileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DelayprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DelayprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Delayprofile(ctx context.Context, body PostApiV3DelayprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DelayprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DelayprofileReorderId(ctx context.Context, id int32, params *PutApiV3DelayprofileReorderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DelayprofileReorderIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3DelayprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3DelayprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3DelayprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DelayprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DelayprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DelayprofileIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DelayprofileId(ctx context.Context, id string, body PutApiV3DelayprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DelayprofileIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Diskspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DiskspaceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientWithBody(ctx context.Context, params *PostApiV3DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Downloadclient(ctx context.Context, params *PostApiV3DownloadclientParams, body PostApiV3DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientActionName(ctx context.Context, name string, body PostApiV3DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3DownloadclientBulk(ctx context.Context, body DeleteApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DownloadclientBulk(ctx context.Context, body PutApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DownloadclientSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientTestWithBody(ctx context.Context, params *PostApiV3DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientTest(ctx context.Context, params *PostApiV3DownloadclientTestParams, body PostApiV3DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3DownloadclientTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3DownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3DownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DownloadclientIdWithBody(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DownloadclientIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3DownloadclientId(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, body PutApiV3DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3DownloadclientIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Exclusions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ExclusionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ExclusionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ExclusionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Exclusions(ctx context.Context, body PostApiV3ExclusionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ExclusionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ExclusionsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ExclusionsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ExclusionsBulk(ctx context.Context, body DeleteApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ExclusionsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ExclusionsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ExclusionsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ExclusionsBulk(ctx context.Context, body PostApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ExclusionsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ExclusionsPaged(ctx context.Context, params *GetApiV3ExclusionsPagedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ExclusionsPagedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ExclusionsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ExclusionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ExclusionsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ExclusionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ExclusionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ExclusionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ExclusionsId(ctx context.Context, id string, body PutApiV3ExclusionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ExclusionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Extrafile(ctx context.Context, params *GetApiV3ExtrafileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ExtrafileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Filesystem(ctx context.Context, params *GetApiV3FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3FilesystemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3FilesystemMediafiles(ctx context.Context, params *GetApiV3FilesystemMediafilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3FilesystemMediafilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3FilesystemType(ctx context.Context, params *GetApiV3FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3FilesystemTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3HealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3History(ctx context.Context, params *GetApiV3HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3HistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3HistoryFailedId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3HistoryFailedIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3HistoryMovie(ctx context.Context, params *GetApiV3HistoryMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3HistoryMovieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3HistorySince(ctx context.Context, params *GetApiV3HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3HistorySinceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Importlist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ImportlistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistWithBody(ctx context.Context, params *PostApiV3ImportlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Importlist(ctx context.Context, params *PostApiV3ImportlistParams, body PostApiV3ImportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistActionName(ctx context.Context, name string, body PostApiV3ImportlistActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ImportlistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ImportlistBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ImportlistBulk(ctx context.Context, body DeleteApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ImportlistBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ImportlistBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ImportlistBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ImportlistBulk(ctx context.Context, body PutApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ImportlistBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ImportlistMovie(ctx context.Context, params *GetApiV3ImportlistMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ImportlistMovieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistMovieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistMovieRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistMovieWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistMovieRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistMovie(ctx context.Context, body PostApiV3ImportlistMovieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistMovieRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ImportlistSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ImportlistSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistTestWithBody(ctx context.Context, params *PostApiV3ImportlistTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistTest(ctx context.Context, params *PostApiV3ImportlistTestParams, body PostApiV3ImportlistTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ImportlistTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ImportlistTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ImportlistIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ImportlistId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ImportlistIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ImportlistIdWithBody(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ImportlistIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ImportlistId(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, body PutApiV3ImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ImportlistIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3IndexerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerWithBody(ctx context.Context, params *PostApiV3IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Indexer(ctx context.Context, params *PostApiV3IndexerParams, body PostApiV3IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerActionName(ctx context.Context, name string, body PostApiV3IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3IndexerBulk(ctx context.Context, body DeleteApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3IndexerBulk(ctx context.Context, body PutApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3IndexerSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerTestWithBody(ctx context.Context, params *PostApiV3IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerTest(ctx context.Context, params *PostApiV3IndexerTestParams, body PostApiV3IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3IndexerTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3IndexerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3IndexerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3IndexerIdWithBody(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3IndexerIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3IndexerId(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, body PutApiV3IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3IndexerIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Indexerflag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3IndexerflagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Language(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LanguageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LanguageId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LanguageIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LocalizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LocalizationLanguage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LocalizationLanguageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Log(ctx context.Context, params *GetApiV3LogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LogFileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LogFileUpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LogFileUpdateFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3LogFileFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Manualimport(ctx context.Context, params *GetApiV3ManualimportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ManualimportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ManualimportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ManualimportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Manualimport(ctx context.Context, body PostApiV3ManualimportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ManualimportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MediacoverMovieIdFilename(ctx context.Context, movieId int32, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MediacoverMovieIdFilenameRequest(c.Server, movieId, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Metadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataWithBody(ctx context.Context, params *PostApiV3MetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Metadata(ctx context.Context, params *PostApiV3MetadataParams, body PostApiV3MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataActionName(ctx context.Context, name string, body PostApiV3MetadataActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MetadataSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MetadataSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataTestWithBody(ctx context.Context, params *PostApiV3MetadataTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataTest(ctx context.Context, params *PostApiV3MetadataTestParams, body PostApiV3MetadataTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MetadataTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MetadataTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MetadataIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MetadataId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MetadataIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MetadataIdWithBody(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MetadataIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MetadataId(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, body PutApiV3MetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MetadataIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Movie(ctx context.Context, params *GetApiV3MovieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MovieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MovieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MovieRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Movie(ctx context.Context, body PostApiV3MovieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MovieRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MovieEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MovieEditorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx context.Context, body DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MovieEditor(ctx context.Context, body DeleteApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MovieEditorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MovieEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MovieEditorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MovieEditor(ctx context.Context, body PutApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MovieEditorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MovieImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MovieImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3MovieImport(ctx context.Context, body PostApiV3MovieImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3MovieImportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MovieLookup(ctx context.Context, params *GetApiV3MovieLookupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MovieLookupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MovieLookupImdb(ctx context.Context, params *GetApiV3MovieLookupImdbParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MovieLookupImdbRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MovieLookupTmdb(ctx context.Context, params *GetApiV3MovieLookupTmdbParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MovieLookupTmdbRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MovieId(ctx context.Context, id int32, params *DeleteApiV3MovieIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MovieIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MovieId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MovieIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MovieIdWithBody(ctx context.Context, id string, params *PutApiV3MovieIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MovieIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MovieId(ctx context.Context, id string, params *PutApiV3MovieIdParams, body PutApiV3MovieIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MovieIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Moviefile(ctx context.Context, params *GetApiV3MoviefileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MoviefileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MoviefileBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MoviefileBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MoviefileBulk(ctx context.Context, body DeleteApiV3MoviefileBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MoviefileBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MoviefileEditorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MoviefileEditorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MoviefileEditor(ctx context.Context, body PutApiV3MoviefileEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MoviefileEditorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3MoviefileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3MoviefileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3MoviefileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3MoviefileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MoviefileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MoviefileIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3MoviefileId(ctx context.Context, id string, body PutApiV3MoviefileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3MoviefileIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3NotificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationWithBody(ctx context.Context, params *PostApiV3NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Notification(ctx context.Context, params *PostApiV3NotificationParams, body PostApiV3NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationActionName(ctx context.Context, name string, body PostApiV3NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3NotificationSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationTestWithBody(ctx context.Context, params *PostApiV3NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationTest(ctx context.Context, params *PostApiV3NotificationTestParams, body PostApiV3NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3NotificationTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3NotificationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3NotificationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3NotificationIdWithBody(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3NotificationIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3NotificationId(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, body PutApiV3NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3NotificationIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Parse(ctx context.Context, params *GetApiV3ParseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ParseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Qualitydefinition(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QualitydefinitionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionUpdateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionUpdateRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionUpdate(ctx context.Context, body PutApiV3QualitydefinitionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3QualitydefinitionId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QualitydefinitionIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualitydefinitionId(ctx context.Context, id string, body PutApiV3QualitydefinitionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualitydefinitionIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Qualityprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QualityprofileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3QualityprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3QualityprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Qualityprofile(ctx context.Context, body PostApiV3QualityprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3QualityprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3QualityprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QualityprofileSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3QualityprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3QualityprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3QualityprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QualityprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualityprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualityprofileIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3QualityprofileId(ctx context.Context, id string, body PutApiV3QualityprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3QualityprofileIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Queue(ctx context.Context, params *GetApiV3QueueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QueueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3QueueBulkWithBody(ctx context.Context, params *DeleteApiV3QueueBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3QueueBulkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3QueueBulkWithApplicationWildcardPlusJSONBody(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3QueueBulkRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3QueueBulk(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3QueueBulkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3QueueDetails(ctx context.Context, params *GetApiV3QueueDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QueueDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3QueueGrabBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3QueueGrabBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3QueueGrabBulk(ctx context.Context, body PostApiV3QueueGrabBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3QueueGrabBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3QueueGrabId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3QueueGrabIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3QueueStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3QueueStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3QueueId(ctx context.Context, id int32, params *DeleteApiV3QueueIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3QueueIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Release(ctx context.Context, params *GetApiV3ReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ReleaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ReleaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Release(ctx context.Context, body PostApiV3ReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ReleasePushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleasePushRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ReleasePush(ctx context.Context, body PostApiV3ReleasePushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleasePushRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Releaseprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ReleaseprofileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ReleaseprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleaseprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3ReleaseprofileWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleaseprofileRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Releaseprofile(ctx context.Context, body PostApiV3ReleaseprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3ReleaseprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3ReleaseprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3ReleaseprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3ReleaseprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3ReleaseprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ReleaseprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ReleaseprofileIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ReleaseprofileIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ReleaseprofileIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3ReleaseprofileId(ctx context.Context, id string, body PutApiV3ReleaseprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3ReleaseprofileIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Remotepathmapping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3RemotepathmappingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3RemotepathmappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3RemotepathmappingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Remotepathmapping(ctx context.Context, body PostApiV3RemotepathmappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3RemotepathmappingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3RemotepathmappingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3RemotepathmappingIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3RemotepathmappingId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3RemotepathmappingIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3RemotepathmappingIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3RemotepathmappingIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3RemotepathmappingIdWithApplicationWildcardPlusJSONBody(ctx context.Context, id string, body PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3RemotepathmappingIdRequestWithApplicationWildcardPlusJSONBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3RemotepathmappingId(ctx context.Context, id string, body PutApiV3RemotepathmappingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3RemotepathmappingIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Rename(ctx context.Context, params *GetApiV3RenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3RenameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Rootfolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3RootfolderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3RootfolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3RootfolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Rootfolder(ctx context.Context, body PostApiV3RootfolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3RootfolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3RootfolderId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3RootfolderIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3RootfolderId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3RootfolderIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemBackupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3SystemBackupRestoreUploadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3SystemBackupRestoreId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3SystemBackupRestoreIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3SystemBackupId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3SystemBackupIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3SystemRestartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemRoutesDuplicateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3SystemShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3SystemTaskId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3SystemTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3TagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3TagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV3Tag(ctx context.Context, body PostApiV3TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV3TagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3TagDetailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3TagDetailId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3TagDetailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV3TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV3TagIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3TagIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3TagIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3TagIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV3TagId(ctx context.Context, id string, body PutApiV3TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV3TagIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3UpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3WantedCutoff(ctx context.Context, params *GetApiV3WantedCutoffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3WantedCutoffRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV3WantedMissing(ctx context.Context, params *GetApiV3WantedMissingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV3WantedMissingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedV3CalendarRadarrIcs(ctx context.Context, params *GetFeedV3CalendarRadarrIcsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedV3CalendarRadarrIcsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiRequest generates requests for GetApi
func NewGetApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3AlttitleRequest generates requests for GetApiV3Alttitle
func NewGetApiV3AlttitleRequest(server string, params *GetApiV3AlttitleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/alttitle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieMetadataId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieMetadataId", runtime.ParamLocationQuery, *params.MovieMetadataId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3AlttitleIdRequest generates requests for GetApiV3AlttitleId
func NewGetApiV3AlttitleIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/alttitle/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3AutotaggingRequest generates requests for GetApiV3Autotagging
func NewGetApiV3AutotaggingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3AutotaggingRequest calls the generic PostApiV3Autotagging builder with application/json body
func NewPostApiV3AutotaggingRequest(server string, body PostApiV3AutotaggingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3AutotaggingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3AutotaggingRequestWithBody generates requests for PostApiV3Autotagging with any type of body
func NewPostApiV3AutotaggingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3AutotaggingSchemaRequest generates requests for GetApiV3AutotaggingSchema
func NewGetApiV3AutotaggingSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3AutotaggingIdRequest generates requests for DeleteApiV3AutotaggingId
func NewDeleteApiV3AutotaggingIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3AutotaggingIdRequest generates requests for GetApiV3AutotaggingId
func NewGetApiV3AutotaggingIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3AutotaggingIdRequest calls the generic PutApiV3AutotaggingId builder with application/json body
func NewPutApiV3AutotaggingIdRequest(server string, id string, body PutApiV3AutotaggingIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3AutotaggingIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3AutotaggingIdRequestWithBody generates requests for PutApiV3AutotaggingId with any type of body
func NewPutApiV3AutotaggingIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/autotagging/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3BlocklistRequest generates requests for GetApiV3Blocklist
func NewGetApiV3BlocklistRequest(server string, params *GetApiV3BlocklistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/blocklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieIds", runtime.ParamLocationQuery, *params.MovieIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocols != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocols", runtime.ParamLocationQuery, *params.Protocols); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3BlocklistBulkRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteApiV3BlocklistBulk builder with application/*+json body
func NewDeleteApiV3BlocklistBulkRequestWithApplicationWildcardPlusJSONBody(server string, body DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3BlocklistBulkRequestWithBody(server, "application/*+json", bodyReader)
}

// NewDeleteApiV3BlocklistBulkRequest calls the generic DeleteApiV3BlocklistBulk builder with application/json body
func NewDeleteApiV3BlocklistBulkRequest(server string, body DeleteApiV3BlocklistBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3BlocklistBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3BlocklistBulkRequestWithBody generates requests for DeleteApiV3BlocklistBulk with any type of body
func NewDeleteApiV3BlocklistBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/blocklist/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3BlocklistMovieRequest generates requests for GetApiV3BlocklistMovie
func NewGetApiV3BlocklistMovieRequest(server string, params *GetApiV3BlocklistMovieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/blocklist/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3BlocklistIdRequest generates requests for DeleteApiV3BlocklistId
func NewDeleteApiV3BlocklistIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/blocklist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CalendarRequest generates requests for GetApiV3Calendar
func NewGetApiV3CalendarRequest(server string, params *GetApiV3CalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Unmonitored != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unmonitored", runtime.ParamLocationQuery, *params.Unmonitored); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CollectionRequest generates requests for GetApiV3Collection
func NewGetApiV3CollectionRequest(server string, params *GetApiV3CollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/collection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TmdbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbId", runtime.ParamLocationQuery, *params.TmdbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3CollectionRequest calls the generic PutApiV3Collection builder with application/json body
func NewPutApiV3CollectionRequest(server string, body PutApiV3CollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3CollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3CollectionRequestWithBody generates requests for PutApiV3Collection with any type of body
func NewPutApiV3CollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/collection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3CollectionIdRequest generates requests for GetApiV3CollectionId
func NewGetApiV3CollectionIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3CollectionIdRequest calls the generic PutApiV3CollectionId builder with application/json body
func NewPutApiV3CollectionIdRequest(server string, id string, body PutApiV3CollectionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3CollectionIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3CollectionIdRequestWithBody generates requests for PutApiV3CollectionId with any type of body
func NewPutApiV3CollectionIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3CommandRequest generates requests for GetApiV3Command
func NewGetApiV3CommandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3CommandRequest calls the generic PostApiV3Command builder with application/json body
func NewPostApiV3CommandRequest(server string, body PostApiV3CommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3CommandRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3CommandRequestWithBody generates requests for PostApiV3Command with any type of body
func NewPostApiV3CommandRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3CommandIdRequest generates requests for DeleteApiV3CommandId
func NewDeleteApiV3CommandIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CommandIdRequest generates requests for GetApiV3CommandId
func NewGetApiV3CommandIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigDownloadclientRequest generates requests for GetApiV3ConfigDownloadclient
func NewGetApiV3ConfigDownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigDownloadclientIdRequest generates requests for GetApiV3ConfigDownloadclientId
func NewGetApiV3ConfigDownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigDownloadclientIdRequest calls the generic PutApiV3ConfigDownloadclientId builder with application/json body
func NewPutApiV3ConfigDownloadclientIdRequest(server string, id string, body PutApiV3ConfigDownloadclientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigDownloadclientIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigDownloadclientIdRequestWithBody generates requests for PutApiV3ConfigDownloadclientId with any type of body
func NewPutApiV3ConfigDownloadclientIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigHostRequest generates requests for GetApiV3ConfigHost
func NewGetApiV3ConfigHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigHostIdRequest generates requests for GetApiV3ConfigHostId
func NewGetApiV3ConfigHostIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigHostIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3ConfigHostId builder with application/*+json body
func NewPutApiV3ConfigHostIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigHostIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutApiV3ConfigHostIdRequest calls the generic PutApiV3ConfigHostId builder with application/json body
func NewPutApiV3ConfigHostIdRequest(server string, id string, body PutApiV3ConfigHostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigHostIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigHostIdRequestWithBody generates requests for PutApiV3ConfigHostId with any type of body
func NewPutApiV3ConfigHostIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigImportlistRequest generates requests for GetApiV3ConfigImportlist
func NewGetApiV3ConfigImportlistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/importlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigImportlistIdRequest generates requests for GetApiV3ConfigImportlistId
func NewGetApiV3ConfigImportlistIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/importlist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigImportlistIdRequest calls the generic PutApiV3ConfigImportlistId builder with application/json body
func NewPutApiV3ConfigImportlistIdRequest(server string, id string, body PutApiV3ConfigImportlistIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigImportlistIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigImportlistIdRequestWithBody generates requests for PutApiV3ConfigImportlistId with any type of body
func NewPutApiV3ConfigImportlistIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/importlist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigIndexerRequest generates requests for GetApiV3ConfigIndexer
func NewGetApiV3ConfigIndexerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigIndexerIdRequest generates requests for GetApiV3ConfigIndexerId
func NewGetApiV3ConfigIndexerIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigIndexerIdRequest calls the generic PutApiV3ConfigIndexerId builder with application/json body
func NewPutApiV3ConfigIndexerIdRequest(server string, id string, body PutApiV3ConfigIndexerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigIndexerIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigIndexerIdRequestWithBody generates requests for PutApiV3ConfigIndexerId with any type of body
func NewPutApiV3ConfigIndexerIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigMediamanagementRequest generates requests for GetApiV3ConfigMediamanagement
func NewGetApiV3ConfigMediamanagementRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/mediamanagement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigMediamanagementIdRequest generates requests for GetApiV3ConfigMediamanagementId
func NewGetApiV3ConfigMediamanagementIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/mediamanagement/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigMediamanagementIdRequest calls the generic PutApiV3ConfigMediamanagementId builder with application/json body
func NewPutApiV3ConfigMediamanagementIdRequest(server string, id string, body PutApiV3ConfigMediamanagementIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigMediamanagementIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigMediamanagementIdRequestWithBody generates requests for PutApiV3ConfigMediamanagementId with any type of body
func NewPutApiV3ConfigMediamanagementIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/mediamanagement/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigMetadataRequest generates requests for GetApiV3ConfigMetadata
func NewGetApiV3ConfigMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigMetadataIdRequest generates requests for GetApiV3ConfigMetadataId
func NewGetApiV3ConfigMetadataIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/metadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigMetadataIdRequest calls the generic PutApiV3ConfigMetadataId builder with application/json body
func NewPutApiV3ConfigMetadataIdRequest(server string, id string, body PutApiV3ConfigMetadataIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigMetadataIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigMetadataIdRequestWithBody generates requests for PutApiV3ConfigMetadataId with any type of body
func NewPutApiV3ConfigMetadataIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/metadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigNamingRequest generates requests for GetApiV3ConfigNaming
func NewGetApiV3ConfigNamingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/naming")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigNamingExamplesRequest generates requests for GetApiV3ConfigNamingExamples
func NewGetApiV3ConfigNamingExamplesRequest(server string, params *GetApiV3ConfigNamingExamplesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/naming/examples")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RenameMovies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "renameMovies", runtime.ParamLocationQuery, *params.RenameMovies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReplaceIllegalCharacters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replaceIllegalCharacters", runtime.ParamLocationQuery, *params.ReplaceIllegalCharacters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ColonReplacementFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "colonReplacementFormat", runtime.ParamLocationQuery, *params.ColonReplacementFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StandardMovieFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standardMovieFormat", runtime.ParamLocationQuery, *params.StandardMovieFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieFolderFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieFolderFormat", runtime.ParamLocationQuery, *params.MovieFolderFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceName", runtime.ParamLocationQuery, *params.ResourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigNamingIdRequest generates requests for GetApiV3ConfigNamingId
func NewGetApiV3ConfigNamingIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/naming/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigNamingIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3ConfigNamingId builder with application/*+json body
func NewPutApiV3ConfigNamingIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigNamingIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutApiV3ConfigNamingIdRequest calls the generic PutApiV3ConfigNamingId builder with application/json body
func NewPutApiV3ConfigNamingIdRequest(server string, id string, body PutApiV3ConfigNamingIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigNamingIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigNamingIdRequestWithBody generates requests for PutApiV3ConfigNamingId with any type of body
func NewPutApiV3ConfigNamingIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/naming/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ConfigUiRequest generates requests for GetApiV3ConfigUi
func NewGetApiV3ConfigUiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/ui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ConfigUiIdRequest generates requests for GetApiV3ConfigUiId
func NewGetApiV3ConfigUiIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ConfigUiIdRequest calls the generic PutApiV3ConfigUiId builder with application/json body
func NewPutApiV3ConfigUiIdRequest(server string, id string, body PutApiV3ConfigUiIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ConfigUiIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ConfigUiIdRequestWithBody generates requests for PutApiV3ConfigUiId with any type of body
func NewPutApiV3ConfigUiIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3CreditRequest generates requests for GetApiV3Credit
func NewGetApiV3CreditRequest(server string, params *GetApiV3CreditParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/credit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieMetadataId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieMetadataId", runtime.ParamLocationQuery, *params.MovieMetadataId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CreditIdRequest generates requests for GetApiV3CreditId
func NewGetApiV3CreditIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/credit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CustomfilterRequest generates requests for GetApiV3Customfilter
func NewGetApiV3CustomfilterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3CustomfilterRequest calls the generic PostApiV3Customfilter builder with application/json body
func NewPostApiV3CustomfilterRequest(server string, body PostApiV3CustomfilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3CustomfilterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3CustomfilterRequestWithBody generates requests for PostApiV3Customfilter with any type of body
func NewPostApiV3CustomfilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3CustomfilterIdRequest generates requests for DeleteApiV3CustomfilterId
func NewDeleteApiV3CustomfilterIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CustomfilterIdRequest generates requests for GetApiV3CustomfilterId
func NewGetApiV3CustomfilterIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3CustomfilterIdRequest calls the generic PutApiV3CustomfilterId builder with application/json body
func NewPutApiV3CustomfilterIdRequest(server string, id string, body PutApiV3CustomfilterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3CustomfilterIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3CustomfilterIdRequestWithBody generates requests for PutApiV3CustomfilterId with any type of body
func NewPutApiV3CustomfilterIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3CustomformatRequest generates requests for GetApiV3Customformat
func NewGetApiV3CustomformatRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3CustomformatRequest calls the generic PostApiV3Customformat builder with application/json body
func NewPostApiV3CustomformatRequest(server string, body PostApiV3CustomformatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3CustomformatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3CustomformatRequestWithBody generates requests for PostApiV3Customformat with any type of body
func NewPostApiV3CustomformatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3CustomformatBulkRequest calls the generic DeleteApiV3CustomformatBulk builder with application/json body
func NewDeleteApiV3CustomformatBulkRequest(server string, body DeleteApiV3CustomformatBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3CustomformatBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3CustomformatBulkRequestWithBody generates requests for DeleteApiV3CustomformatBulk with any type of body
func NewDeleteApiV3CustomformatBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3CustomformatBulkRequest calls the generic PutApiV3CustomformatBulk builder with application/json body
func NewPutApiV3CustomformatBulkRequest(server string, body PutApiV3CustomformatBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3CustomformatBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3CustomformatBulkRequestWithBody generates requests for PutApiV3CustomformatBulk with any type of body
func NewPutApiV3CustomformatBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3CustomformatSchemaRequest generates requests for GetApiV3CustomformatSchema
func NewGetApiV3CustomformatSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3CustomformatIdRequest generates requests for DeleteApiV3CustomformatId
func NewDeleteApiV3CustomformatIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3CustomformatIdRequest generates requests for GetApiV3CustomformatId
func NewGetApiV3CustomformatIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3CustomformatIdRequest calls the generic PutApiV3CustomformatId builder with application/json body
func NewPutApiV3CustomformatIdRequest(server string, id string, body PutApiV3CustomformatIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3CustomformatIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3CustomformatIdRequestWithBody generates requests for PutApiV3CustomformatId with any type of body
func NewPutApiV3CustomformatIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/customformat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3DelayprofileRequest generates requests for GetApiV3Delayprofile
func NewGetApiV3DelayprofileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3DelayprofileRequest calls the generic PostApiV3Delayprofile builder with application/json body
func NewPostApiV3DelayprofileRequest(server string, body PostApiV3DelayprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3DelayprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3DelayprofileRequestWithBody generates requests for PostApiV3Delayprofile with any type of body
func NewPostApiV3DelayprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3DelayprofileReorderIdRequest generates requests for PutApiV3DelayprofileReorderId
func NewPutApiV3DelayprofileReorderIdRequest(server string, id int32, params *PutApiV3DelayprofileReorderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile/reorder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3DelayprofileIdRequest generates requests for DeleteApiV3DelayprofileId
func NewDeleteApiV3DelayprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3DelayprofileIdRequest generates requests for GetApiV3DelayprofileId
func NewGetApiV3DelayprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3DelayprofileIdRequest calls the generic PutApiV3DelayprofileId builder with application/json body
func NewPutApiV3DelayprofileIdRequest(server string, id string, body PutApiV3DelayprofileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3DelayprofileIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3DelayprofileIdRequestWithBody generates requests for PutApiV3DelayprofileId with any type of body
func NewPutApiV3DelayprofileIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/delayprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3DiskspaceRequest generates requests for GetApiV3Diskspace
func NewGetApiV3DiskspaceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/diskspace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3DownloadclientRequest generates requests for GetApiV3Downloadclient
func NewGetApiV3DownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3DownloadclientRequest calls the generic PostApiV3Downloadclient builder with application/json body
func NewPostApiV3DownloadclientRequest(server string, params *PostApiV3DownloadclientParams, body PostApiV3DownloadclientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3DownloadclientRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3DownloadclientRequestWithBody generates requests for PostApiV3Downloadclient with any type of body
func NewPostApiV3DownloadclientRequestWithBody(server string, params *PostApiV3DownloadclientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3DownloadclientActionNameRequest calls the generic PostApiV3DownloadclientActionName builder with application/json body
func NewPostApiV3DownloadclientActionNameRequest(server string, name string, body PostApiV3DownloadclientActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3DownloadclientActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV3DownloadclientActionNameRequestWithBody generates requests for PostApiV3DownloadclientActionName with any type of body
func NewPostApiV3DownloadclientActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3DownloadclientBulkRequest calls the generic DeleteApiV3DownloadclientBulk builder with application/json body
func NewDeleteApiV3DownloadclientBulkRequest(server string, body DeleteApiV3DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3DownloadclientBulkRequestWithBody generates requests for DeleteApiV3DownloadclientBulk with any type of body
func NewDeleteApiV3DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3DownloadclientBulkRequest calls the generic PutApiV3DownloadclientBulk builder with application/json body
func NewPutApiV3DownloadclientBulkRequest(server string, body PutApiV3DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3DownloadclientBulkRequestWithBody generates requests for PutApiV3DownloadclientBulk with any type of body
func NewPutApiV3DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3DownloadclientSchemaRequest generates requests for GetApiV3DownloadclientSchema
func NewGetApiV3DownloadclientSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3DownloadclientTestRequest calls the generic PostApiV3DownloadclientTest builder with application/json body
func NewPostApiV3DownloadclientTestRequest(server string, params *PostApiV3DownloadclientTestParams, body PostApiV3DownloadclientTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3DownloadclientTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3DownloadclientTestRequestWithBody generates requests for PostApiV3DownloadclientTest with any type of body
func NewPostApiV3DownloadclientTestRequestWithBody(server string, params *PostApiV3DownloadclientTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3DownloadclientTestallRequest generates requests for PostApiV3DownloadclientTestall
func NewPostApiV3DownloadclientTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3DownloadclientIdRequest generates requests for DeleteApiV3DownloadclientId
func NewDeleteApiV3DownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3DownloadclientIdRequest generates requests for GetApiV3DownloadclientId
func NewGetApiV3DownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3DownloadclientIdRequest calls the generic PutApiV3DownloadclientId builder with application/json body
func NewPutApiV3DownloadclientIdRequest(server string, id int32, params *PutApiV3DownloadclientIdParams, body PutApiV3DownloadclientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3DownloadclientIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3DownloadclientIdRequestWithBody generates requests for PutApiV3DownloadclientId with any type of body
func NewPutApiV3DownloadclientIdRequestWithBody(server string, id int32, params *PutApiV3DownloadclientIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ExclusionsRequest generates requests for GetApiV3Exclusions
func NewGetApiV3ExclusionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ExclusionsRequest calls the generic PostApiV3Exclusions builder with application/json body
func NewPostApiV3ExclusionsRequest(server string, body PostApiV3ExclusionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ExclusionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ExclusionsRequestWithBody generates requests for PostApiV3Exclusions with any type of body
func NewPostApiV3ExclusionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteApiV3ExclusionsBulk builder with application/*+json body
func NewDeleteApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody(server string, body DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3ExclusionsBulkRequestWithBody(server, "application/*+json", bodyReader)
}

// NewDeleteApiV3ExclusionsBulkRequest calls the generic DeleteApiV3ExclusionsBulk builder with application/json body
func NewDeleteApiV3ExclusionsBulkRequest(server string, body DeleteApiV3ExclusionsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3ExclusionsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3ExclusionsBulkRequestWithBody generates requests for DeleteApiV3ExclusionsBulk with any type of body
func NewDeleteApiV3ExclusionsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV3ExclusionsBulk builder with application/*+json body
func NewPostApiV3ExclusionsBulkRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ExclusionsBulkRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV3ExclusionsBulkRequest calls the generic PostApiV3ExclusionsBulk builder with application/json body
func NewPostApiV3ExclusionsBulkRequest(server string, body PostApiV3ExclusionsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ExclusionsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ExclusionsBulkRequestWithBody generates requests for PostApiV3ExclusionsBulk with any type of body
func NewPostApiV3ExclusionsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ExclusionsPagedRequest generates requests for GetApiV3ExclusionsPaged
func NewGetApiV3ExclusionsPagedRequest(server string, params *GetApiV3ExclusionsPagedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/paged")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3ExclusionsIdRequest generates requests for DeleteApiV3ExclusionsId
func NewDeleteApiV3ExclusionsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ExclusionsIdRequest generates requests for GetApiV3ExclusionsId
func NewGetApiV3ExclusionsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ExclusionsIdRequest calls the generic PutApiV3ExclusionsId builder with application/json body
func NewPutApiV3ExclusionsIdRequest(server string, id string, body PutApiV3ExclusionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ExclusionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ExclusionsIdRequestWithBody generates requests for PutApiV3ExclusionsId with any type of body
func NewPutApiV3ExclusionsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ExtrafileRequest generates requests for GetApiV3Extrafile
func NewGetApiV3ExtrafileRequest(server string, params *GetApiV3ExtrafileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/extrafile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3FilesystemRequest generates requests for GetApiV3Filesystem
func NewGetApiV3FilesystemRequest(server string, params *GetApiV3FilesystemParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/filesystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeFiles", runtime.ParamLocationQuery, *params.IncludeFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllowFoldersWithoutTrailingSlashes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allowFoldersWithoutTrailingSlashes", runtime.ParamLocationQuery, *params.AllowFoldersWithoutTrailingSlashes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3FilesystemMediafilesRequest generates requests for GetApiV3FilesystemMediafiles
func NewGetApiV3FilesystemMediafilesRequest(server string, params *GetApiV3FilesystemMediafilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/filesystem/mediafiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3FilesystemTypeRequest generates requests for GetApiV3FilesystemType
func NewGetApiV3FilesystemTypeRequest(server string, params *GetApiV3FilesystemTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/filesystem/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3HealthRequest generates requests for GetApiV3Health
func NewGetApiV3HealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3HistoryRequest generates requests for GetApiV3History
func NewGetApiV3HistoryRequest(server string, params *GetApiV3HistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeMovie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMovie", runtime.ParamLocationQuery, *params.IncludeMovie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DownloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "downloadId", runtime.ParamLocationQuery, *params.DownloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieIds", runtime.ParamLocationQuery, *params.MovieIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3HistoryFailedIdRequest generates requests for PostApiV3HistoryFailedId
func NewPostApiV3HistoryFailedIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/history/failed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3HistoryMovieRequest generates requests for GetApiV3HistoryMovie
func NewGetApiV3HistoryMovieRequest(server string, params *GetApiV3HistoryMovieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/history/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeMovie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMovie", runtime.ParamLocationQuery, *params.IncludeMovie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3HistorySinceRequest generates requests for GetApiV3HistorySince
func NewGetApiV3HistorySinceRequest(server string, params *GetApiV3HistorySinceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/history/since")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeMovie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMovie", runtime.ParamLocationQuery, *params.IncludeMovie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ImportlistRequest generates requests for GetApiV3Importlist
func NewGetApiV3ImportlistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ImportlistRequest calls the generic PostApiV3Importlist builder with application/json body
func NewPostApiV3ImportlistRequest(server string, params *PostApiV3ImportlistParams, body PostApiV3ImportlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ImportlistRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3ImportlistRequestWithBody generates requests for PostApiV3Importlist with any type of body
func NewPostApiV3ImportlistRequestWithBody(server string, params *PostApiV3ImportlistParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3ImportlistActionNameRequest calls the generic PostApiV3ImportlistActionName builder with application/json body
func NewPostApiV3ImportlistActionNameRequest(server string, name string, body PostApiV3ImportlistActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ImportlistActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV3ImportlistActionNameRequestWithBody generates requests for PostApiV3ImportlistActionName with any type of body
func NewPostApiV3ImportlistActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3ImportlistBulkRequest calls the generic DeleteApiV3ImportlistBulk builder with application/json body
func NewDeleteApiV3ImportlistBulkRequest(server string, body DeleteApiV3ImportlistBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3ImportlistBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3ImportlistBulkRequestWithBody generates requests for DeleteApiV3ImportlistBulk with any type of body
func NewDeleteApiV3ImportlistBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3ImportlistBulkRequest calls the generic PutApiV3ImportlistBulk builder with application/json body
func NewPutApiV3ImportlistBulkRequest(server string, body PutApiV3ImportlistBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ImportlistBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3ImportlistBulkRequestWithBody generates requests for PutApiV3ImportlistBulk with any type of body
func NewPutApiV3ImportlistBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ImportlistMovieRequest generates requests for GetApiV3ImportlistMovie
func NewGetApiV3ImportlistMovieRequest(server string, params *GetApiV3ImportlistMovieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeRecommendations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeRecommendations", runtime.ParamLocationQuery, *params.IncludeRecommendations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTrending != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTrending", runtime.ParamLocationQuery, *params.IncludeTrending); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludePopular != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includePopular", runtime.ParamLocationQuery, *params.IncludePopular); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ImportlistMovieRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV3ImportlistMovie builder with application/*+json body
func NewPostApiV3ImportlistMovieRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ImportlistMovieRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV3ImportlistMovieRequest calls the generic PostApiV3ImportlistMovie builder with application/json body
func NewPostApiV3ImportlistMovieRequest(server string, body PostApiV3ImportlistMovieJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ImportlistMovieRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ImportlistMovieRequestWithBody generates requests for PostApiV3ImportlistMovie with any type of body
func NewPostApiV3ImportlistMovieRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ImportlistSchemaRequest generates requests for GetApiV3ImportlistSchema
func NewGetApiV3ImportlistSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ImportlistTestRequest calls the generic PostApiV3ImportlistTest builder with application/json body
func NewPostApiV3ImportlistTestRequest(server string, params *PostApiV3ImportlistTestParams, body PostApiV3ImportlistTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ImportlistTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3ImportlistTestRequestWithBody generates requests for PostApiV3ImportlistTest with any type of body
func NewPostApiV3ImportlistTestRequestWithBody(server string, params *PostApiV3ImportlistTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3ImportlistTestallRequest generates requests for PostApiV3ImportlistTestall
func NewPostApiV3ImportlistTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3ImportlistIdRequest generates requests for DeleteApiV3ImportlistId
func NewDeleteApiV3ImportlistIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ImportlistIdRequest generates requests for GetApiV3ImportlistId
func NewGetApiV3ImportlistIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ImportlistIdRequest calls the generic PutApiV3ImportlistId builder with application/json body
func NewPutApiV3ImportlistIdRequest(server string, id int32, params *PutApiV3ImportlistIdParams, body PutApiV3ImportlistIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ImportlistIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3ImportlistIdRequestWithBody generates requests for PutApiV3ImportlistId with any type of body
func NewPutApiV3ImportlistIdRequestWithBody(server string, id int32, params *PutApiV3ImportlistIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/importlist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3IndexerRequest generates requests for GetApiV3Indexer
func NewGetApiV3IndexerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3IndexerRequest calls the generic PostApiV3Indexer builder with application/json body
func NewPostApiV3IndexerRequest(server string, params *PostApiV3IndexerParams, body PostApiV3IndexerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3IndexerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3IndexerRequestWithBody generates requests for PostApiV3Indexer with any type of body
func NewPostApiV3IndexerRequestWithBody(server string, params *PostApiV3IndexerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3IndexerActionNameRequest calls the generic PostApiV3IndexerActionName builder with application/json body
func NewPostApiV3IndexerActionNameRequest(server string, name string, body PostApiV3IndexerActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3IndexerActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV3IndexerActionNameRequestWithBody generates requests for PostApiV3IndexerActionName with any type of body
func NewPostApiV3IndexerActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3IndexerBulkRequest calls the generic DeleteApiV3IndexerBulk builder with application/json body
func NewDeleteApiV3IndexerBulkRequest(server string, body DeleteApiV3IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3IndexerBulkRequestWithBody generates requests for DeleteApiV3IndexerBulk with any type of body
func NewDeleteApiV3IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3IndexerBulkRequest calls the generic PutApiV3IndexerBulk builder with application/json body
func NewPutApiV3IndexerBulkRequest(server string, body PutApiV3IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3IndexerBulkRequestWithBody generates requests for PutApiV3IndexerBulk with any type of body
func NewPutApiV3IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3IndexerSchemaRequest generates requests for GetApiV3IndexerSchema
func NewGetApiV3IndexerSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3IndexerTestRequest calls the generic PostApiV3IndexerTest builder with application/json body
func NewPostApiV3IndexerTestRequest(server string, params *PostApiV3IndexerTestParams, body PostApiV3IndexerTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3IndexerTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3IndexerTestRequestWithBody generates requests for PostApiV3IndexerTest with any type of body
func NewPostApiV3IndexerTestRequestWithBody(server string, params *PostApiV3IndexerTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3IndexerTestallRequest generates requests for PostApiV3IndexerTestall
func NewPostApiV3IndexerTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3IndexerIdRequest generates requests for DeleteApiV3IndexerId
func NewDeleteApiV3IndexerIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3IndexerIdRequest generates requests for GetApiV3IndexerId
func NewGetApiV3IndexerIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3IndexerIdRequest calls the generic PutApiV3IndexerId builder with application/json body
func NewPutApiV3IndexerIdRequest(server string, id int32, params *PutApiV3IndexerIdParams, body PutApiV3IndexerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3IndexerIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3IndexerIdRequestWithBody generates requests for PutApiV3IndexerId with any type of body
func NewPutApiV3IndexerIdRequestWithBody(server string, id int32, params *PutApiV3IndexerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3IndexerflagRequest generates requests for GetApiV3Indexerflag
func NewGetApiV3IndexerflagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/indexerflag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LanguageRequest generates requests for GetApiV3Language
func NewGetApiV3LanguageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/language")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LanguageIdRequest generates requests for GetApiV3LanguageId
func NewGetApiV3LanguageIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/language/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LocalizationRequest generates requests for GetApiV3Localization
func NewGetApiV3LocalizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/localization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LocalizationLanguageRequest generates requests for GetApiV3LocalizationLanguage
func NewGetApiV3LocalizationLanguageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/localization/language")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LogRequest generates requests for GetApiV3Log
func NewGetApiV3LogRequest(server string, params *GetApiV3LogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/log")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LogFileRequest generates requests for GetApiV3LogFile
func NewGetApiV3LogFileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/log/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LogFileUpdateRequest generates requests for GetApiV3LogFileUpdate
func NewGetApiV3LogFileUpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/log/file/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LogFileUpdateFilenameRequest generates requests for GetApiV3LogFileUpdateFilename
func NewGetApiV3LogFileUpdateFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/log/file/update/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3LogFileFilenameRequest generates requests for GetApiV3LogFileFilename
func NewGetApiV3LogFileFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/log/file/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ManualimportRequest generates requests for GetApiV3Manualimport
func NewGetApiV3ManualimportRequest(server string, params *GetApiV3ManualimportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/manualimport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Folder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "folder", runtime.ParamLocationQuery, *params.Folder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DownloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "downloadId", runtime.ParamLocationQuery, *params.DownloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterExistingFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filterExistingFiles", runtime.ParamLocationQuery, *params.FilterExistingFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ManualimportRequest calls the generic PostApiV3Manualimport builder with application/json body
func NewPostApiV3ManualimportRequest(server string, body PostApiV3ManualimportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ManualimportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ManualimportRequestWithBody generates requests for PostApiV3Manualimport with any type of body
func NewPostApiV3ManualimportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/manualimport")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3MediacoverMovieIdFilenameRequest generates requests for GetApiV3MediacoverMovieIdFilename
func NewGetApiV3MediacoverMovieIdFilenameRequest(server string, movieId int32, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/mediacover/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MetadataRequest generates requests for GetApiV3Metadata
func NewGetApiV3MetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3MetadataRequest calls the generic PostApiV3Metadata builder with application/json body
func NewPostApiV3MetadataRequest(server string, params *PostApiV3MetadataParams, body PostApiV3MetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3MetadataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3MetadataRequestWithBody generates requests for PostApiV3Metadata with any type of body
func NewPostApiV3MetadataRequestWithBody(server string, params *PostApiV3MetadataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3MetadataActionNameRequest calls the generic PostApiV3MetadataActionName builder with application/json body
func NewPostApiV3MetadataActionNameRequest(server string, name string, body PostApiV3MetadataActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3MetadataActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV3MetadataActionNameRequestWithBody generates requests for PostApiV3MetadataActionName with any type of body
func NewPostApiV3MetadataActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3MetadataSchemaRequest generates requests for GetApiV3MetadataSchema
func NewGetApiV3MetadataSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3MetadataTestRequest calls the generic PostApiV3MetadataTest builder with application/json body
func NewPostApiV3MetadataTestRequest(server string, params *PostApiV3MetadataTestParams, body PostApiV3MetadataTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3MetadataTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3MetadataTestRequestWithBody generates requests for PostApiV3MetadataTest with any type of body
func NewPostApiV3MetadataTestRequestWithBody(server string, params *PostApiV3MetadataTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3MetadataTestallRequest generates requests for PostApiV3MetadataTestall
func NewPostApiV3MetadataTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3MetadataIdRequest generates requests for DeleteApiV3MetadataId
func NewDeleteApiV3MetadataIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MetadataIdRequest generates requests for GetApiV3MetadataId
func NewGetApiV3MetadataIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3MetadataIdRequest calls the generic PutApiV3MetadataId builder with application/json body
func NewPutApiV3MetadataIdRequest(server string, id int32, params *PutApiV3MetadataIdParams, body PutApiV3MetadataIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MetadataIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3MetadataIdRequestWithBody generates requests for PutApiV3MetadataId with any type of body
func NewPutApiV3MetadataIdRequestWithBody(server string, id int32, params *PutApiV3MetadataIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/metadata/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3MovieRequest generates requests for GetApiV3Movie
func NewGetApiV3MovieRequest(server string, params *GetApiV3MovieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TmdbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbId", runtime.ParamLocationQuery, *params.TmdbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLocalCovers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeLocalCovers", runtime.ParamLocationQuery, *params.ExcludeLocalCovers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LanguageId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageId", runtime.ParamLocationQuery, *params.LanguageId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3MovieRequest calls the generic PostApiV3Movie builder with application/json body
func NewPostApiV3MovieRequest(server string, body PostApiV3MovieJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3MovieRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3MovieRequestWithBody generates requests for PostApiV3Movie with any type of body
func NewPostApiV3MovieRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteApiV3MovieEditor builder with application/*+json body
func NewDeleteApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody(server string, body DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3MovieEditorRequestWithBody(server, "application/*+json", bodyReader)
}

// NewDeleteApiV3MovieEditorRequest calls the generic DeleteApiV3MovieEditor builder with application/json body
func NewDeleteApiV3MovieEditorRequest(server string, body DeleteApiV3MovieEditorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3MovieEditorRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3MovieEditorRequestWithBody generates requests for DeleteApiV3MovieEditor with any type of body
func NewDeleteApiV3MovieEditorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/editor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3MovieEditor builder with application/*+json body
func NewPutApiV3MovieEditorRequestWithApplicationWildcardPlusJSONBody(server string, body PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MovieEditorRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutApiV3MovieEditorRequest calls the generic PutApiV3MovieEditor builder with application/json body
func NewPutApiV3MovieEditorRequest(server string, body PutApiV3MovieEditorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MovieEditorRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3MovieEditorRequestWithBody generates requests for PutApiV3MovieEditor with any type of body
func NewPutApiV3MovieEditorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/editor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3MovieImportRequest calls the generic PostApiV3MovieImport builder with application/json body
func NewPostApiV3MovieImportRequest(server string, body PostApiV3MovieImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3MovieImportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3MovieImportRequestWithBody generates requests for PostApiV3MovieImport with any type of body
func NewPostApiV3MovieImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3MovieLookupRequest generates requests for GetApiV3MovieLookup
func NewGetApiV3MovieLookupRequest(server string, params *GetApiV3MovieLookupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/lookup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Term != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "term", runtime.ParamLocationQuery, *params.Term); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MovieLookupImdbRequest generates requests for GetApiV3MovieLookupImdb
func NewGetApiV3MovieLookupImdbRequest(server string, params *GetApiV3MovieLookupImdbParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/lookup/imdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ImdbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imdbId", runtime.ParamLocationQuery, *params.ImdbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MovieLookupTmdbRequest generates requests for GetApiV3MovieLookupTmdb
func NewGetApiV3MovieLookupTmdbRequest(server string, params *GetApiV3MovieLookupTmdbParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/lookup/tmdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TmdbId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbId", runtime.ParamLocationQuery, *params.TmdbId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3MovieIdRequest generates requests for DeleteApiV3MovieId
func NewDeleteApiV3MovieIdRequest(server string, id int32, params *DeleteApiV3MovieIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeleteFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleteFiles", runtime.ParamLocationQuery, *params.DeleteFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddImportExclusion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "addImportExclusion", runtime.ParamLocationQuery, *params.AddImportExclusion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MovieIdRequest generates requests for GetApiV3MovieId
func NewGetApiV3MovieIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3MovieIdRequest calls the generic PutApiV3MovieId builder with application/json body
func NewPutApiV3MovieIdRequest(server string, id string, params *PutApiV3MovieIdParams, body PutApiV3MovieIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MovieIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3MovieIdRequestWithBody generates requests for PutApiV3MovieId with any type of body
func NewPutApiV3MovieIdRequestWithBody(server string, id string, params *PutApiV3MovieIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/movie/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MoveFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moveFiles", runtime.ParamLocationQuery, *params.MoveFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3MoviefileRequest generates requests for GetApiV3Moviefile
func NewGetApiV3MoviefileRequest(server string, params *GetApiV3MoviefileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieFileIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieFileIds", runtime.ParamLocationQuery, *params.MovieFileIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3MoviefileBulkRequest calls the generic DeleteApiV3MoviefileBulk builder with application/json body
func NewDeleteApiV3MoviefileBulkRequest(server string, body DeleteApiV3MoviefileBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3MoviefileBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV3MoviefileBulkRequestWithBody generates requests for DeleteApiV3MoviefileBulk with any type of body
func NewDeleteApiV3MoviefileBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV3MoviefileEditorRequest calls the generic PutApiV3MoviefileEditor builder with application/json body
func NewPutApiV3MoviefileEditorRequest(server string, body PutApiV3MoviefileEditorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MoviefileEditorRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3MoviefileEditorRequestWithBody generates requests for PutApiV3MoviefileEditor with any type of body
func NewPutApiV3MoviefileEditorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile/editor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3MoviefileIdRequest generates requests for DeleteApiV3MoviefileId
func NewDeleteApiV3MoviefileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3MoviefileIdRequest generates requests for GetApiV3MoviefileId
func NewGetApiV3MoviefileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3MoviefileIdRequest calls the generic PutApiV3MoviefileId builder with application/json body
func NewPutApiV3MoviefileIdRequest(server string, id string, body PutApiV3MoviefileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3MoviefileIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3MoviefileIdRequestWithBody generates requests for PutApiV3MoviefileId with any type of body
func NewPutApiV3MoviefileIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/moviefile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3NotificationRequest generates requests for GetApiV3Notification
func NewGetApiV3NotificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3NotificationRequest calls the generic PostApiV3Notification builder with application/json body
func NewPostApiV3NotificationRequest(server string, params *PostApiV3NotificationParams, body PostApiV3NotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3NotificationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3NotificationRequestWithBody generates requests for PostApiV3Notification with any type of body
func NewPostApiV3NotificationRequestWithBody(server string, params *PostApiV3NotificationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3NotificationActionNameRequest calls the generic PostApiV3NotificationActionName builder with application/json body
func NewPostApiV3NotificationActionNameRequest(server string, name string, body PostApiV3NotificationActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3NotificationActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV3NotificationActionNameRequestWithBody generates requests for PostApiV3NotificationActionName with any type of body
func NewPostApiV3NotificationActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3NotificationSchemaRequest generates requests for GetApiV3NotificationSchema
func NewGetApiV3NotificationSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3NotificationTestRequest calls the generic PostApiV3NotificationTest builder with application/json body
func NewPostApiV3NotificationTestRequest(server string, params *PostApiV3NotificationTestParams, body PostApiV3NotificationTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3NotificationTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV3NotificationTestRequestWithBody generates requests for PostApiV3NotificationTest with any type of body
func NewPostApiV3NotificationTestRequestWithBody(server string, params *PostApiV3NotificationTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3NotificationTestallRequest generates requests for PostApiV3NotificationTestall
func NewPostApiV3NotificationTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3NotificationIdRequest generates requests for DeleteApiV3NotificationId
func NewDeleteApiV3NotificationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3NotificationIdRequest generates requests for GetApiV3NotificationId
func NewGetApiV3NotificationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3NotificationIdRequest calls the generic PutApiV3NotificationId builder with application/json body
func NewPutApiV3NotificationIdRequest(server string, id int32, params *PutApiV3NotificationIdParams, body PutApiV3NotificationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3NotificationIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV3NotificationIdRequestWithBody generates requests for PutApiV3NotificationId with any type of body
func NewPutApiV3NotificationIdRequestWithBody(server string, id int32, params *PutApiV3NotificationIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ParseRequest generates requests for GetApiV3Parse
func NewGetApiV3ParseRequest(server string, params *GetApiV3ParseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/parse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3QualitydefinitionRequest generates requests for GetApiV3Qualitydefinition
func NewGetApiV3QualitydefinitionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualitydefinition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3QualitydefinitionUpdateRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3QualitydefinitionUpdate builder with application/*+json body
func NewPutApiV3QualitydefinitionUpdateRequestWithApplicationWildcardPlusJSONBody(server string, body PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3QualitydefinitionUpdateRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutApiV3QualitydefinitionUpdateRequest calls the generic PutApiV3QualitydefinitionUpdate builder with application/json body
func NewPutApiV3QualitydefinitionUpdateRequest(server string, body PutApiV3QualitydefinitionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3QualitydefinitionUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV3QualitydefinitionUpdateRequestWithBody generates requests for PutApiV3QualitydefinitionUpdate with any type of body
func NewPutApiV3QualitydefinitionUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualitydefinition/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3QualitydefinitionIdRequest generates requests for GetApiV3QualitydefinitionId
func NewGetApiV3QualitydefinitionIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualitydefinition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3QualitydefinitionIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3QualitydefinitionId builder with application/*+json body
func NewPutApiV3QualitydefinitionIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3QualitydefinitionIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutApiV3QualitydefinitionIdRequest calls the generic PutApiV3QualitydefinitionId builder with application/json body
func NewPutApiV3QualitydefinitionIdRequest(server string, id string, body PutApiV3QualitydefinitionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3QualitydefinitionIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3QualitydefinitionIdRequestWithBody generates requests for PutApiV3QualitydefinitionId with any type of body
func NewPutApiV3QualitydefinitionIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualitydefinition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3QualityprofileRequest generates requests for GetApiV3Qualityprofile
func NewGetApiV3QualityprofileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3QualityprofileRequest calls the generic PostApiV3Qualityprofile builder with application/json body
func NewPostApiV3QualityprofileRequest(server string, body PostApiV3QualityprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3QualityprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3QualityprofileRequestWithBody generates requests for PostApiV3Qualityprofile with any type of body
func NewPostApiV3QualityprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3QualityprofileSchemaRequest generates requests for GetApiV3QualityprofileSchema
func NewGetApiV3QualityprofileSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3QualityprofileIdRequest generates requests for DeleteApiV3QualityprofileId
func NewDeleteApiV3QualityprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3QualityprofileIdRequest generates requests for GetApiV3QualityprofileId
func NewGetApiV3QualityprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3QualityprofileIdRequest calls the generic PutApiV3QualityprofileId builder with application/json body
func NewPutApiV3QualityprofileIdRequest(server string, id string, body PutApiV3QualityprofileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3QualityprofileIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3QualityprofileIdRequestWithBody generates requests for PutApiV3QualityprofileId with any type of body
func NewPutApiV3QualityprofileIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/qualityprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3QueueRequest generates requests for GetApiV3Queue
func NewGetApiV3QueueRequest(server string, params *GetApiV3QueueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUnknownMovieItems != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeUnknownMovieItems", runtime.ParamLocationQuery, *params.IncludeUnknownMovieItems); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeMovie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMovie", runtime.ParamLocationQuery, *params.IncludeMovie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MovieIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieIds", runtime.ParamLocationQuery, *params.MovieIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocol", runtime.ParamLocationQuery, *params.Protocol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Languages != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languages", runtime.ParamLocationQuery, *params.Languages); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3QueueBulkRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteApiV3QueueBulk builder with application/*+json body
func NewDeleteApiV3QueueBulkRequestWithApplicationWildcardPlusJSONBody(server string, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3QueueBulkRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewDeleteApiV3QueueBulkRequest calls the generic DeleteApiV3QueueBulk builder with application/json body
func NewDeleteApiV3QueueBulkRequest(server string, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV3QueueBulkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteApiV3QueueBulkRequestWithBody generates requests for DeleteApiV3QueueBulk with any type of body
func NewDeleteApiV3QueueBulkRequestWithBody(server string, params *DeleteApiV3QueueBulkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RemoveFromClient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removeFromClient", runtime.ParamLocationQuery, *params.RemoveFromClient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Blocklist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "blocklist", runtime.ParamLocationQuery, *params.Blocklist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipRedownload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipRedownload", runtime.ParamLocationQuery, *params.SkipRedownload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChangeCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changeCategory", runtime.ParamLocationQuery, *params.ChangeCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3QueueDetailsRequest generates requests for GetApiV3QueueDetails
func NewGetApiV3QueueDetailsRequest(server string, params *GetApiV3QueueDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeMovie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMovie", runtime.ParamLocationQuery, *params.IncludeMovie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3QueueGrabBulkRequest calls the generic PostApiV3QueueGrabBulk builder with application/json body
func NewPostApiV3QueueGrabBulkRequest(server string, body PostApiV3QueueGrabBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3QueueGrabBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3QueueGrabBulkRequestWithBody generates requests for PostApiV3QueueGrabBulk with any type of body
func NewPostApiV3QueueGrabBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/grab/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3QueueGrabIdRequest generates requests for PostApiV3QueueGrabId
func NewPostApiV3QueueGrabIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/grab/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3QueueStatusRequest generates requests for GetApiV3QueueStatus
func NewGetApiV3QueueStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3QueueIdRequest generates requests for DeleteApiV3QueueId
func NewDeleteApiV3QueueIdRequest(server string, id int32, params *DeleteApiV3QueueIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/queue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RemoveFromClient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removeFromClient", runtime.ParamLocationQuery, *params.RemoveFromClient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Blocklist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "blocklist", runtime.ParamLocationQuery, *params.Blocklist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipRedownload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipRedownload", runtime.ParamLocationQuery, *params.SkipRedownload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChangeCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changeCategory", runtime.ParamLocationQuery, *params.ChangeCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ReleaseRequest generates requests for GetApiV3Release
func NewGetApiV3ReleaseRequest(server string, params *GetApiV3ReleaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/release")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ReleaseRequest calls the generic PostApiV3Release builder with application/json body
func NewPostApiV3ReleaseRequest(server string, body PostApiV3ReleaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ReleaseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ReleaseRequestWithBody generates requests for PostApiV3Release with any type of body
func NewPostApiV3ReleaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/release")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV3ReleasePushRequest calls the generic PostApiV3ReleasePush builder with application/json body
func NewPostApiV3ReleasePushRequest(server string, body PostApiV3ReleasePushJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ReleasePushRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ReleasePushRequestWithBody generates requests for PostApiV3ReleasePush with any type of body
func NewPostApiV3ReleasePushRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/release/push")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3ReleaseprofileRequest generates requests for GetApiV3Releaseprofile
func NewGetApiV3ReleaseprofileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/releaseprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3ReleaseprofileRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV3Releaseprofile builder with application/*+json body
func NewPostApiV3ReleaseprofileRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ReleaseprofileRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV3ReleaseprofileRequest calls the generic PostApiV3Releaseprofile builder with application/json body
func NewPostApiV3ReleaseprofileRequest(server string, body PostApiV3ReleaseprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3ReleaseprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3ReleaseprofileRequestWithBody generates requests for PostApiV3Releaseprofile with any type of body
func NewPostApiV3ReleaseprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/releaseprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3ReleaseprofileIdRequest generates requests for DeleteApiV3ReleaseprofileId
func NewDeleteApiV3ReleaseprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/releaseprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3ReleaseprofileIdRequest generates requests for GetApiV3ReleaseprofileId
func NewGetApiV3ReleaseprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/releaseprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3ReleaseprofileIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3ReleaseprofileId builder with application/*+json body
func NewPutApiV3ReleaseprofileIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ReleaseprofileIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutApiV3ReleaseprofileIdRequest calls the generic PutApiV3ReleaseprofileId builder with application/json body
func NewPutApiV3ReleaseprofileIdRequest(server string, id string, body PutApiV3ReleaseprofileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3ReleaseprofileIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3ReleaseprofileIdRequestWithBody generates requests for PutApiV3ReleaseprofileId with any type of body
func NewPutApiV3ReleaseprofileIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/releaseprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3RemotepathmappingRequest generates requests for GetApiV3Remotepathmapping
func NewGetApiV3RemotepathmappingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/remotepathmapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3RemotepathmappingRequest calls the generic PostApiV3Remotepathmapping builder with application/json body
func NewPostApiV3RemotepathmappingRequest(server string, body PostApiV3RemotepathmappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3RemotepathmappingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3RemotepathmappingRequestWithBody generates requests for PostApiV3Remotepathmapping with any type of body
func NewPostApiV3RemotepathmappingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/remotepathmapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3RemotepathmappingIdRequest generates requests for DeleteApiV3RemotepathmappingId
func NewDeleteApiV3RemotepathmappingIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/remotepathmapping/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3RemotepathmappingIdRequest generates requests for GetApiV3RemotepathmappingId
func NewGetApiV3RemotepathmappingIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/remotepathmapping/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3RemotepathmappingIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiV3RemotepathmappingId builder with application/*+json body
func NewPutApiV3RemotepathmappingIdRequestWithApplicationWildcardPlusJSONBody(server string, id string, body PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3RemotepathmappingIdRequestWithBody(server, id, "application/*+json", bodyReader)
}

// NewPutApiV3RemotepathmappingIdRequest calls the generic PutApiV3RemotepathmappingId builder with application/json body
func NewPutApiV3RemotepathmappingIdRequest(server string, id string, body PutApiV3RemotepathmappingIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3RemotepathmappingIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3RemotepathmappingIdRequestWithBody generates requests for PutApiV3RemotepathmappingId with any type of body
func NewPutApiV3RemotepathmappingIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/remotepathmapping/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3RenameRequest generates requests for GetApiV3Rename
func NewGetApiV3RenameRequest(server string, params *GetApiV3RenameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MovieId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "movieId", runtime.ParamLocationQuery, *params.MovieId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3RootfolderRequest generates requests for GetApiV3Rootfolder
func NewGetApiV3RootfolderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/rootfolder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3RootfolderRequest calls the generic PostApiV3Rootfolder builder with application/json body
func NewPostApiV3RootfolderRequest(server string, body PostApiV3RootfolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3RootfolderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3RootfolderRequestWithBody generates requests for PostApiV3Rootfolder with any type of body
func NewPostApiV3RootfolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/rootfolder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV3RootfolderIdRequest generates requests for DeleteApiV3RootfolderId
func NewDeleteApiV3RootfolderIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/rootfolder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3RootfolderIdRequest generates requests for GetApiV3RootfolderId
func NewGetApiV3RootfolderIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/rootfolder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemBackupRequest generates requests for GetApiV3SystemBackup
func NewGetApiV3SystemBackupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3SystemBackupRestoreUploadRequest generates requests for PostApiV3SystemBackupRestoreUpload
func NewPostApiV3SystemBackupRestoreUploadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/backup/restore/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3SystemBackupRestoreIdRequest generates requests for PostApiV3SystemBackupRestoreId
func NewPostApiV3SystemBackupRestoreIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/backup/restore/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3SystemBackupIdRequest generates requests for DeleteApiV3SystemBackupId
func NewDeleteApiV3SystemBackupIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/backup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3SystemRestartRequest generates requests for PostApiV3SystemRestart
func NewPostApiV3SystemRestartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemRoutesRequest generates requests for GetApiV3SystemRoutes
func NewGetApiV3SystemRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemRoutesDuplicateRequest generates requests for GetApiV3SystemRoutesDuplicate
func NewGetApiV3SystemRoutesDuplicateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/routes/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3SystemShutdownRequest generates requests for PostApiV3SystemShutdown
func NewPostApiV3SystemShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemStatusRequest generates requests for GetApiV3SystemStatus
func NewGetApiV3SystemStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemTaskRequest generates requests for GetApiV3SystemTask
func NewGetApiV3SystemTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3SystemTaskIdRequest generates requests for GetApiV3SystemTaskId
func NewGetApiV3SystemTaskIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/system/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3TagRequest generates requests for GetApiV3Tag
func NewGetApiV3TagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV3TagRequest calls the generic PostApiV3Tag builder with application/json body
func NewPostApiV3TagRequest(server string, body PostApiV3TagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV3TagRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV3TagRequestWithBody generates requests for PostApiV3Tag with any type of body
func NewPostApiV3TagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3TagDetailRequest generates requests for GetApiV3TagDetail
func NewGetApiV3TagDetailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3TagDetailIdRequest generates requests for GetApiV3TagDetailId
func NewGetApiV3TagDetailIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV3TagIdRequest generates requests for DeleteApiV3TagId
func NewDeleteApiV3TagIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3TagIdRequest generates requests for GetApiV3TagId
func NewGetApiV3TagIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV3TagIdRequest calls the generic PutApiV3TagId builder with application/json body
func NewPutApiV3TagIdRequest(server string, id string, body PutApiV3TagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV3TagIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV3TagIdRequestWithBody generates requests for PutApiV3TagId with any type of body
func NewPutApiV3TagIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV3UpdateRequest generates requests for GetApiV3Update
func NewGetApiV3UpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3WantedCutoffRequest generates requests for GetApiV3WantedCutoff
func NewGetApiV3WantedCutoffRequest(server string, params *GetApiV3WantedCutoffParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/wanted/cutoff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Monitored != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "monitored", runtime.ParamLocationQuery, *params.Monitored); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV3WantedMissingRequest generates requests for GetApiV3WantedMissing
func NewGetApiV3WantedMissingRequest(server string, params *GetApiV3WantedMissingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/wanted/missing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Monitored != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "monitored", runtime.ParamLocationQuery, *params.Monitored); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentPathRequest generates requests for GetContentPath
func NewGetContentPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedV3CalendarRadarrIcsRequest generates requests for GetFeedV3CalendarRadarrIcs
func NewGetFeedV3CalendarRadarrIcsRequest(server string, params *GetFeedV3CalendarRadarrIcsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feed/v3/calendar/radarr.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PastDays != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pastDays", runtime.ParamLocationQuery, *params.PastDays); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FutureDays != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "futureDays", runtime.ParamLocationQuery, *params.FutureDays); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Unmonitored != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unmonitored", runtime.ParamLocationQuery, *params.Unmonitored); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoginRequest generates requests for GetLogin
func NewGetLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, params *PostLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnUrl", runtime.ParamLocationQuery, *params.ReturnUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogoutRequest generates requests for GetLogout
func NewGetLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadPingRequest generates requests for HeadPing
func NewHeadPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPathRequest generates requests for GetPath
func NewGetPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiWithResponse request
	GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error)

	// GetApiV3AlttitleWithResponse request
	GetApiV3AlttitleWithResponse(ctx context.Context, params *GetApiV3AlttitleParams, reqEditors ...RequestEditorFn) (*GetApiV3AlttitleResponse, error)

	// GetApiV3AlttitleIdWithResponse request
	GetApiV3AlttitleIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3AlttitleIdResponse, error)

	// GetApiV3AutotaggingWithResponse request
	GetApiV3AutotaggingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingResponse, error)

	// PostApiV3AutotaggingWithBodyWithResponse request with any body
	PostApiV3AutotaggingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3AutotaggingResponse, error)

	PostApiV3AutotaggingWithResponse(ctx context.Context, body PostApiV3AutotaggingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3AutotaggingResponse, error)

	// GetApiV3AutotaggingSchemaWithResponse request
	GetApiV3AutotaggingSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingSchemaResponse, error)

	// DeleteApiV3AutotaggingIdWithResponse request
	DeleteApiV3AutotaggingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3AutotaggingIdResponse, error)

	// GetApiV3AutotaggingIdWithResponse request
	GetApiV3AutotaggingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingIdResponse, error)

	// PutApiV3AutotaggingIdWithBodyWithResponse request with any body
	PutApiV3AutotaggingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3AutotaggingIdResponse, error)

	PutApiV3AutotaggingIdWithResponse(ctx context.Context, id string, body PutApiV3AutotaggingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3AutotaggingIdResponse, error)

	// GetApiV3BlocklistWithResponse request
	GetApiV3BlocklistWithResponse(ctx context.Context, params *GetApiV3BlocklistParams, reqEditors ...RequestEditorFn) (*GetApiV3BlocklistResponse, error)

	// DeleteApiV3BlocklistBulkWithBodyWithResponse request with any body
	DeleteApiV3BlocklistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error)

	DeleteApiV3BlocklistBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error)

	DeleteApiV3BlocklistBulkWithResponse(ctx context.Context, body DeleteApiV3BlocklistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error)

	// GetApiV3BlocklistMovieWithResponse request
	GetApiV3BlocklistMovieWithResponse(ctx context.Context, params *GetApiV3BlocklistMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3BlocklistMovieResponse, error)

	// DeleteApiV3BlocklistIdWithResponse request
	DeleteApiV3BlocklistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistIdResponse, error)

	// GetApiV3CalendarWithResponse request
	GetApiV3CalendarWithResponse(ctx context.Context, params *GetApiV3CalendarParams, reqEditors ...RequestEditorFn) (*GetApiV3CalendarResponse, error)

	// GetApiV3CollectionWithResponse request
	GetApiV3CollectionWithResponse(ctx context.Context, params *GetApiV3CollectionParams, reqEditors ...RequestEditorFn) (*GetApiV3CollectionResponse, error)

	// PutApiV3CollectionWithBodyWithResponse request with any body
	PutApiV3CollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CollectionResponse, error)

	PutApiV3CollectionWithResponse(ctx context.Context, body PutApiV3CollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CollectionResponse, error)

	// GetApiV3CollectionIdWithResponse request
	GetApiV3CollectionIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CollectionIdResponse, error)

	// PutApiV3CollectionIdWithBodyWithResponse request with any body
	PutApiV3CollectionIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CollectionIdResponse, error)

	PutApiV3CollectionIdWithResponse(ctx context.Context, id string, body PutApiV3CollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CollectionIdResponse, error)

	// GetApiV3CommandWithResponse request
	GetApiV3CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CommandResponse, error)

	// PostApiV3CommandWithBodyWithResponse request with any body
	PostApiV3CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CommandResponse, error)

	PostApiV3CommandWithResponse(ctx context.Context, body PostApiV3CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CommandResponse, error)

	// DeleteApiV3CommandIdWithResponse request
	DeleteApiV3CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CommandIdResponse, error)

	// GetApiV3CommandIdWithResponse request
	GetApiV3CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CommandIdResponse, error)

	// GetApiV3ConfigDownloadclientWithResponse request
	GetApiV3ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigDownloadclientResponse, error)

	// GetApiV3ConfigDownloadclientIdWithResponse request
	GetApiV3ConfigDownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigDownloadclientIdResponse, error)

	// PutApiV3ConfigDownloadclientIdWithBodyWithResponse request with any body
	PutApiV3ConfigDownloadclientIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigDownloadclientIdResponse, error)

	PutApiV3ConfigDownloadclientIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigDownloadclientIdResponse, error)

	// GetApiV3ConfigHostWithResponse request
	GetApiV3ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigHostResponse, error)

	// GetApiV3ConfigHostIdWithResponse request
	GetApiV3ConfigHostIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigHostIdResponse, error)

	// PutApiV3ConfigHostIdWithBodyWithResponse request with any body
	PutApiV3ConfigHostIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error)

	PutApiV3ConfigHostIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error)

	PutApiV3ConfigHostIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error)

	// GetApiV3ConfigImportlistWithResponse request
	GetApiV3ConfigImportlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigImportlistResponse, error)

	// GetApiV3ConfigImportlistIdWithResponse request
	GetApiV3ConfigImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigImportlistIdResponse, error)

	// PutApiV3ConfigImportlistIdWithBodyWithResponse request with any body
	PutApiV3ConfigImportlistIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigImportlistIdResponse, error)

	PutApiV3ConfigImportlistIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigImportlistIdResponse, error)

	// GetApiV3ConfigIndexerWithResponse request
	GetApiV3ConfigIndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigIndexerResponse, error)

	// GetApiV3ConfigIndexerIdWithResponse request
	GetApiV3ConfigIndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigIndexerIdResponse, error)

	// PutApiV3ConfigIndexerIdWithBodyWithResponse request with any body
	PutApiV3ConfigIndexerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigIndexerIdResponse, error)

	PutApiV3ConfigIndexerIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigIndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigIndexerIdResponse, error)

	// GetApiV3ConfigMediamanagementWithResponse request
	GetApiV3ConfigMediamanagementWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMediamanagementResponse, error)

	// GetApiV3ConfigMediamanagementIdWithResponse request
	GetApiV3ConfigMediamanagementIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMediamanagementIdResponse, error)

	// PutApiV3ConfigMediamanagementIdWithBodyWithResponse request with any body
	PutApiV3ConfigMediamanagementIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMediamanagementIdResponse, error)

	PutApiV3ConfigMediamanagementIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigMediamanagementIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMediamanagementIdResponse, error)

	// GetApiV3ConfigMetadataWithResponse request
	GetApiV3ConfigMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMetadataResponse, error)

	// GetApiV3ConfigMetadataIdWithResponse request
	GetApiV3ConfigMetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMetadataIdResponse, error)

	// PutApiV3ConfigMetadataIdWithBodyWithResponse request with any body
	PutApiV3ConfigMetadataIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMetadataIdResponse, error)

	PutApiV3ConfigMetadataIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigMetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMetadataIdResponse, error)

	// GetApiV3ConfigNamingWithResponse request
	GetApiV3ConfigNamingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingResponse, error)

	// GetApiV3ConfigNamingExamplesWithResponse request
	GetApiV3ConfigNamingExamplesWithResponse(ctx context.Context, params *GetApiV3ConfigNamingExamplesParams, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingExamplesResponse, error)

	// GetApiV3ConfigNamingIdWithResponse request
	GetApiV3ConfigNamingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingIdResponse, error)

	// PutApiV3ConfigNamingIdWithBodyWithResponse request with any body
	PutApiV3ConfigNamingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error)

	PutApiV3ConfigNamingIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error)

	PutApiV3ConfigNamingIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigNamingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error)

	// GetApiV3ConfigUiWithResponse request
	GetApiV3ConfigUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigUiResponse, error)

	// GetApiV3ConfigUiIdWithResponse request
	GetApiV3ConfigUiIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigUiIdResponse, error)

	// PutApiV3ConfigUiIdWithBodyWithResponse request with any body
	PutApiV3ConfigUiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigUiIdResponse, error)

	PutApiV3ConfigUiIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigUiIdResponse, error)

	// GetApiV3CreditWithResponse request
	GetApiV3CreditWithResponse(ctx context.Context, params *GetApiV3CreditParams, reqEditors ...RequestEditorFn) (*GetApiV3CreditResponse, error)

	// GetApiV3CreditIdWithResponse request
	GetApiV3CreditIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CreditIdResponse, error)

	// GetApiV3CustomfilterWithResponse request
	GetApiV3CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomfilterResponse, error)

	// PostApiV3CustomfilterWithBodyWithResponse request with any body
	PostApiV3CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CustomfilterResponse, error)

	PostApiV3CustomfilterWithResponse(ctx context.Context, body PostApiV3CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CustomfilterResponse, error)

	// DeleteApiV3CustomfilterIdWithResponse request
	DeleteApiV3CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomfilterIdResponse, error)

	// GetApiV3CustomfilterIdWithResponse request
	GetApiV3CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CustomfilterIdResponse, error)

	// PutApiV3CustomfilterIdWithBodyWithResponse request with any body
	PutApiV3CustomfilterIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomfilterIdResponse, error)

	PutApiV3CustomfilterIdWithResponse(ctx context.Context, id string, body PutApiV3CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomfilterIdResponse, error)

	// GetApiV3CustomformatWithResponse request
	GetApiV3CustomformatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatResponse, error)

	// PostApiV3CustomformatWithBodyWithResponse request with any body
	PostApiV3CustomformatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CustomformatResponse, error)

	PostApiV3CustomformatWithResponse(ctx context.Context, body PostApiV3CustomformatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CustomformatResponse, error)

	// DeleteApiV3CustomformatBulkWithBodyWithResponse request with any body
	DeleteApiV3CustomformatBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatBulkResponse, error)

	DeleteApiV3CustomformatBulkWithResponse(ctx context.Context, body DeleteApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatBulkResponse, error)

	// PutApiV3CustomformatBulkWithBodyWithResponse request with any body
	PutApiV3CustomformatBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatBulkResponse, error)

	PutApiV3CustomformatBulkWithResponse(ctx context.Context, body PutApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatBulkResponse, error)

	// GetApiV3CustomformatSchemaWithResponse request
	GetApiV3CustomformatSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatSchemaResponse, error)

	// DeleteApiV3CustomformatIdWithResponse request
	DeleteApiV3CustomformatIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatIdResponse, error)

	// GetApiV3CustomformatIdWithResponse request
	GetApiV3CustomformatIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatIdResponse, error)

	// PutApiV3CustomformatIdWithBodyWithResponse request with any body
	PutApiV3CustomformatIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatIdResponse, error)

	PutApiV3CustomformatIdWithResponse(ctx context.Context, id string, body PutApiV3CustomformatIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatIdResponse, error)

	// GetApiV3DelayprofileWithResponse request
	GetApiV3DelayprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DelayprofileResponse, error)

	// PostApiV3DelayprofileWithBodyWithResponse request with any body
	PostApiV3DelayprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DelayprofileResponse, error)

	PostApiV3DelayprofileWithResponse(ctx context.Context, body PostApiV3DelayprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DelayprofileResponse, error)

	// PutApiV3DelayprofileReorderIdWithResponse request
	PutApiV3DelayprofileReorderIdWithResponse(ctx context.Context, id int32, params *PutApiV3DelayprofileReorderIdParams, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileReorderIdResponse, error)

	// DeleteApiV3DelayprofileIdWithResponse request
	DeleteApiV3DelayprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3DelayprofileIdResponse, error)

	// GetApiV3DelayprofileIdWithResponse request
	GetApiV3DelayprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3DelayprofileIdResponse, error)

	// PutApiV3DelayprofileIdWithBodyWithResponse request with any body
	PutApiV3DelayprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileIdResponse, error)

	PutApiV3DelayprofileIdWithResponse(ctx context.Context, id string, body PutApiV3DelayprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileIdResponse, error)

	// GetApiV3DiskspaceWithResponse request
	GetApiV3DiskspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DiskspaceResponse, error)

	// GetApiV3DownloadclientWithResponse request
	GetApiV3DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientResponse, error)

	// PostApiV3DownloadclientWithBodyWithResponse request with any body
	PostApiV3DownloadclientWithBodyWithResponse(ctx context.Context, params *PostApiV3DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientResponse, error)

	PostApiV3DownloadclientWithResponse(ctx context.Context, params *PostApiV3DownloadclientParams, body PostApiV3DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientResponse, error)

	// PostApiV3DownloadclientActionNameWithBodyWithResponse request with any body
	PostApiV3DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientActionNameResponse, error)

	PostApiV3DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostApiV3DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientActionNameResponse, error)

	// DeleteApiV3DownloadclientBulkWithBodyWithResponse request with any body
	DeleteApiV3DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientBulkResponse, error)

	DeleteApiV3DownloadclientBulkWithResponse(ctx context.Context, body DeleteApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientBulkResponse, error)

	// PutApiV3DownloadclientBulkWithBodyWithResponse request with any body
	PutApiV3DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientBulkResponse, error)

	PutApiV3DownloadclientBulkWithResponse(ctx context.Context, body PutApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientBulkResponse, error)

	// GetApiV3DownloadclientSchemaWithResponse request
	GetApiV3DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientSchemaResponse, error)

	// PostApiV3DownloadclientTestWithBodyWithResponse request with any body
	PostApiV3DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostApiV3DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestResponse, error)

	PostApiV3DownloadclientTestWithResponse(ctx context.Context, params *PostApiV3DownloadclientTestParams, body PostApiV3DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestResponse, error)

	// PostApiV3DownloadclientTestallWithResponse request
	PostApiV3DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestallResponse, error)

	// DeleteApiV3DownloadclientIdWithResponse request
	DeleteApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientIdResponse, error)

	// GetApiV3DownloadclientIdWithResponse request
	GetApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientIdResponse, error)

	// PutApiV3DownloadclientIdWithBodyWithResponse request with any body
	PutApiV3DownloadclientIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientIdResponse, error)

	PutApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, body PutApiV3DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientIdResponse, error)

	// GetApiV3ExclusionsWithResponse request
	GetApiV3ExclusionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsResponse, error)

	// PostApiV3ExclusionsWithBodyWithResponse request with any body
	PostApiV3ExclusionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsResponse, error)

	PostApiV3ExclusionsWithResponse(ctx context.Context, body PostApiV3ExclusionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsResponse, error)

	// DeleteApiV3ExclusionsBulkWithBodyWithResponse request with any body
	DeleteApiV3ExclusionsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error)

	DeleteApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error)

	DeleteApiV3ExclusionsBulkWithResponse(ctx context.Context, body DeleteApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error)

	// PostApiV3ExclusionsBulkWithBodyWithResponse request with any body
	PostApiV3ExclusionsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error)

	PostApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error)

	PostApiV3ExclusionsBulkWithResponse(ctx context.Context, body PostApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error)

	// GetApiV3ExclusionsPagedWithResponse request
	GetApiV3ExclusionsPagedWithResponse(ctx context.Context, params *GetApiV3ExclusionsPagedParams, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsPagedResponse, error)

	// DeleteApiV3ExclusionsIdWithResponse request
	DeleteApiV3ExclusionsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsIdResponse, error)

	// GetApiV3ExclusionsIdWithResponse request
	GetApiV3ExclusionsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsIdResponse, error)

	// PutApiV3ExclusionsIdWithBodyWithResponse request with any body
	PutApiV3ExclusionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ExclusionsIdResponse, error)

	PutApiV3ExclusionsIdWithResponse(ctx context.Context, id string, body PutApiV3ExclusionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ExclusionsIdResponse, error)

	// GetApiV3ExtrafileWithResponse request
	GetApiV3ExtrafileWithResponse(ctx context.Context, params *GetApiV3ExtrafileParams, reqEditors ...RequestEditorFn) (*GetApiV3ExtrafileResponse, error)

	// GetApiV3FilesystemWithResponse request
	GetApiV3FilesystemWithResponse(ctx context.Context, params *GetApiV3FilesystemParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemResponse, error)

	// GetApiV3FilesystemMediafilesWithResponse request
	GetApiV3FilesystemMediafilesWithResponse(ctx context.Context, params *GetApiV3FilesystemMediafilesParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemMediafilesResponse, error)

	// GetApiV3FilesystemTypeWithResponse request
	GetApiV3FilesystemTypeWithResponse(ctx context.Context, params *GetApiV3FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemTypeResponse, error)

	// GetApiV3HealthWithResponse request
	GetApiV3HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3HealthResponse, error)

	// GetApiV3HistoryWithResponse request
	GetApiV3HistoryWithResponse(ctx context.Context, params *GetApiV3HistoryParams, reqEditors ...RequestEditorFn) (*GetApiV3HistoryResponse, error)

	// PostApiV3HistoryFailedIdWithResponse request
	PostApiV3HistoryFailedIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3HistoryFailedIdResponse, error)

	// GetApiV3HistoryMovieWithResponse request
	GetApiV3HistoryMovieWithResponse(ctx context.Context, params *GetApiV3HistoryMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3HistoryMovieResponse, error)

	// GetApiV3HistorySinceWithResponse request
	GetApiV3HistorySinceWithResponse(ctx context.Context, params *GetApiV3HistorySinceParams, reqEditors ...RequestEditorFn) (*GetApiV3HistorySinceResponse, error)

	// GetApiV3ImportlistWithResponse request
	GetApiV3ImportlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistResponse, error)

	// PostApiV3ImportlistWithBodyWithResponse request with any body
	PostApiV3ImportlistWithBodyWithResponse(ctx context.Context, params *PostApiV3ImportlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistResponse, error)

	PostApiV3ImportlistWithResponse(ctx context.Context, params *PostApiV3ImportlistParams, body PostApiV3ImportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistResponse, error)

	// PostApiV3ImportlistActionNameWithBodyWithResponse request with any body
	PostApiV3ImportlistActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistActionNameResponse, error)

	PostApiV3ImportlistActionNameWithResponse(ctx context.Context, name string, body PostApiV3ImportlistActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistActionNameResponse, error)

	// DeleteApiV3ImportlistBulkWithBodyWithResponse request with any body
	DeleteApiV3ImportlistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistBulkResponse, error)

	DeleteApiV3ImportlistBulkWithResponse(ctx context.Context, body DeleteApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistBulkResponse, error)

	// PutApiV3ImportlistBulkWithBodyWithResponse request with any body
	PutApiV3ImportlistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistBulkResponse, error)

	PutApiV3ImportlistBulkWithResponse(ctx context.Context, body PutApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistBulkResponse, error)

	// GetApiV3ImportlistMovieWithResponse request
	GetApiV3ImportlistMovieWithResponse(ctx context.Context, params *GetApiV3ImportlistMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistMovieResponse, error)

	// PostApiV3ImportlistMovieWithBodyWithResponse request with any body
	PostApiV3ImportlistMovieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error)

	PostApiV3ImportlistMovieWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error)

	PostApiV3ImportlistMovieWithResponse(ctx context.Context, body PostApiV3ImportlistMovieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error)

	// GetApiV3ImportlistSchemaWithResponse request
	GetApiV3ImportlistSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistSchemaResponse, error)

	// PostApiV3ImportlistTestWithBodyWithResponse request with any body
	PostApiV3ImportlistTestWithBodyWithResponse(ctx context.Context, params *PostApiV3ImportlistTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestResponse, error)

	PostApiV3ImportlistTestWithResponse(ctx context.Context, params *PostApiV3ImportlistTestParams, body PostApiV3ImportlistTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestResponse, error)

	// PostApiV3ImportlistTestallWithResponse request
	PostApiV3ImportlistTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestallResponse, error)

	// DeleteApiV3ImportlistIdWithResponse request
	DeleteApiV3ImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistIdResponse, error)

	// GetApiV3ImportlistIdWithResponse request
	GetApiV3ImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistIdResponse, error)

	// PutApiV3ImportlistIdWithBodyWithResponse request with any body
	PutApiV3ImportlistIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistIdResponse, error)

	PutApiV3ImportlistIdWithResponse(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, body PutApiV3ImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistIdResponse, error)

	// GetApiV3IndexerWithResponse request
	GetApiV3IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerResponse, error)

	// PostApiV3IndexerWithBodyWithResponse request with any body
	PostApiV3IndexerWithBodyWithResponse(ctx context.Context, params *PostApiV3IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerResponse, error)

	PostApiV3IndexerWithResponse(ctx context.Context, params *PostApiV3IndexerParams, body PostApiV3IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerResponse, error)

	// PostApiV3IndexerActionNameWithBodyWithResponse request with any body
	PostApiV3IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerActionNameResponse, error)

	PostApiV3IndexerActionNameWithResponse(ctx context.Context, name string, body PostApiV3IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerActionNameResponse, error)

	// DeleteApiV3IndexerBulkWithBodyWithResponse request with any body
	DeleteApiV3IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerBulkResponse, error)

	DeleteApiV3IndexerBulkWithResponse(ctx context.Context, body DeleteApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerBulkResponse, error)

	// PutApiV3IndexerBulkWithBodyWithResponse request with any body
	PutApiV3IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3IndexerBulkResponse, error)

	PutApiV3IndexerBulkWithResponse(ctx context.Context, body PutApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3IndexerBulkResponse, error)

	// GetApiV3IndexerSchemaWithResponse request
	GetApiV3IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerSchemaResponse, error)

	// PostApiV3IndexerTestWithBodyWithResponse request with any body
	PostApiV3IndexerTestWithBodyWithResponse(ctx context.Context, params *PostApiV3IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestResponse, error)

	PostApiV3IndexerTestWithResponse(ctx context.Context, params *PostApiV3IndexerTestParams, body PostApiV3IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestResponse, error)

	// PostApiV3IndexerTestallWithResponse request
	PostApiV3IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestallResponse, error)

	// DeleteApiV3IndexerIdWithResponse request
	DeleteApiV3IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerIdResponse, error)

	// GetApiV3IndexerIdWithResponse request
	GetApiV3IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3IndexerIdResponse, error)

	// PutApiV3IndexerIdWithBodyWithResponse request with any body
	PutApiV3IndexerIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3IndexerIdResponse, error)

	PutApiV3IndexerIdWithResponse(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, body PutApiV3IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3IndexerIdResponse, error)

	// GetApiV3IndexerflagWithResponse request
	GetApiV3IndexerflagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerflagResponse, error)

	// GetApiV3LanguageWithResponse request
	GetApiV3LanguageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LanguageResponse, error)

	// GetApiV3LanguageIdWithResponse request
	GetApiV3LanguageIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3LanguageIdResponse, error)

	// GetApiV3LocalizationWithResponse request
	GetApiV3LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LocalizationResponse, error)

	// GetApiV3LocalizationLanguageWithResponse request
	GetApiV3LocalizationLanguageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LocalizationLanguageResponse, error)

	// GetApiV3LogWithResponse request
	GetApiV3LogWithResponse(ctx context.Context, params *GetApiV3LogParams, reqEditors ...RequestEditorFn) (*GetApiV3LogResponse, error)

	// GetApiV3LogFileWithResponse request
	GetApiV3LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LogFileResponse, error)

	// GetApiV3LogFileUpdateWithResponse request
	GetApiV3LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LogFileUpdateResponse, error)

	// GetApiV3LogFileUpdateFilenameWithResponse request
	GetApiV3LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV3LogFileUpdateFilenameResponse, error)

	// GetApiV3LogFileFilenameWithResponse request
	GetApiV3LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV3LogFileFilenameResponse, error)

	// GetApiV3ManualimportWithResponse request
	GetApiV3ManualimportWithResponse(ctx context.Context, params *GetApiV3ManualimportParams, reqEditors ...RequestEditorFn) (*GetApiV3ManualimportResponse, error)

	// PostApiV3ManualimportWithBodyWithResponse request with any body
	PostApiV3ManualimportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ManualimportResponse, error)

	PostApiV3ManualimportWithResponse(ctx context.Context, body PostApiV3ManualimportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ManualimportResponse, error)

	// GetApiV3MediacoverMovieIdFilenameWithResponse request
	GetApiV3MediacoverMovieIdFilenameWithResponse(ctx context.Context, movieId int32, filename string, reqEditors ...RequestEditorFn) (*GetApiV3MediacoverMovieIdFilenameResponse, error)

	// GetApiV3MetadataWithResponse request
	GetApiV3MetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3MetadataResponse, error)

	// PostApiV3MetadataWithBodyWithResponse request with any body
	PostApiV3MetadataWithBodyWithResponse(ctx context.Context, params *PostApiV3MetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataResponse, error)

	PostApiV3MetadataWithResponse(ctx context.Context, params *PostApiV3MetadataParams, body PostApiV3MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataResponse, error)

	// PostApiV3MetadataActionNameWithBodyWithResponse request with any body
	PostApiV3MetadataActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataActionNameResponse, error)

	PostApiV3MetadataActionNameWithResponse(ctx context.Context, name string, body PostApiV3MetadataActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataActionNameResponse, error)

	// GetApiV3MetadataSchemaWithResponse request
	GetApiV3MetadataSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3MetadataSchemaResponse, error)

	// PostApiV3MetadataTestWithBodyWithResponse request with any body
	PostApiV3MetadataTestWithBodyWithResponse(ctx context.Context, params *PostApiV3MetadataTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestResponse, error)

	PostApiV3MetadataTestWithResponse(ctx context.Context, params *PostApiV3MetadataTestParams, body PostApiV3MetadataTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestResponse, error)

	// PostApiV3MetadataTestallWithResponse request
	PostApiV3MetadataTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestallResponse, error)

	// DeleteApiV3MetadataIdWithResponse request
	DeleteApiV3MetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3MetadataIdResponse, error)

	// GetApiV3MetadataIdWithResponse request
	GetApiV3MetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MetadataIdResponse, error)

	// PutApiV3MetadataIdWithBodyWithResponse request with any body
	PutApiV3MetadataIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MetadataIdResponse, error)

	PutApiV3MetadataIdWithResponse(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, body PutApiV3MetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MetadataIdResponse, error)

	// GetApiV3MovieWithResponse request
	GetApiV3MovieWithResponse(ctx context.Context, params *GetApiV3MovieParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieResponse, error)

	// PostApiV3MovieWithBodyWithResponse request with any body
	PostApiV3MovieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MovieResponse, error)

	PostApiV3MovieWithResponse(ctx context.Context, body PostApiV3MovieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MovieResponse, error)

	// DeleteApiV3MovieEditorWithBodyWithResponse request with any body
	DeleteApiV3MovieEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error)

	DeleteApiV3MovieEditorWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error)

	DeleteApiV3MovieEditorWithResponse(ctx context.Context, body DeleteApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error)

	// PutApiV3MovieEditorWithBodyWithResponse request with any body
	PutApiV3MovieEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error)

	PutApiV3MovieEditorWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error)

	PutApiV3MovieEditorWithResponse(ctx context.Context, body PutApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error)

	// PostApiV3MovieImportWithBodyWithResponse request with any body
	PostApiV3MovieImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MovieImportResponse, error)

	PostApiV3MovieImportWithResponse(ctx context.Context, body PostApiV3MovieImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MovieImportResponse, error)

	// GetApiV3MovieLookupWithResponse request
	GetApiV3MovieLookupWithResponse(ctx context.Context, params *GetApiV3MovieLookupParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupResponse, error)

	// GetApiV3MovieLookupImdbWithResponse request
	GetApiV3MovieLookupImdbWithResponse(ctx context.Context, params *GetApiV3MovieLookupImdbParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupImdbResponse, error)

	// GetApiV3MovieLookupTmdbWithResponse request
	GetApiV3MovieLookupTmdbWithResponse(ctx context.Context, params *GetApiV3MovieLookupTmdbParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupTmdbResponse, error)

	// DeleteApiV3MovieIdWithResponse request
	DeleteApiV3MovieIdWithResponse(ctx context.Context, id int32, params *DeleteApiV3MovieIdParams, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieIdResponse, error)

	// GetApiV3MovieIdWithResponse request
	GetApiV3MovieIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MovieIdResponse, error)

	// PutApiV3MovieIdWithBodyWithResponse request with any body
	PutApiV3MovieIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV3MovieIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MovieIdResponse, error)

	PutApiV3MovieIdWithResponse(ctx context.Context, id string, params *PutApiV3MovieIdParams, body PutApiV3MovieIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieIdResponse, error)

	// GetApiV3MoviefileWithResponse request
	GetApiV3MoviefileWithResponse(ctx context.Context, params *GetApiV3MoviefileParams, reqEditors ...RequestEditorFn) (*GetApiV3MoviefileResponse, error)

	// DeleteApiV3MoviefileBulkWithBodyWithResponse request with any body
	DeleteApiV3MoviefileBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileBulkResponse, error)

	DeleteApiV3MoviefileBulkWithResponse(ctx context.Context, body DeleteApiV3MoviefileBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileBulkResponse, error)

	// PutApiV3MoviefileEditorWithBodyWithResponse request with any body
	PutApiV3MoviefileEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileEditorResponse, error)

	PutApiV3MoviefileEditorWithResponse(ctx context.Context, body PutApiV3MoviefileEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileEditorResponse, error)

	// DeleteApiV3MoviefileIdWithResponse request
	DeleteApiV3MoviefileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileIdResponse, error)

	// GetApiV3MoviefileIdWithResponse request
	GetApiV3MoviefileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MoviefileIdResponse, error)

	// PutApiV3MoviefileIdWithBodyWithResponse request with any body
	PutApiV3MoviefileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileIdResponse, error)

	PutApiV3MoviefileIdWithResponse(ctx context.Context, id string, body PutApiV3MoviefileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileIdResponse, error)

	// GetApiV3NotificationWithResponse request
	GetApiV3NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3NotificationResponse, error)

	// PostApiV3NotificationWithBodyWithResponse request with any body
	PostApiV3NotificationWithBodyWithResponse(ctx context.Context, params *PostApiV3NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationResponse, error)

	PostApiV3NotificationWithResponse(ctx context.Context, params *PostApiV3NotificationParams, body PostApiV3NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationResponse, error)

	// PostApiV3NotificationActionNameWithBodyWithResponse request with any body
	PostApiV3NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationActionNameResponse, error)

	PostApiV3NotificationActionNameWithResponse(ctx context.Context, name string, body PostApiV3NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationActionNameResponse, error)

	// GetApiV3NotificationSchemaWithResponse request
	GetApiV3NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3NotificationSchemaResponse, error)

	// PostApiV3NotificationTestWithBodyWithResponse request with any body
	PostApiV3NotificationTestWithBodyWithResponse(ctx context.Context, params *PostApiV3NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestResponse, error)

	PostApiV3NotificationTestWithResponse(ctx context.Context, params *PostApiV3NotificationTestParams, body PostApiV3NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestResponse, error)

	// PostApiV3NotificationTestallWithResponse request
	PostApiV3NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestallResponse, error)

	// DeleteApiV3NotificationIdWithResponse request
	DeleteApiV3NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3NotificationIdResponse, error)

	// GetApiV3NotificationIdWithResponse request
	GetApiV3NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3NotificationIdResponse, error)

	// PutApiV3NotificationIdWithBodyWithResponse request with any body
	PutApiV3NotificationIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3NotificationIdResponse, error)

	PutApiV3NotificationIdWithResponse(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, body PutApiV3NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3NotificationIdResponse, error)

	// GetApiV3ParseWithResponse request
	GetApiV3ParseWithResponse(ctx context.Context, params *GetApiV3ParseParams, reqEditors ...RequestEditorFn) (*GetApiV3ParseResponse, error)

	// GetApiV3QualitydefinitionWithResponse request
	GetApiV3QualitydefinitionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualitydefinitionResponse, error)

	// PutApiV3QualitydefinitionUpdateWithBodyWithResponse request with any body
	PutApiV3QualitydefinitionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error)

	PutApiV3QualitydefinitionUpdateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error)

	PutApiV3QualitydefinitionUpdateWithResponse(ctx context.Context, body PutApiV3QualitydefinitionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error)

	// GetApiV3QualitydefinitionIdWithResponse request
	GetApiV3QualitydefinitionIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3QualitydefinitionIdResponse, error)

	// PutApiV3QualitydefinitionIdWithBodyWithResponse request with any body
	PutApiV3QualitydefinitionIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error)

	PutApiV3QualitydefinitionIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error)

	PutApiV3QualitydefinitionIdWithResponse(ctx context.Context, id string, body PutApiV3QualitydefinitionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error)

	// GetApiV3QualityprofileWithResponse request
	GetApiV3QualityprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileResponse, error)

	// PostApiV3QualityprofileWithBodyWithResponse request with any body
	PostApiV3QualityprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3QualityprofileResponse, error)

	PostApiV3QualityprofileWithResponse(ctx context.Context, body PostApiV3QualityprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3QualityprofileResponse, error)

	// GetApiV3QualityprofileSchemaWithResponse request
	GetApiV3QualityprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileSchemaResponse, error)

	// DeleteApiV3QualityprofileIdWithResponse request
	DeleteApiV3QualityprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3QualityprofileIdResponse, error)

	// GetApiV3QualityprofileIdWithResponse request
	GetApiV3QualityprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileIdResponse, error)

	// PutApiV3QualityprofileIdWithBodyWithResponse request with any body
	PutApiV3QualityprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualityprofileIdResponse, error)

	PutApiV3QualityprofileIdWithResponse(ctx context.Context, id string, body PutApiV3QualityprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualityprofileIdResponse, error)

	// GetApiV3QueueWithResponse request
	GetApiV3QueueWithResponse(ctx context.Context, params *GetApiV3QueueParams, reqEditors ...RequestEditorFn) (*GetApiV3QueueResponse, error)

	// DeleteApiV3QueueBulkWithBodyWithResponse request with any body
	DeleteApiV3QueueBulkWithBodyWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error)

	DeleteApiV3QueueBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error)

	DeleteApiV3QueueBulkWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error)

	// GetApiV3QueueDetailsWithResponse request
	GetApiV3QueueDetailsWithResponse(ctx context.Context, params *GetApiV3QueueDetailsParams, reqEditors ...RequestEditorFn) (*GetApiV3QueueDetailsResponse, error)

	// PostApiV3QueueGrabBulkWithBodyWithResponse request with any body
	PostApiV3QueueGrabBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabBulkResponse, error)

	PostApiV3QueueGrabBulkWithResponse(ctx context.Context, body PostApiV3QueueGrabBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabBulkResponse, error)

	// PostApiV3QueueGrabIdWithResponse request
	PostApiV3QueueGrabIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabIdResponse, error)

	// GetApiV3QueueStatusWithResponse request
	GetApiV3QueueStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QueueStatusResponse, error)

	// DeleteApiV3QueueIdWithResponse request
	DeleteApiV3QueueIdWithResponse(ctx context.Context, id int32, params *DeleteApiV3QueueIdParams, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueIdResponse, error)

	// GetApiV3ReleaseWithResponse request
	GetApiV3ReleaseWithResponse(ctx context.Context, params *GetApiV3ReleaseParams, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseResponse, error)

	// PostApiV3ReleaseWithBodyWithResponse request with any body
	PostApiV3ReleaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseResponse, error)

	PostApiV3ReleaseWithResponse(ctx context.Context, body PostApiV3ReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseResponse, error)

	// PostApiV3ReleasePushWithBodyWithResponse request with any body
	PostApiV3ReleasePushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleasePushResponse, error)

	PostApiV3ReleasePushWithResponse(ctx context.Context, body PostApiV3ReleasePushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleasePushResponse, error)

	// GetApiV3ReleaseprofileWithResponse request
	GetApiV3ReleaseprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseprofileResponse, error)

	// PostApiV3ReleaseprofileWithBodyWithResponse request with any body
	PostApiV3ReleaseprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error)

	PostApiV3ReleaseprofileWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error)

	PostApiV3ReleaseprofileWithResponse(ctx context.Context, body PostApiV3ReleaseprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error)

	// DeleteApiV3ReleaseprofileIdWithResponse request
	DeleteApiV3ReleaseprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ReleaseprofileIdResponse, error)

	// GetApiV3ReleaseprofileIdWithResponse request
	GetApiV3ReleaseprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseprofileIdResponse, error)

	// PutApiV3ReleaseprofileIdWithBodyWithResponse request with any body
	PutApiV3ReleaseprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error)

	PutApiV3ReleaseprofileIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error)

	PutApiV3ReleaseprofileIdWithResponse(ctx context.Context, id string, body PutApiV3ReleaseprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error)

	// GetApiV3RemotepathmappingWithResponse request
	GetApiV3RemotepathmappingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3RemotepathmappingResponse, error)

	// PostApiV3RemotepathmappingWithBodyWithResponse request with any body
	PostApiV3RemotepathmappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3RemotepathmappingResponse, error)

	PostApiV3RemotepathmappingWithResponse(ctx context.Context, body PostApiV3RemotepathmappingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3RemotepathmappingResponse, error)

	// DeleteApiV3RemotepathmappingIdWithResponse request
	DeleteApiV3RemotepathmappingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3RemotepathmappingIdResponse, error)

	// GetApiV3RemotepathmappingIdWithResponse request
	GetApiV3RemotepathmappingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3RemotepathmappingIdResponse, error)

	// PutApiV3RemotepathmappingIdWithBodyWithResponse request with any body
	PutApiV3RemotepathmappingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error)

	PutApiV3RemotepathmappingIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error)

	PutApiV3RemotepathmappingIdWithResponse(ctx context.Context, id string, body PutApiV3RemotepathmappingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error)

	// GetApiV3RenameWithResponse request
	GetApiV3RenameWithResponse(ctx context.Context, params *GetApiV3RenameParams, reqEditors ...RequestEditorFn) (*GetApiV3RenameResponse, error)

	// GetApiV3RootfolderWithResponse request
	GetApiV3RootfolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3RootfolderResponse, error)

	// PostApiV3RootfolderWithBodyWithResponse request with any body
	PostApiV3RootfolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3RootfolderResponse, error)

	PostApiV3RootfolderWithResponse(ctx context.Context, body PostApiV3RootfolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3RootfolderResponse, error)

	// DeleteApiV3RootfolderIdWithResponse request
	DeleteApiV3RootfolderIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3RootfolderIdResponse, error)

	// GetApiV3RootfolderIdWithResponse request
	GetApiV3RootfolderIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3RootfolderIdResponse, error)

	// GetApiV3SystemBackupWithResponse request
	GetApiV3SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemBackupResponse, error)

	// PostApiV3SystemBackupRestoreUploadWithResponse request
	PostApiV3SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemBackupRestoreUploadResponse, error)

	// PostApiV3SystemBackupRestoreIdWithResponse request
	PostApiV3SystemBackupRestoreIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3SystemBackupRestoreIdResponse, error)

	// DeleteApiV3SystemBackupIdWithResponse request
	DeleteApiV3SystemBackupIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3SystemBackupIdResponse, error)

	// PostApiV3SystemRestartWithResponse request
	PostApiV3SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemRestartResponse, error)

	// GetApiV3SystemRoutesWithResponse request
	GetApiV3SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemRoutesResponse, error)

	// GetApiV3SystemRoutesDuplicateWithResponse request
	GetApiV3SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemRoutesDuplicateResponse, error)

	// PostApiV3SystemShutdownWithResponse request
	PostApiV3SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemShutdownResponse, error)

	// GetApiV3SystemStatusWithResponse request
	GetApiV3SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemStatusResponse, error)

	// GetApiV3SystemTaskWithResponse request
	GetApiV3SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemTaskResponse, error)

	// GetApiV3SystemTaskIdWithResponse request
	GetApiV3SystemTaskIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3SystemTaskIdResponse, error)

	// GetApiV3TagWithResponse request
	GetApiV3TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3TagResponse, error)

	// PostApiV3TagWithBodyWithResponse request with any body
	PostApiV3TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3TagResponse, error)

	PostApiV3TagWithResponse(ctx context.Context, body PostApiV3TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3TagResponse, error)

	// GetApiV3TagDetailWithResponse request
	GetApiV3TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3TagDetailResponse, error)

	// GetApiV3TagDetailIdWithResponse request
	GetApiV3TagDetailIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3TagDetailIdResponse, error)

	// DeleteApiV3TagIdWithResponse request
	DeleteApiV3TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3TagIdResponse, error)

	// GetApiV3TagIdWithResponse request
	GetApiV3TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3TagIdResponse, error)

	// PutApiV3TagIdWithBodyWithResponse request with any body
	PutApiV3TagIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3TagIdResponse, error)

	PutApiV3TagIdWithResponse(ctx context.Context, id string, body PutApiV3TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3TagIdResponse, error)

	// GetApiV3UpdateWithResponse request
	GetApiV3UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3UpdateResponse, error)

	// GetApiV3WantedCutoffWithResponse request
	GetApiV3WantedCutoffWithResponse(ctx context.Context, params *GetApiV3WantedCutoffParams, reqEditors ...RequestEditorFn) (*GetApiV3WantedCutoffResponse, error)

	// GetApiV3WantedMissingWithResponse request
	GetApiV3WantedMissingWithResponse(ctx context.Context, params *GetApiV3WantedMissingParams, reqEditors ...RequestEditorFn) (*GetApiV3WantedMissingResponse, error)

	// GetContentPathWithResponse request
	GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error)

	// GetFeedV3CalendarRadarrIcsWithResponse request
	GetFeedV3CalendarRadarrIcsWithResponse(ctx context.Context, params *GetFeedV3CalendarRadarrIcsParams, reqEditors ...RequestEditorFn) (*GetFeedV3CalendarRadarrIcsResponse, error)

	// GetLoginWithResponse request
	GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetLogoutWithResponse request
	GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// HeadPingWithResponse request
	HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error)

	// GetPathWithResponse request
	GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error)
}

type GetApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiInfoResource
}

// Status returns HTTPResponse.Status
func (r GetApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3AlttitleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlternativeTitleResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3AlttitleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3AlttitleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3AlttitleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlternativeTitleResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3AlttitleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3AlttitleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3AutotaggingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AutoTaggingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3AutotaggingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3AutotaggingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3AutotaggingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoTaggingResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3AutotaggingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3AutotaggingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3AutotaggingSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3AutotaggingSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3AutotaggingSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3AutotaggingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3AutotaggingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3AutotaggingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3AutotaggingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoTaggingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3AutotaggingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3AutotaggingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3AutotaggingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoTaggingResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3AutotaggingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3AutotaggingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3BlocklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BlocklistResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3BlocklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3BlocklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3BlocklistBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3BlocklistBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3BlocklistBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3BlocklistMovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BlocklistResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3BlocklistMovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3BlocklistMovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3BlocklistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3BlocklistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3BlocklistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CollectionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3CollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV3CollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3CollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3CollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3CollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3CollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommandResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3CommandIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3CommandIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3CommandIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CommandIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CommandIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CommandIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigDownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigDownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigDownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigDownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigDownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigDownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigDownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigDownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigDownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigHostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigHostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigHostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigHostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigHostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigHostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigImportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigImportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigImportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigImportlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigImportlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigImportlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigImportlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigImportlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigImportlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigIndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigIndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigIndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigIndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigIndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigIndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigIndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigIndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigIndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigMediamanagementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaManagementConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigMediamanagementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigMediamanagementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigMediamanagementIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaManagementConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigMediamanagementIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigMediamanagementIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigMediamanagementIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaManagementConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigMediamanagementIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigMediamanagementIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigMetadataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigMetadataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigMetadataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigMetadataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigMetadataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigMetadataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigNamingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamingConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigNamingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigNamingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigNamingExamplesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigNamingExamplesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigNamingExamplesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigNamingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamingConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigNamingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigNamingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigNamingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamingConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigNamingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigNamingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigUiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigUiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigUiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ConfigUiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ConfigUiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ConfigUiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ConfigUiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ConfigUiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ConfigUiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CreditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3CreditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CreditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CreditIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CreditIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CreditIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CustomformatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomFormatResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CustomformatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CustomformatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3CustomformatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFormatResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3CustomformatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3CustomformatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3CustomformatBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3CustomformatBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3CustomformatBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3CustomformatBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFormatResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3CustomformatBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3CustomformatBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CustomformatSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3CustomformatSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CustomformatSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3CustomformatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3CustomformatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3CustomformatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3CustomformatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFormatResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3CustomformatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3CustomformatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3CustomformatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFormatResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3CustomformatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3CustomformatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DelayprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DelayProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DelayprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DelayprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3DelayprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DelayProfileResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3DelayprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3DelayprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3DelayprofileReorderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DelayProfileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3DelayprofileReorderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3DelayprofileReorderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3DelayprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3DelayprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3DelayprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DelayprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DelayProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DelayprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DelayprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3DelayprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DelayProfileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3DelayprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3DelayprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DiskspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DiskSpaceResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DiskspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DiskspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3DownloadclientActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3DownloadclientActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3DownloadclientActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DownloadclientSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DownloadclientSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DownloadclientSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3DownloadclientTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3DownloadclientTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3DownloadclientTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3DownloadclientTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3DownloadclientTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3DownloadclientTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ExclusionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImportListExclusionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ExclusionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ExclusionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ExclusionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListExclusionResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3ExclusionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ExclusionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3ExclusionsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3ExclusionsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3ExclusionsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ExclusionsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ExclusionsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ExclusionsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ExclusionsPagedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListExclusionResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ExclusionsPagedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ExclusionsPagedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3ExclusionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3ExclusionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3ExclusionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ExclusionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListExclusionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ExclusionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ExclusionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ExclusionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListExclusionResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ExclusionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ExclusionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ExtrafileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExtraFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ExtrafileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ExtrafileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3FilesystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3FilesystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3FilesystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3FilesystemMediafilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3FilesystemMediafilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3FilesystemMediafilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3FilesystemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3FilesystemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3FilesystemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HealthResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3HistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistoryResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3HistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3HistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3HistoryFailedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3HistoryFailedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3HistoryFailedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3HistoryMovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3HistoryMovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3HistoryMovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3HistorySinceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3HistorySinceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3HistorySinceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ImportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImportListResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ImportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ImportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ImportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3ImportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ImportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ImportlistActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ImportlistActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ImportlistActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3ImportlistBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3ImportlistBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3ImportlistBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ImportlistBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ImportlistBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ImportlistBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ImportlistMovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3ImportlistMovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ImportlistMovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ImportlistMovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ImportlistMovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ImportlistMovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ImportlistSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImportListResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ImportlistSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ImportlistSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ImportlistTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ImportlistTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ImportlistTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ImportlistTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ImportlistTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ImportlistTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3ImportlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3ImportlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3ImportlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ImportlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ImportlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ImportlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ImportlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportListResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ImportlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ImportlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3IndexerActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3IndexerActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3IndexerActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3IndexerSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3IndexerSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3IndexerSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3IndexerTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3IndexerTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3IndexerTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3IndexerTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3IndexerTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3IndexerTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3IndexerflagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerFlagResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3IndexerflagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3IndexerflagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LanguageResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LanguageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LanguageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LanguageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetApiV3LocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LocalizationLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalizationLanguageResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LocalizationLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LocalizationLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LogFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LogFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LogFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LogFileUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3LogFileUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LogFileUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LogFileUpdateFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3LogFileUpdateFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LogFileUpdateFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3LogFileFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3LogFileFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3LogFileFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ManualimportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ManualImportResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ManualimportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ManualimportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ManualimportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ManualimportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ManualimportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MediacoverMovieIdFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3MediacoverMovieIdFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MediacoverMovieIdFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MetadataResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3MetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MetadataActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3MetadataActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MetadataActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MetadataSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MetadataResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MetadataSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MetadataSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MetadataTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3MetadataTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MetadataTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MetadataTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3MetadataTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MetadataTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3MetadataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3MetadataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3MetadataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MetadataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MetadataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MetadataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3MetadataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3MetadataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3MetadataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3MovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3MovieEditorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3MovieEditorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3MovieEditorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3MovieEditorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV3MovieEditorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3MovieEditorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3MovieImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3MovieImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3MovieImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MovieLookupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MovieLookupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MovieLookupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MovieLookupImdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MovieLookupImdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MovieLookupImdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MovieLookupTmdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MovieLookupTmdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MovieLookupTmdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3MovieIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3MovieIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3MovieIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MovieIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MovieIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MovieIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3MovieIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3MovieIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3MovieIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MoviefileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MovieFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MoviefileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MoviefileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3MoviefileBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3MoviefileBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3MoviefileBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3MoviefileEditorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV3MoviefileEditorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3MoviefileEditorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3MoviefileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3MoviefileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3MoviefileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3MoviefileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3MoviefileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3MoviefileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3MoviefileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieFileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3MoviefileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3MoviefileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3NotificationActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3NotificationActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3NotificationActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3NotificationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3NotificationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3NotificationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3NotificationTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3NotificationTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3NotificationTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3NotificationTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3NotificationTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3NotificationTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ParseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParseResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ParseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ParseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QualitydefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]QualityDefinitionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QualitydefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QualitydefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3QualitydefinitionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV3QualitydefinitionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3QualitydefinitionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QualitydefinitionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityDefinitionResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QualitydefinitionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QualitydefinitionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3QualitydefinitionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityDefinitionResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3QualitydefinitionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3QualitydefinitionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QualityprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]QualityProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QualityprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QualityprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3QualityprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityProfileResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3QualityprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3QualityprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QualityprofileSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QualityprofileSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QualityprofileSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3QualityprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3QualityprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3QualityprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QualityprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QualityprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QualityprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3QualityprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QualityProfileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3QualityprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3QualityprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3QueueBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3QueueBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3QueueBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QueueDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]QueueResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QueueDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QueueDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3QueueGrabBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3QueueGrabBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3QueueGrabBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3QueueGrabIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3QueueGrabIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3QueueGrabIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3QueueStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueStatusResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3QueueStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3QueueStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3QueueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3QueueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3QueueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReleaseResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3ReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ReleasePushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReleaseResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3ReleasePushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ReleasePushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ReleaseprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReleaseProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ReleaseprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ReleaseprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3ReleaseprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseProfileResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3ReleaseprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3ReleaseprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3ReleaseprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3ReleaseprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3ReleaseprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3ReleaseprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3ReleaseprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3ReleaseprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3ReleaseprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseProfileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3ReleaseprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3ReleaseprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3RemotepathmappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RemotePathMappingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3RemotepathmappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3RemotepathmappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3RemotepathmappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemotePathMappingResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3RemotepathmappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3RemotepathmappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3RemotepathmappingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3RemotepathmappingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3RemotepathmappingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3RemotepathmappingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemotePathMappingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3RemotepathmappingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3RemotepathmappingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3RemotepathmappingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemotePathMappingResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3RemotepathmappingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3RemotepathmappingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3RenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RenameMovieResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3RenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3RenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3RootfolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RootFolderResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3RootfolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3RootfolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3RootfolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RootFolderResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3RootfolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3RootfolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3RootfolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3RootfolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3RootfolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3RootfolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RootFolderResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3RootfolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3RootfolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BackupResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3SystemBackupRestoreUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3SystemBackupRestoreUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3SystemBackupRestoreUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3SystemBackupRestoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3SystemBackupRestoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3SystemBackupRestoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3SystemBackupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3SystemBackupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3SystemBackupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3SystemRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3SystemRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3SystemRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemRoutesDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemRoutesDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemRoutesDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3SystemShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV3SystemShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3SystemShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaskResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3SystemTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3SystemTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3SystemTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV3TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PostApiV3TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV3TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3TagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3TagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3TagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3TagDetailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3TagDetailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3TagDetailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV3TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV3TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV3TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV3TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PutApiV3TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV3TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UpdateResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3WantedCutoffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3WantedCutoffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3WantedCutoffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV3WantedMissingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV3WantedMissingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV3WantedMissingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContentPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedV3CalendarRadarrIcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFeedV3CalendarRadarrIcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedV3CalendarRadarrIcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r HeadPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiWithResponse request returning *GetApiResponse
func (c *ClientWithResponses) GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error) {
	rsp, err := c.GetApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResponse(rsp)
}

// GetApiV3AlttitleWithResponse request returning *GetApiV3AlttitleResponse
func (c *ClientWithResponses) GetApiV3AlttitleWithResponse(ctx context.Context, params *GetApiV3AlttitleParams, reqEditors ...RequestEditorFn) (*GetApiV3AlttitleResponse, error) {
	rsp, err := c.GetApiV3Alttitle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3AlttitleResponse(rsp)
}

// GetApiV3AlttitleIdWithResponse request returning *GetApiV3AlttitleIdResponse
func (c *ClientWithResponses) GetApiV3AlttitleIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3AlttitleIdResponse, error) {
	rsp, err := c.GetApiV3AlttitleId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3AlttitleIdResponse(rsp)
}

// GetApiV3AutotaggingWithResponse request returning *GetApiV3AutotaggingResponse
func (c *ClientWithResponses) GetApiV3AutotaggingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingResponse, error) {
	rsp, err := c.GetApiV3Autotagging(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3AutotaggingResponse(rsp)
}

// PostApiV3AutotaggingWithBodyWithResponse request with arbitrary body returning *PostApiV3AutotaggingResponse
func (c *ClientWithResponses) PostApiV3AutotaggingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3AutotaggingResponse, error) {
	rsp, err := c.PostApiV3AutotaggingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3AutotaggingResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3AutotaggingWithResponse(ctx context.Context, body PostApiV3AutotaggingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3AutotaggingResponse, error) {
	rsp, err := c.PostApiV3Autotagging(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3AutotaggingResponse(rsp)
}

// GetApiV3AutotaggingSchemaWithResponse request returning *GetApiV3AutotaggingSchemaResponse
func (c *ClientWithResponses) GetApiV3AutotaggingSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingSchemaResponse, error) {
	rsp, err := c.GetApiV3AutotaggingSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3AutotaggingSchemaResponse(rsp)
}

// DeleteApiV3AutotaggingIdWithResponse request returning *DeleteApiV3AutotaggingIdResponse
func (c *ClientWithResponses) DeleteApiV3AutotaggingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3AutotaggingIdResponse, error) {
	rsp, err := c.DeleteApiV3AutotaggingId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3AutotaggingIdResponse(rsp)
}

// GetApiV3AutotaggingIdWithResponse request returning *GetApiV3AutotaggingIdResponse
func (c *ClientWithResponses) GetApiV3AutotaggingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3AutotaggingIdResponse, error) {
	rsp, err := c.GetApiV3AutotaggingId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3AutotaggingIdResponse(rsp)
}

// PutApiV3AutotaggingIdWithBodyWithResponse request with arbitrary body returning *PutApiV3AutotaggingIdResponse
func (c *ClientWithResponses) PutApiV3AutotaggingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3AutotaggingIdResponse, error) {
	rsp, err := c.PutApiV3AutotaggingIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3AutotaggingIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3AutotaggingIdWithResponse(ctx context.Context, id string, body PutApiV3AutotaggingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3AutotaggingIdResponse, error) {
	rsp, err := c.PutApiV3AutotaggingId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3AutotaggingIdResponse(rsp)
}

// GetApiV3BlocklistWithResponse request returning *GetApiV3BlocklistResponse
func (c *ClientWithResponses) GetApiV3BlocklistWithResponse(ctx context.Context, params *GetApiV3BlocklistParams, reqEditors ...RequestEditorFn) (*GetApiV3BlocklistResponse, error) {
	rsp, err := c.GetApiV3Blocklist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3BlocklistResponse(rsp)
}

// DeleteApiV3BlocklistBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3BlocklistBulkResponse
func (c *ClientWithResponses) DeleteApiV3BlocklistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error) {
	rsp, err := c.DeleteApiV3BlocklistBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3BlocklistBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3BlocklistBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3BlocklistBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error) {
	rsp, err := c.DeleteApiV3BlocklistBulkWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3BlocklistBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3BlocklistBulkWithResponse(ctx context.Context, body DeleteApiV3BlocklistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistBulkResponse, error) {
	rsp, err := c.DeleteApiV3BlocklistBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3BlocklistBulkResponse(rsp)
}

// GetApiV3BlocklistMovieWithResponse request returning *GetApiV3BlocklistMovieResponse
func (c *ClientWithResponses) GetApiV3BlocklistMovieWithResponse(ctx context.Context, params *GetApiV3BlocklistMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3BlocklistMovieResponse, error) {
	rsp, err := c.GetApiV3BlocklistMovie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3BlocklistMovieResponse(rsp)
}

// DeleteApiV3BlocklistIdWithResponse request returning *DeleteApiV3BlocklistIdResponse
func (c *ClientWithResponses) DeleteApiV3BlocklistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3BlocklistIdResponse, error) {
	rsp, err := c.DeleteApiV3BlocklistId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3BlocklistIdResponse(rsp)
}

// GetApiV3CalendarWithResponse request returning *GetApiV3CalendarResponse
func (c *ClientWithResponses) GetApiV3CalendarWithResponse(ctx context.Context, params *GetApiV3CalendarParams, reqEditors ...RequestEditorFn) (*GetApiV3CalendarResponse, error) {
	rsp, err := c.GetApiV3Calendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CalendarResponse(rsp)
}

// GetApiV3CollectionWithResponse request returning *GetApiV3CollectionResponse
func (c *ClientWithResponses) GetApiV3CollectionWithResponse(ctx context.Context, params *GetApiV3CollectionParams, reqEditors ...RequestEditorFn) (*GetApiV3CollectionResponse, error) {
	rsp, err := c.GetApiV3Collection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CollectionResponse(rsp)
}

// PutApiV3CollectionWithBodyWithResponse request with arbitrary body returning *PutApiV3CollectionResponse
func (c *ClientWithResponses) PutApiV3CollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CollectionResponse, error) {
	rsp, err := c.PutApiV3CollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CollectionResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3CollectionWithResponse(ctx context.Context, body PutApiV3CollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CollectionResponse, error) {
	rsp, err := c.PutApiV3Collection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CollectionResponse(rsp)
}

// GetApiV3CollectionIdWithResponse request returning *GetApiV3CollectionIdResponse
func (c *ClientWithResponses) GetApiV3CollectionIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CollectionIdResponse, error) {
	rsp, err := c.GetApiV3CollectionId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CollectionIdResponse(rsp)
}

// PutApiV3CollectionIdWithBodyWithResponse request with arbitrary body returning *PutApiV3CollectionIdResponse
func (c *ClientWithResponses) PutApiV3CollectionIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CollectionIdResponse, error) {
	rsp, err := c.PutApiV3CollectionIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CollectionIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3CollectionIdWithResponse(ctx context.Context, id string, body PutApiV3CollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CollectionIdResponse, error) {
	rsp, err := c.PutApiV3CollectionId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CollectionIdResponse(rsp)
}

// GetApiV3CommandWithResponse request returning *GetApiV3CommandResponse
func (c *ClientWithResponses) GetApiV3CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CommandResponse, error) {
	rsp, err := c.GetApiV3Command(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CommandResponse(rsp)
}

// PostApiV3CommandWithBodyWithResponse request with arbitrary body returning *PostApiV3CommandResponse
func (c *ClientWithResponses) PostApiV3CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CommandResponse, error) {
	rsp, err := c.PostApiV3CommandWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CommandResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3CommandWithResponse(ctx context.Context, body PostApiV3CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CommandResponse, error) {
	rsp, err := c.PostApiV3Command(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CommandResponse(rsp)
}

// DeleteApiV3CommandIdWithResponse request returning *DeleteApiV3CommandIdResponse
func (c *ClientWithResponses) DeleteApiV3CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CommandIdResponse, error) {
	rsp, err := c.DeleteApiV3CommandId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3CommandIdResponse(rsp)
}

// GetApiV3CommandIdWithResponse request returning *GetApiV3CommandIdResponse
func (c *ClientWithResponses) GetApiV3CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CommandIdResponse, error) {
	rsp, err := c.GetApiV3CommandId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CommandIdResponse(rsp)
}

// GetApiV3ConfigDownloadclientWithResponse request returning *GetApiV3ConfigDownloadclientResponse
func (c *ClientWithResponses) GetApiV3ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigDownloadclientResponse, error) {
	rsp, err := c.GetApiV3ConfigDownloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigDownloadclientResponse(rsp)
}

// GetApiV3ConfigDownloadclientIdWithResponse request returning *GetApiV3ConfigDownloadclientIdResponse
func (c *ClientWithResponses) GetApiV3ConfigDownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigDownloadclientIdResponse, error) {
	rsp, err := c.GetApiV3ConfigDownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigDownloadclientIdResponse(rsp)
}

// PutApiV3ConfigDownloadclientIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigDownloadclientIdResponse
func (c *ClientWithResponses) PutApiV3ConfigDownloadclientIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigDownloadclientIdResponse, error) {
	rsp, err := c.PutApiV3ConfigDownloadclientIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigDownloadclientIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigDownloadclientIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigDownloadclientIdResponse, error) {
	rsp, err := c.PutApiV3ConfigDownloadclientId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigDownloadclientIdResponse(rsp)
}

// GetApiV3ConfigHostWithResponse request returning *GetApiV3ConfigHostResponse
func (c *ClientWithResponses) GetApiV3ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigHostResponse, error) {
	rsp, err := c.GetApiV3ConfigHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigHostResponse(rsp)
}

// GetApiV3ConfigHostIdWithResponse request returning *GetApiV3ConfigHostIdResponse
func (c *ClientWithResponses) GetApiV3ConfigHostIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigHostIdResponse, error) {
	rsp, err := c.GetApiV3ConfigHostId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigHostIdResponse(rsp)
}

// PutApiV3ConfigHostIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigHostIdResponse
func (c *ClientWithResponses) PutApiV3ConfigHostIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error) {
	rsp, err := c.PutApiV3ConfigHostIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigHostIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigHostIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ConfigHostIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error) {
	rsp, err := c.PutApiV3ConfigHostIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigHostIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigHostIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigHostIdResponse, error) {
	rsp, err := c.PutApiV3ConfigHostId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigHostIdResponse(rsp)
}

// GetApiV3ConfigImportlistWithResponse request returning *GetApiV3ConfigImportlistResponse
func (c *ClientWithResponses) GetApiV3ConfigImportlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigImportlistResponse, error) {
	rsp, err := c.GetApiV3ConfigImportlist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigImportlistResponse(rsp)
}

// GetApiV3ConfigImportlistIdWithResponse request returning *GetApiV3ConfigImportlistIdResponse
func (c *ClientWithResponses) GetApiV3ConfigImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigImportlistIdResponse, error) {
	rsp, err := c.GetApiV3ConfigImportlistId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigImportlistIdResponse(rsp)
}

// PutApiV3ConfigImportlistIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigImportlistIdResponse
func (c *ClientWithResponses) PutApiV3ConfigImportlistIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigImportlistIdResponse, error) {
	rsp, err := c.PutApiV3ConfigImportlistIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigImportlistIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigImportlistIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigImportlistIdResponse, error) {
	rsp, err := c.PutApiV3ConfigImportlistId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigImportlistIdResponse(rsp)
}

// GetApiV3ConfigIndexerWithResponse request returning *GetApiV3ConfigIndexerResponse
func (c *ClientWithResponses) GetApiV3ConfigIndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigIndexerResponse, error) {
	rsp, err := c.GetApiV3ConfigIndexer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigIndexerResponse(rsp)
}

// GetApiV3ConfigIndexerIdWithResponse request returning *GetApiV3ConfigIndexerIdResponse
func (c *ClientWithResponses) GetApiV3ConfigIndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigIndexerIdResponse, error) {
	rsp, err := c.GetApiV3ConfigIndexerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigIndexerIdResponse(rsp)
}

// PutApiV3ConfigIndexerIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigIndexerIdResponse
func (c *ClientWithResponses) PutApiV3ConfigIndexerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigIndexerIdResponse, error) {
	rsp, err := c.PutApiV3ConfigIndexerIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigIndexerIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigIndexerIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigIndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigIndexerIdResponse, error) {
	rsp, err := c.PutApiV3ConfigIndexerId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigIndexerIdResponse(rsp)
}

// GetApiV3ConfigMediamanagementWithResponse request returning *GetApiV3ConfigMediamanagementResponse
func (c *ClientWithResponses) GetApiV3ConfigMediamanagementWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMediamanagementResponse, error) {
	rsp, err := c.GetApiV3ConfigMediamanagement(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigMediamanagementResponse(rsp)
}

// GetApiV3ConfigMediamanagementIdWithResponse request returning *GetApiV3ConfigMediamanagementIdResponse
func (c *ClientWithResponses) GetApiV3ConfigMediamanagementIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMediamanagementIdResponse, error) {
	rsp, err := c.GetApiV3ConfigMediamanagementId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigMediamanagementIdResponse(rsp)
}

// PutApiV3ConfigMediamanagementIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigMediamanagementIdResponse
func (c *ClientWithResponses) PutApiV3ConfigMediamanagementIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMediamanagementIdResponse, error) {
	rsp, err := c.PutApiV3ConfigMediamanagementIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigMediamanagementIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigMediamanagementIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigMediamanagementIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMediamanagementIdResponse, error) {
	rsp, err := c.PutApiV3ConfigMediamanagementId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigMediamanagementIdResponse(rsp)
}

// GetApiV3ConfigMetadataWithResponse request returning *GetApiV3ConfigMetadataResponse
func (c *ClientWithResponses) GetApiV3ConfigMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMetadataResponse, error) {
	rsp, err := c.GetApiV3ConfigMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigMetadataResponse(rsp)
}

// GetApiV3ConfigMetadataIdWithResponse request returning *GetApiV3ConfigMetadataIdResponse
func (c *ClientWithResponses) GetApiV3ConfigMetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigMetadataIdResponse, error) {
	rsp, err := c.GetApiV3ConfigMetadataId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigMetadataIdResponse(rsp)
}

// PutApiV3ConfigMetadataIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigMetadataIdResponse
func (c *ClientWithResponses) PutApiV3ConfigMetadataIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMetadataIdResponse, error) {
	rsp, err := c.PutApiV3ConfigMetadataIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigMetadataIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigMetadataIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigMetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigMetadataIdResponse, error) {
	rsp, err := c.PutApiV3ConfigMetadataId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigMetadataIdResponse(rsp)
}

// GetApiV3ConfigNamingWithResponse request returning *GetApiV3ConfigNamingResponse
func (c *ClientWithResponses) GetApiV3ConfigNamingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingResponse, error) {
	rsp, err := c.GetApiV3ConfigNaming(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigNamingResponse(rsp)
}

// GetApiV3ConfigNamingExamplesWithResponse request returning *GetApiV3ConfigNamingExamplesResponse
func (c *ClientWithResponses) GetApiV3ConfigNamingExamplesWithResponse(ctx context.Context, params *GetApiV3ConfigNamingExamplesParams, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingExamplesResponse, error) {
	rsp, err := c.GetApiV3ConfigNamingExamples(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigNamingExamplesResponse(rsp)
}

// GetApiV3ConfigNamingIdWithResponse request returning *GetApiV3ConfigNamingIdResponse
func (c *ClientWithResponses) GetApiV3ConfigNamingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigNamingIdResponse, error) {
	rsp, err := c.GetApiV3ConfigNamingId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigNamingIdResponse(rsp)
}

// PutApiV3ConfigNamingIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigNamingIdResponse
func (c *ClientWithResponses) PutApiV3ConfigNamingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error) {
	rsp, err := c.PutApiV3ConfigNamingIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigNamingIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigNamingIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ConfigNamingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error) {
	rsp, err := c.PutApiV3ConfigNamingIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigNamingIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigNamingIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigNamingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigNamingIdResponse, error) {
	rsp, err := c.PutApiV3ConfigNamingId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigNamingIdResponse(rsp)
}

// GetApiV3ConfigUiWithResponse request returning *GetApiV3ConfigUiResponse
func (c *ClientWithResponses) GetApiV3ConfigUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ConfigUiResponse, error) {
	rsp, err := c.GetApiV3ConfigUi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigUiResponse(rsp)
}

// GetApiV3ConfigUiIdWithResponse request returning *GetApiV3ConfigUiIdResponse
func (c *ClientWithResponses) GetApiV3ConfigUiIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ConfigUiIdResponse, error) {
	rsp, err := c.GetApiV3ConfigUiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ConfigUiIdResponse(rsp)
}

// PutApiV3ConfigUiIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ConfigUiIdResponse
func (c *ClientWithResponses) PutApiV3ConfigUiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ConfigUiIdResponse, error) {
	rsp, err := c.PutApiV3ConfigUiIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigUiIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ConfigUiIdWithResponse(ctx context.Context, id string, body PutApiV3ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ConfigUiIdResponse, error) {
	rsp, err := c.PutApiV3ConfigUiId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ConfigUiIdResponse(rsp)
}

// GetApiV3CreditWithResponse request returning *GetApiV3CreditResponse
func (c *ClientWithResponses) GetApiV3CreditWithResponse(ctx context.Context, params *GetApiV3CreditParams, reqEditors ...RequestEditorFn) (*GetApiV3CreditResponse, error) {
	rsp, err := c.GetApiV3Credit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CreditResponse(rsp)
}

// GetApiV3CreditIdWithResponse request returning *GetApiV3CreditIdResponse
func (c *ClientWithResponses) GetApiV3CreditIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CreditIdResponse, error) {
	rsp, err := c.GetApiV3CreditId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CreditIdResponse(rsp)
}

// GetApiV3CustomfilterWithResponse request returning *GetApiV3CustomfilterResponse
func (c *ClientWithResponses) GetApiV3CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomfilterResponse, error) {
	rsp, err := c.GetApiV3Customfilter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CustomfilterResponse(rsp)
}

// PostApiV3CustomfilterWithBodyWithResponse request with arbitrary body returning *PostApiV3CustomfilterResponse
func (c *ClientWithResponses) PostApiV3CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CustomfilterResponse, error) {
	rsp, err := c.PostApiV3CustomfilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CustomfilterResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3CustomfilterWithResponse(ctx context.Context, body PostApiV3CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CustomfilterResponse, error) {
	rsp, err := c.PostApiV3Customfilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CustomfilterResponse(rsp)
}

// DeleteApiV3CustomfilterIdWithResponse request returning *DeleteApiV3CustomfilterIdResponse
func (c *ClientWithResponses) DeleteApiV3CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomfilterIdResponse, error) {
	rsp, err := c.DeleteApiV3CustomfilterId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3CustomfilterIdResponse(rsp)
}

// GetApiV3CustomfilterIdWithResponse request returning *GetApiV3CustomfilterIdResponse
func (c *ClientWithResponses) GetApiV3CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CustomfilterIdResponse, error) {
	rsp, err := c.GetApiV3CustomfilterId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CustomfilterIdResponse(rsp)
}

// PutApiV3CustomfilterIdWithBodyWithResponse request with arbitrary body returning *PutApiV3CustomfilterIdResponse
func (c *ClientWithResponses) PutApiV3CustomfilterIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomfilterIdResponse, error) {
	rsp, err := c.PutApiV3CustomfilterIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomfilterIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3CustomfilterIdWithResponse(ctx context.Context, id string, body PutApiV3CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomfilterIdResponse, error) {
	rsp, err := c.PutApiV3CustomfilterId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomfilterIdResponse(rsp)
}

// GetApiV3CustomformatWithResponse request returning *GetApiV3CustomformatResponse
func (c *ClientWithResponses) GetApiV3CustomformatWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatResponse, error) {
	rsp, err := c.GetApiV3Customformat(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CustomformatResponse(rsp)
}

// PostApiV3CustomformatWithBodyWithResponse request with arbitrary body returning *PostApiV3CustomformatResponse
func (c *ClientWithResponses) PostApiV3CustomformatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3CustomformatResponse, error) {
	rsp, err := c.PostApiV3CustomformatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CustomformatResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3CustomformatWithResponse(ctx context.Context, body PostApiV3CustomformatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3CustomformatResponse, error) {
	rsp, err := c.PostApiV3Customformat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3CustomformatResponse(rsp)
}

// DeleteApiV3CustomformatBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3CustomformatBulkResponse
func (c *ClientWithResponses) DeleteApiV3CustomformatBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatBulkResponse, error) {
	rsp, err := c.DeleteApiV3CustomformatBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3CustomformatBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3CustomformatBulkWithResponse(ctx context.Context, body DeleteApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatBulkResponse, error) {
	rsp, err := c.DeleteApiV3CustomformatBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3CustomformatBulkResponse(rsp)
}

// PutApiV3CustomformatBulkWithBodyWithResponse request with arbitrary body returning *PutApiV3CustomformatBulkResponse
func (c *ClientWithResponses) PutApiV3CustomformatBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatBulkResponse, error) {
	rsp, err := c.PutApiV3CustomformatBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomformatBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3CustomformatBulkWithResponse(ctx context.Context, body PutApiV3CustomformatBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatBulkResponse, error) {
	rsp, err := c.PutApiV3CustomformatBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomformatBulkResponse(rsp)
}

// GetApiV3CustomformatSchemaWithResponse request returning *GetApiV3CustomformatSchemaResponse
func (c *ClientWithResponses) GetApiV3CustomformatSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatSchemaResponse, error) {
	rsp, err := c.GetApiV3CustomformatSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CustomformatSchemaResponse(rsp)
}

// DeleteApiV3CustomformatIdWithResponse request returning *DeleteApiV3CustomformatIdResponse
func (c *ClientWithResponses) DeleteApiV3CustomformatIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3CustomformatIdResponse, error) {
	rsp, err := c.DeleteApiV3CustomformatId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3CustomformatIdResponse(rsp)
}

// GetApiV3CustomformatIdWithResponse request returning *GetApiV3CustomformatIdResponse
func (c *ClientWithResponses) GetApiV3CustomformatIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3CustomformatIdResponse, error) {
	rsp, err := c.GetApiV3CustomformatId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3CustomformatIdResponse(rsp)
}

// PutApiV3CustomformatIdWithBodyWithResponse request with arbitrary body returning *PutApiV3CustomformatIdResponse
func (c *ClientWithResponses) PutApiV3CustomformatIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatIdResponse, error) {
	rsp, err := c.PutApiV3CustomformatIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomformatIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3CustomformatIdWithResponse(ctx context.Context, id string, body PutApiV3CustomformatIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3CustomformatIdResponse, error) {
	rsp, err := c.PutApiV3CustomformatId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3CustomformatIdResponse(rsp)
}

// GetApiV3DelayprofileWithResponse request returning *GetApiV3DelayprofileResponse
func (c *ClientWithResponses) GetApiV3DelayprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DelayprofileResponse, error) {
	rsp, err := c.GetApiV3Delayprofile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DelayprofileResponse(rsp)
}

// PostApiV3DelayprofileWithBodyWithResponse request with arbitrary body returning *PostApiV3DelayprofileResponse
func (c *ClientWithResponses) PostApiV3DelayprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DelayprofileResponse, error) {
	rsp, err := c.PostApiV3DelayprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DelayprofileResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3DelayprofileWithResponse(ctx context.Context, body PostApiV3DelayprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DelayprofileResponse, error) {
	rsp, err := c.PostApiV3Delayprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DelayprofileResponse(rsp)
}

// PutApiV3DelayprofileReorderIdWithResponse request returning *PutApiV3DelayprofileReorderIdResponse
func (c *ClientWithResponses) PutApiV3DelayprofileReorderIdWithResponse(ctx context.Context, id int32, params *PutApiV3DelayprofileReorderIdParams, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileReorderIdResponse, error) {
	rsp, err := c.PutApiV3DelayprofileReorderId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DelayprofileReorderIdResponse(rsp)
}

// DeleteApiV3DelayprofileIdWithResponse request returning *DeleteApiV3DelayprofileIdResponse
func (c *ClientWithResponses) DeleteApiV3DelayprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3DelayprofileIdResponse, error) {
	rsp, err := c.DeleteApiV3DelayprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3DelayprofileIdResponse(rsp)
}

// GetApiV3DelayprofileIdWithResponse request returning *GetApiV3DelayprofileIdResponse
func (c *ClientWithResponses) GetApiV3DelayprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3DelayprofileIdResponse, error) {
	rsp, err := c.GetApiV3DelayprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DelayprofileIdResponse(rsp)
}

// PutApiV3DelayprofileIdWithBodyWithResponse request with arbitrary body returning *PutApiV3DelayprofileIdResponse
func (c *ClientWithResponses) PutApiV3DelayprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileIdResponse, error) {
	rsp, err := c.PutApiV3DelayprofileIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DelayprofileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3DelayprofileIdWithResponse(ctx context.Context, id string, body PutApiV3DelayprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DelayprofileIdResponse, error) {
	rsp, err := c.PutApiV3DelayprofileId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DelayprofileIdResponse(rsp)
}

// GetApiV3DiskspaceWithResponse request returning *GetApiV3DiskspaceResponse
func (c *ClientWithResponses) GetApiV3DiskspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DiskspaceResponse, error) {
	rsp, err := c.GetApiV3Diskspace(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DiskspaceResponse(rsp)
}

// GetApiV3DownloadclientWithResponse request returning *GetApiV3DownloadclientResponse
func (c *ClientWithResponses) GetApiV3DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientResponse, error) {
	rsp, err := c.GetApiV3Downloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DownloadclientResponse(rsp)
}

// PostApiV3DownloadclientWithBodyWithResponse request with arbitrary body returning *PostApiV3DownloadclientResponse
func (c *ClientWithResponses) PostApiV3DownloadclientWithBodyWithResponse(ctx context.Context, params *PostApiV3DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientResponse, error) {
	rsp, err := c.PostApiV3DownloadclientWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3DownloadclientWithResponse(ctx context.Context, params *PostApiV3DownloadclientParams, body PostApiV3DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientResponse, error) {
	rsp, err := c.PostApiV3Downloadclient(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientResponse(rsp)
}

// PostApiV3DownloadclientActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV3DownloadclientActionNameResponse
func (c *ClientWithResponses) PostApiV3DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientActionNameResponse, error) {
	rsp, err := c.PostApiV3DownloadclientActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostApiV3DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientActionNameResponse, error) {
	rsp, err := c.PostApiV3DownloadclientActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientActionNameResponse(rsp)
}

// DeleteApiV3DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3DownloadclientBulkResponse
func (c *ClientWithResponses) DeleteApiV3DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteApiV3DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3DownloadclientBulkWithResponse(ctx context.Context, body DeleteApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteApiV3DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3DownloadclientBulkResponse(rsp)
}

// PutApiV3DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *PutApiV3DownloadclientBulkResponse
func (c *ClientWithResponses) PutApiV3DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientBulkResponse, error) {
	rsp, err := c.PutApiV3DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3DownloadclientBulkWithResponse(ctx context.Context, body PutApiV3DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientBulkResponse, error) {
	rsp, err := c.PutApiV3DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DownloadclientBulkResponse(rsp)
}

// GetApiV3DownloadclientSchemaWithResponse request returning *GetApiV3DownloadclientSchemaResponse
func (c *ClientWithResponses) GetApiV3DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientSchemaResponse, error) {
	rsp, err := c.GetApiV3DownloadclientSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DownloadclientSchemaResponse(rsp)
}

// PostApiV3DownloadclientTestWithBodyWithResponse request with arbitrary body returning *PostApiV3DownloadclientTestResponse
func (c *ClientWithResponses) PostApiV3DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostApiV3DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestResponse, error) {
	rsp, err := c.PostApiV3DownloadclientTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3DownloadclientTestWithResponse(ctx context.Context, params *PostApiV3DownloadclientTestParams, body PostApiV3DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestResponse, error) {
	rsp, err := c.PostApiV3DownloadclientTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientTestResponse(rsp)
}

// PostApiV3DownloadclientTestallWithResponse request returning *PostApiV3DownloadclientTestallResponse
func (c *ClientWithResponses) PostApiV3DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3DownloadclientTestallResponse, error) {
	rsp, err := c.PostApiV3DownloadclientTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3DownloadclientTestallResponse(rsp)
}

// DeleteApiV3DownloadclientIdWithResponse request returning *DeleteApiV3DownloadclientIdResponse
func (c *ClientWithResponses) DeleteApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3DownloadclientIdResponse, error) {
	rsp, err := c.DeleteApiV3DownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3DownloadclientIdResponse(rsp)
}

// GetApiV3DownloadclientIdWithResponse request returning *GetApiV3DownloadclientIdResponse
func (c *ClientWithResponses) GetApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3DownloadclientIdResponse, error) {
	rsp, err := c.GetApiV3DownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3DownloadclientIdResponse(rsp)
}

// PutApiV3DownloadclientIdWithBodyWithResponse request with arbitrary body returning *PutApiV3DownloadclientIdResponse
func (c *ClientWithResponses) PutApiV3DownloadclientIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientIdResponse, error) {
	rsp, err := c.PutApiV3DownloadclientIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DownloadclientIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3DownloadclientIdWithResponse(ctx context.Context, id int32, params *PutApiV3DownloadclientIdParams, body PutApiV3DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3DownloadclientIdResponse, error) {
	rsp, err := c.PutApiV3DownloadclientId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3DownloadclientIdResponse(rsp)
}

// GetApiV3ExclusionsWithResponse request returning *GetApiV3ExclusionsResponse
func (c *ClientWithResponses) GetApiV3ExclusionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsResponse, error) {
	rsp, err := c.GetApiV3Exclusions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ExclusionsResponse(rsp)
}

// PostApiV3ExclusionsWithBodyWithResponse request with arbitrary body returning *PostApiV3ExclusionsResponse
func (c *ClientWithResponses) PostApiV3ExclusionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsResponse, error) {
	rsp, err := c.PostApiV3ExclusionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ExclusionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ExclusionsWithResponse(ctx context.Context, body PostApiV3ExclusionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsResponse, error) {
	rsp, err := c.PostApiV3Exclusions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ExclusionsResponse(rsp)
}

// DeleteApiV3ExclusionsBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3ExclusionsBulkResponse
func (c *ClientWithResponses) DeleteApiV3ExclusionsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.DeleteApiV3ExclusionsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ExclusionsBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.DeleteApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ExclusionsBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3ExclusionsBulkWithResponse(ctx context.Context, body DeleteApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.DeleteApiV3ExclusionsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ExclusionsBulkResponse(rsp)
}

// PostApiV3ExclusionsBulkWithBodyWithResponse request with arbitrary body returning *PostApiV3ExclusionsBulkResponse
func (c *ClientWithResponses) PostApiV3ExclusionsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.PostApiV3ExclusionsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ExclusionsBulkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ExclusionsBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.PostApiV3ExclusionsBulkWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ExclusionsBulkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ExclusionsBulkWithResponse(ctx context.Context, body PostApiV3ExclusionsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ExclusionsBulkResponse, error) {
	rsp, err := c.PostApiV3ExclusionsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ExclusionsBulkResponse(rsp)
}

// GetApiV3ExclusionsPagedWithResponse request returning *GetApiV3ExclusionsPagedResponse
func (c *ClientWithResponses) GetApiV3ExclusionsPagedWithResponse(ctx context.Context, params *GetApiV3ExclusionsPagedParams, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsPagedResponse, error) {
	rsp, err := c.GetApiV3ExclusionsPaged(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ExclusionsPagedResponse(rsp)
}

// DeleteApiV3ExclusionsIdWithResponse request returning *DeleteApiV3ExclusionsIdResponse
func (c *ClientWithResponses) DeleteApiV3ExclusionsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ExclusionsIdResponse, error) {
	rsp, err := c.DeleteApiV3ExclusionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ExclusionsIdResponse(rsp)
}

// GetApiV3ExclusionsIdWithResponse request returning *GetApiV3ExclusionsIdResponse
func (c *ClientWithResponses) GetApiV3ExclusionsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ExclusionsIdResponse, error) {
	rsp, err := c.GetApiV3ExclusionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ExclusionsIdResponse(rsp)
}

// PutApiV3ExclusionsIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ExclusionsIdResponse
func (c *ClientWithResponses) PutApiV3ExclusionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ExclusionsIdResponse, error) {
	rsp, err := c.PutApiV3ExclusionsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ExclusionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ExclusionsIdWithResponse(ctx context.Context, id string, body PutApiV3ExclusionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ExclusionsIdResponse, error) {
	rsp, err := c.PutApiV3ExclusionsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ExclusionsIdResponse(rsp)
}

// GetApiV3ExtrafileWithResponse request returning *GetApiV3ExtrafileResponse
func (c *ClientWithResponses) GetApiV3ExtrafileWithResponse(ctx context.Context, params *GetApiV3ExtrafileParams, reqEditors ...RequestEditorFn) (*GetApiV3ExtrafileResponse, error) {
	rsp, err := c.GetApiV3Extrafile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ExtrafileResponse(rsp)
}

// GetApiV3FilesystemWithResponse request returning *GetApiV3FilesystemResponse
func (c *ClientWithResponses) GetApiV3FilesystemWithResponse(ctx context.Context, params *GetApiV3FilesystemParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemResponse, error) {
	rsp, err := c.GetApiV3Filesystem(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3FilesystemResponse(rsp)
}

// GetApiV3FilesystemMediafilesWithResponse request returning *GetApiV3FilesystemMediafilesResponse
func (c *ClientWithResponses) GetApiV3FilesystemMediafilesWithResponse(ctx context.Context, params *GetApiV3FilesystemMediafilesParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemMediafilesResponse, error) {
	rsp, err := c.GetApiV3FilesystemMediafiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3FilesystemMediafilesResponse(rsp)
}

// GetApiV3FilesystemTypeWithResponse request returning *GetApiV3FilesystemTypeResponse
func (c *ClientWithResponses) GetApiV3FilesystemTypeWithResponse(ctx context.Context, params *GetApiV3FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetApiV3FilesystemTypeResponse, error) {
	rsp, err := c.GetApiV3FilesystemType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3FilesystemTypeResponse(rsp)
}

// GetApiV3HealthWithResponse request returning *GetApiV3HealthResponse
func (c *ClientWithResponses) GetApiV3HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3HealthResponse, error) {
	rsp, err := c.GetApiV3Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3HealthResponse(rsp)
}

// GetApiV3HistoryWithResponse request returning *GetApiV3HistoryResponse
func (c *ClientWithResponses) GetApiV3HistoryWithResponse(ctx context.Context, params *GetApiV3HistoryParams, reqEditors ...RequestEditorFn) (*GetApiV3HistoryResponse, error) {
	rsp, err := c.GetApiV3History(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3HistoryResponse(rsp)
}

// PostApiV3HistoryFailedIdWithResponse request returning *PostApiV3HistoryFailedIdResponse
func (c *ClientWithResponses) PostApiV3HistoryFailedIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3HistoryFailedIdResponse, error) {
	rsp, err := c.PostApiV3HistoryFailedId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3HistoryFailedIdResponse(rsp)
}

// GetApiV3HistoryMovieWithResponse request returning *GetApiV3HistoryMovieResponse
func (c *ClientWithResponses) GetApiV3HistoryMovieWithResponse(ctx context.Context, params *GetApiV3HistoryMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3HistoryMovieResponse, error) {
	rsp, err := c.GetApiV3HistoryMovie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3HistoryMovieResponse(rsp)
}

// GetApiV3HistorySinceWithResponse request returning *GetApiV3HistorySinceResponse
func (c *ClientWithResponses) GetApiV3HistorySinceWithResponse(ctx context.Context, params *GetApiV3HistorySinceParams, reqEditors ...RequestEditorFn) (*GetApiV3HistorySinceResponse, error) {
	rsp, err := c.GetApiV3HistorySince(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3HistorySinceResponse(rsp)
}

// GetApiV3ImportlistWithResponse request returning *GetApiV3ImportlistResponse
func (c *ClientWithResponses) GetApiV3ImportlistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistResponse, error) {
	rsp, err := c.GetApiV3Importlist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ImportlistResponse(rsp)
}

// PostApiV3ImportlistWithBodyWithResponse request with arbitrary body returning *PostApiV3ImportlistResponse
func (c *ClientWithResponses) PostApiV3ImportlistWithBodyWithResponse(ctx context.Context, params *PostApiV3ImportlistParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistResponse, error) {
	rsp, err := c.PostApiV3ImportlistWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ImportlistWithResponse(ctx context.Context, params *PostApiV3ImportlistParams, body PostApiV3ImportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistResponse, error) {
	rsp, err := c.PostApiV3Importlist(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistResponse(rsp)
}

// PostApiV3ImportlistActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV3ImportlistActionNameResponse
func (c *ClientWithResponses) PostApiV3ImportlistActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistActionNameResponse, error) {
	rsp, err := c.PostApiV3ImportlistActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ImportlistActionNameWithResponse(ctx context.Context, name string, body PostApiV3ImportlistActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistActionNameResponse, error) {
	rsp, err := c.PostApiV3ImportlistActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistActionNameResponse(rsp)
}

// DeleteApiV3ImportlistBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3ImportlistBulkResponse
func (c *ClientWithResponses) DeleteApiV3ImportlistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistBulkResponse, error) {
	rsp, err := c.DeleteApiV3ImportlistBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ImportlistBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3ImportlistBulkWithResponse(ctx context.Context, body DeleteApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistBulkResponse, error) {
	rsp, err := c.DeleteApiV3ImportlistBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ImportlistBulkResponse(rsp)
}

// PutApiV3ImportlistBulkWithBodyWithResponse request with arbitrary body returning *PutApiV3ImportlistBulkResponse
func (c *ClientWithResponses) PutApiV3ImportlistBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistBulkResponse, error) {
	rsp, err := c.PutApiV3ImportlistBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ImportlistBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ImportlistBulkWithResponse(ctx context.Context, body PutApiV3ImportlistBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistBulkResponse, error) {
	rsp, err := c.PutApiV3ImportlistBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ImportlistBulkResponse(rsp)
}

// GetApiV3ImportlistMovieWithResponse request returning *GetApiV3ImportlistMovieResponse
func (c *ClientWithResponses) GetApiV3ImportlistMovieWithResponse(ctx context.Context, params *GetApiV3ImportlistMovieParams, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistMovieResponse, error) {
	rsp, err := c.GetApiV3ImportlistMovie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ImportlistMovieResponse(rsp)
}

// PostApiV3ImportlistMovieWithBodyWithResponse request with arbitrary body returning *PostApiV3ImportlistMovieResponse
func (c *ClientWithResponses) PostApiV3ImportlistMovieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error) {
	rsp, err := c.PostApiV3ImportlistMovieWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistMovieResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ImportlistMovieWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ImportlistMovieApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error) {
	rsp, err := c.PostApiV3ImportlistMovieWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistMovieResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ImportlistMovieWithResponse(ctx context.Context, body PostApiV3ImportlistMovieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistMovieResponse, error) {
	rsp, err := c.PostApiV3ImportlistMovie(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistMovieResponse(rsp)
}

// GetApiV3ImportlistSchemaWithResponse request returning *GetApiV3ImportlistSchemaResponse
func (c *ClientWithResponses) GetApiV3ImportlistSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistSchemaResponse, error) {
	rsp, err := c.GetApiV3ImportlistSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ImportlistSchemaResponse(rsp)
}

// PostApiV3ImportlistTestWithBodyWithResponse request with arbitrary body returning *PostApiV3ImportlistTestResponse
func (c *ClientWithResponses) PostApiV3ImportlistTestWithBodyWithResponse(ctx context.Context, params *PostApiV3ImportlistTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestResponse, error) {
	rsp, err := c.PostApiV3ImportlistTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ImportlistTestWithResponse(ctx context.Context, params *PostApiV3ImportlistTestParams, body PostApiV3ImportlistTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestResponse, error) {
	rsp, err := c.PostApiV3ImportlistTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistTestResponse(rsp)
}

// PostApiV3ImportlistTestallWithResponse request returning *PostApiV3ImportlistTestallResponse
func (c *ClientWithResponses) PostApiV3ImportlistTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3ImportlistTestallResponse, error) {
	rsp, err := c.PostApiV3ImportlistTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ImportlistTestallResponse(rsp)
}

// DeleteApiV3ImportlistIdWithResponse request returning *DeleteApiV3ImportlistIdResponse
func (c *ClientWithResponses) DeleteApiV3ImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ImportlistIdResponse, error) {
	rsp, err := c.DeleteApiV3ImportlistId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ImportlistIdResponse(rsp)
}

// GetApiV3ImportlistIdWithResponse request returning *GetApiV3ImportlistIdResponse
func (c *ClientWithResponses) GetApiV3ImportlistIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ImportlistIdResponse, error) {
	rsp, err := c.GetApiV3ImportlistId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ImportlistIdResponse(rsp)
}

// PutApiV3ImportlistIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ImportlistIdResponse
func (c *ClientWithResponses) PutApiV3ImportlistIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistIdResponse, error) {
	rsp, err := c.PutApiV3ImportlistIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ImportlistIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ImportlistIdWithResponse(ctx context.Context, id int32, params *PutApiV3ImportlistIdParams, body PutApiV3ImportlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ImportlistIdResponse, error) {
	rsp, err := c.PutApiV3ImportlistId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ImportlistIdResponse(rsp)
}

// GetApiV3IndexerWithResponse request returning *GetApiV3IndexerResponse
func (c *ClientWithResponses) GetApiV3IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerResponse, error) {
	rsp, err := c.GetApiV3Indexer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3IndexerResponse(rsp)
}

// PostApiV3IndexerWithBodyWithResponse request with arbitrary body returning *PostApiV3IndexerResponse
func (c *ClientWithResponses) PostApiV3IndexerWithBodyWithResponse(ctx context.Context, params *PostApiV3IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerResponse, error) {
	rsp, err := c.PostApiV3IndexerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3IndexerWithResponse(ctx context.Context, params *PostApiV3IndexerParams, body PostApiV3IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerResponse, error) {
	rsp, err := c.PostApiV3Indexer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerResponse(rsp)
}

// PostApiV3IndexerActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV3IndexerActionNameResponse
func (c *ClientWithResponses) PostApiV3IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerActionNameResponse, error) {
	rsp, err := c.PostApiV3IndexerActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3IndexerActionNameWithResponse(ctx context.Context, name string, body PostApiV3IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerActionNameResponse, error) {
	rsp, err := c.PostApiV3IndexerActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerActionNameResponse(rsp)
}

// DeleteApiV3IndexerBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3IndexerBulkResponse
func (c *ClientWithResponses) DeleteApiV3IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerBulkResponse, error) {
	rsp, err := c.DeleteApiV3IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3IndexerBulkWithResponse(ctx context.Context, body DeleteApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerBulkResponse, error) {
	rsp, err := c.DeleteApiV3IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3IndexerBulkResponse(rsp)
}

// PutApiV3IndexerBulkWithBodyWithResponse request with arbitrary body returning *PutApiV3IndexerBulkResponse
func (c *ClientWithResponses) PutApiV3IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3IndexerBulkResponse, error) {
	rsp, err := c.PutApiV3IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3IndexerBulkWithResponse(ctx context.Context, body PutApiV3IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3IndexerBulkResponse, error) {
	rsp, err := c.PutApiV3IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3IndexerBulkResponse(rsp)
}

// GetApiV3IndexerSchemaWithResponse request returning *GetApiV3IndexerSchemaResponse
func (c *ClientWithResponses) GetApiV3IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerSchemaResponse, error) {
	rsp, err := c.GetApiV3IndexerSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3IndexerSchemaResponse(rsp)
}

// PostApiV3IndexerTestWithBodyWithResponse request with arbitrary body returning *PostApiV3IndexerTestResponse
func (c *ClientWithResponses) PostApiV3IndexerTestWithBodyWithResponse(ctx context.Context, params *PostApiV3IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestResponse, error) {
	rsp, err := c.PostApiV3IndexerTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3IndexerTestWithResponse(ctx context.Context, params *PostApiV3IndexerTestParams, body PostApiV3IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestResponse, error) {
	rsp, err := c.PostApiV3IndexerTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerTestResponse(rsp)
}

// PostApiV3IndexerTestallWithResponse request returning *PostApiV3IndexerTestallResponse
func (c *ClientWithResponses) PostApiV3IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3IndexerTestallResponse, error) {
	rsp, err := c.PostApiV3IndexerTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3IndexerTestallResponse(rsp)
}

// DeleteApiV3IndexerIdWithResponse request returning *DeleteApiV3IndexerIdResponse
func (c *ClientWithResponses) DeleteApiV3IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3IndexerIdResponse, error) {
	rsp, err := c.DeleteApiV3IndexerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3IndexerIdResponse(rsp)
}

// GetApiV3IndexerIdWithResponse request returning *GetApiV3IndexerIdResponse
func (c *ClientWithResponses) GetApiV3IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3IndexerIdResponse, error) {
	rsp, err := c.GetApiV3IndexerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3IndexerIdResponse(rsp)
}

// PutApiV3IndexerIdWithBodyWithResponse request with arbitrary body returning *PutApiV3IndexerIdResponse
func (c *ClientWithResponses) PutApiV3IndexerIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3IndexerIdResponse, error) {
	rsp, err := c.PutApiV3IndexerIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3IndexerIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3IndexerIdWithResponse(ctx context.Context, id int32, params *PutApiV3IndexerIdParams, body PutApiV3IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3IndexerIdResponse, error) {
	rsp, err := c.PutApiV3IndexerId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3IndexerIdResponse(rsp)
}

// GetApiV3IndexerflagWithResponse request returning *GetApiV3IndexerflagResponse
func (c *ClientWithResponses) GetApiV3IndexerflagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3IndexerflagResponse, error) {
	rsp, err := c.GetApiV3Indexerflag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3IndexerflagResponse(rsp)
}

// GetApiV3LanguageWithResponse request returning *GetApiV3LanguageResponse
func (c *ClientWithResponses) GetApiV3LanguageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LanguageResponse, error) {
	rsp, err := c.GetApiV3Language(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LanguageResponse(rsp)
}

// GetApiV3LanguageIdWithResponse request returning *GetApiV3LanguageIdResponse
func (c *ClientWithResponses) GetApiV3LanguageIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3LanguageIdResponse, error) {
	rsp, err := c.GetApiV3LanguageId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LanguageIdResponse(rsp)
}

// GetApiV3LocalizationWithResponse request returning *GetApiV3LocalizationResponse
func (c *ClientWithResponses) GetApiV3LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LocalizationResponse, error) {
	rsp, err := c.GetApiV3Localization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LocalizationResponse(rsp)
}

// GetApiV3LocalizationLanguageWithResponse request returning *GetApiV3LocalizationLanguageResponse
func (c *ClientWithResponses) GetApiV3LocalizationLanguageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LocalizationLanguageResponse, error) {
	rsp, err := c.GetApiV3LocalizationLanguage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LocalizationLanguageResponse(rsp)
}

// GetApiV3LogWithResponse request returning *GetApiV3LogResponse
func (c *ClientWithResponses) GetApiV3LogWithResponse(ctx context.Context, params *GetApiV3LogParams, reqEditors ...RequestEditorFn) (*GetApiV3LogResponse, error) {
	rsp, err := c.GetApiV3Log(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LogResponse(rsp)
}

// GetApiV3LogFileWithResponse request returning *GetApiV3LogFileResponse
func (c *ClientWithResponses) GetApiV3LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LogFileResponse, error) {
	rsp, err := c.GetApiV3LogFile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LogFileResponse(rsp)
}

// GetApiV3LogFileUpdateWithResponse request returning *GetApiV3LogFileUpdateResponse
func (c *ClientWithResponses) GetApiV3LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3LogFileUpdateResponse, error) {
	rsp, err := c.GetApiV3LogFileUpdate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LogFileUpdateResponse(rsp)
}

// GetApiV3LogFileUpdateFilenameWithResponse request returning *GetApiV3LogFileUpdateFilenameResponse
func (c *ClientWithResponses) GetApiV3LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV3LogFileUpdateFilenameResponse, error) {
	rsp, err := c.GetApiV3LogFileUpdateFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LogFileUpdateFilenameResponse(rsp)
}

// GetApiV3LogFileFilenameWithResponse request returning *GetApiV3LogFileFilenameResponse
func (c *ClientWithResponses) GetApiV3LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV3LogFileFilenameResponse, error) {
	rsp, err := c.GetApiV3LogFileFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3LogFileFilenameResponse(rsp)
}

// GetApiV3ManualimportWithResponse request returning *GetApiV3ManualimportResponse
func (c *ClientWithResponses) GetApiV3ManualimportWithResponse(ctx context.Context, params *GetApiV3ManualimportParams, reqEditors ...RequestEditorFn) (*GetApiV3ManualimportResponse, error) {
	rsp, err := c.GetApiV3Manualimport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ManualimportResponse(rsp)
}

// PostApiV3ManualimportWithBodyWithResponse request with arbitrary body returning *PostApiV3ManualimportResponse
func (c *ClientWithResponses) PostApiV3ManualimportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ManualimportResponse, error) {
	rsp, err := c.PostApiV3ManualimportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ManualimportResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ManualimportWithResponse(ctx context.Context, body PostApiV3ManualimportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ManualimportResponse, error) {
	rsp, err := c.PostApiV3Manualimport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ManualimportResponse(rsp)
}

// GetApiV3MediacoverMovieIdFilenameWithResponse request returning *GetApiV3MediacoverMovieIdFilenameResponse
func (c *ClientWithResponses) GetApiV3MediacoverMovieIdFilenameWithResponse(ctx context.Context, movieId int32, filename string, reqEditors ...RequestEditorFn) (*GetApiV3MediacoverMovieIdFilenameResponse, error) {
	rsp, err := c.GetApiV3MediacoverMovieIdFilename(ctx, movieId, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MediacoverMovieIdFilenameResponse(rsp)
}

// GetApiV3MetadataWithResponse request returning *GetApiV3MetadataResponse
func (c *ClientWithResponses) GetApiV3MetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3MetadataResponse, error) {
	rsp, err := c.GetApiV3Metadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MetadataResponse(rsp)
}

// PostApiV3MetadataWithBodyWithResponse request with arbitrary body returning *PostApiV3MetadataResponse
func (c *ClientWithResponses) PostApiV3MetadataWithBodyWithResponse(ctx context.Context, params *PostApiV3MetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataResponse, error) {
	rsp, err := c.PostApiV3MetadataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3MetadataWithResponse(ctx context.Context, params *PostApiV3MetadataParams, body PostApiV3MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataResponse, error) {
	rsp, err := c.PostApiV3Metadata(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataResponse(rsp)
}

// PostApiV3MetadataActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV3MetadataActionNameResponse
func (c *ClientWithResponses) PostApiV3MetadataActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataActionNameResponse, error) {
	rsp, err := c.PostApiV3MetadataActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3MetadataActionNameWithResponse(ctx context.Context, name string, body PostApiV3MetadataActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataActionNameResponse, error) {
	rsp, err := c.PostApiV3MetadataActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataActionNameResponse(rsp)
}

// GetApiV3MetadataSchemaWithResponse request returning *GetApiV3MetadataSchemaResponse
func (c *ClientWithResponses) GetApiV3MetadataSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3MetadataSchemaResponse, error) {
	rsp, err := c.GetApiV3MetadataSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MetadataSchemaResponse(rsp)
}

// PostApiV3MetadataTestWithBodyWithResponse request with arbitrary body returning *PostApiV3MetadataTestResponse
func (c *ClientWithResponses) PostApiV3MetadataTestWithBodyWithResponse(ctx context.Context, params *PostApiV3MetadataTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestResponse, error) {
	rsp, err := c.PostApiV3MetadataTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3MetadataTestWithResponse(ctx context.Context, params *PostApiV3MetadataTestParams, body PostApiV3MetadataTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestResponse, error) {
	rsp, err := c.PostApiV3MetadataTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataTestResponse(rsp)
}

// PostApiV3MetadataTestallWithResponse request returning *PostApiV3MetadataTestallResponse
func (c *ClientWithResponses) PostApiV3MetadataTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3MetadataTestallResponse, error) {
	rsp, err := c.PostApiV3MetadataTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MetadataTestallResponse(rsp)
}

// DeleteApiV3MetadataIdWithResponse request returning *DeleteApiV3MetadataIdResponse
func (c *ClientWithResponses) DeleteApiV3MetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3MetadataIdResponse, error) {
	rsp, err := c.DeleteApiV3MetadataId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MetadataIdResponse(rsp)
}

// GetApiV3MetadataIdWithResponse request returning *GetApiV3MetadataIdResponse
func (c *ClientWithResponses) GetApiV3MetadataIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MetadataIdResponse, error) {
	rsp, err := c.GetApiV3MetadataId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MetadataIdResponse(rsp)
}

// PutApiV3MetadataIdWithBodyWithResponse request with arbitrary body returning *PutApiV3MetadataIdResponse
func (c *ClientWithResponses) PutApiV3MetadataIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MetadataIdResponse, error) {
	rsp, err := c.PutApiV3MetadataIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MetadataIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MetadataIdWithResponse(ctx context.Context, id int32, params *PutApiV3MetadataIdParams, body PutApiV3MetadataIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MetadataIdResponse, error) {
	rsp, err := c.PutApiV3MetadataId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MetadataIdResponse(rsp)
}

// GetApiV3MovieWithResponse request returning *GetApiV3MovieResponse
func (c *ClientWithResponses) GetApiV3MovieWithResponse(ctx context.Context, params *GetApiV3MovieParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieResponse, error) {
	rsp, err := c.GetApiV3Movie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MovieResponse(rsp)
}

// PostApiV3MovieWithBodyWithResponse request with arbitrary body returning *PostApiV3MovieResponse
func (c *ClientWithResponses) PostApiV3MovieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MovieResponse, error) {
	rsp, err := c.PostApiV3MovieWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MovieResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3MovieWithResponse(ctx context.Context, body PostApiV3MovieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MovieResponse, error) {
	rsp, err := c.PostApiV3Movie(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MovieResponse(rsp)
}

// DeleteApiV3MovieEditorWithBodyWithResponse request with arbitrary body returning *DeleteApiV3MovieEditorResponse
func (c *ClientWithResponses) DeleteApiV3MovieEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error) {
	rsp, err := c.DeleteApiV3MovieEditorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MovieEditorResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3MovieEditorWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body DeleteApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error) {
	rsp, err := c.DeleteApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MovieEditorResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3MovieEditorWithResponse(ctx context.Context, body DeleteApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieEditorResponse, error) {
	rsp, err := c.DeleteApiV3MovieEditor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MovieEditorResponse(rsp)
}

// PutApiV3MovieEditorWithBodyWithResponse request with arbitrary body returning *PutApiV3MovieEditorResponse
func (c *ClientWithResponses) PutApiV3MovieEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error) {
	rsp, err := c.PutApiV3MovieEditorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MovieEditorResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MovieEditorWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutApiV3MovieEditorApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error) {
	rsp, err := c.PutApiV3MovieEditorWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MovieEditorResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MovieEditorWithResponse(ctx context.Context, body PutApiV3MovieEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieEditorResponse, error) {
	rsp, err := c.PutApiV3MovieEditor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MovieEditorResponse(rsp)
}

// PostApiV3MovieImportWithBodyWithResponse request with arbitrary body returning *PostApiV3MovieImportResponse
func (c *ClientWithResponses) PostApiV3MovieImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3MovieImportResponse, error) {
	rsp, err := c.PostApiV3MovieImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MovieImportResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3MovieImportWithResponse(ctx context.Context, body PostApiV3MovieImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3MovieImportResponse, error) {
	rsp, err := c.PostApiV3MovieImport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3MovieImportResponse(rsp)
}

// GetApiV3MovieLookupWithResponse request returning *GetApiV3MovieLookupResponse
func (c *ClientWithResponses) GetApiV3MovieLookupWithResponse(ctx context.Context, params *GetApiV3MovieLookupParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupResponse, error) {
	rsp, err := c.GetApiV3MovieLookup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MovieLookupResponse(rsp)
}

// GetApiV3MovieLookupImdbWithResponse request returning *GetApiV3MovieLookupImdbResponse
func (c *ClientWithResponses) GetApiV3MovieLookupImdbWithResponse(ctx context.Context, params *GetApiV3MovieLookupImdbParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupImdbResponse, error) {
	rsp, err := c.GetApiV3MovieLookupImdb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MovieLookupImdbResponse(rsp)
}

// GetApiV3MovieLookupTmdbWithResponse request returning *GetApiV3MovieLookupTmdbResponse
func (c *ClientWithResponses) GetApiV3MovieLookupTmdbWithResponse(ctx context.Context, params *GetApiV3MovieLookupTmdbParams, reqEditors ...RequestEditorFn) (*GetApiV3MovieLookupTmdbResponse, error) {
	rsp, err := c.GetApiV3MovieLookupTmdb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MovieLookupTmdbResponse(rsp)
}

// DeleteApiV3MovieIdWithResponse request returning *DeleteApiV3MovieIdResponse
func (c *ClientWithResponses) DeleteApiV3MovieIdWithResponse(ctx context.Context, id int32, params *DeleteApiV3MovieIdParams, reqEditors ...RequestEditorFn) (*DeleteApiV3MovieIdResponse, error) {
	rsp, err := c.DeleteApiV3MovieId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MovieIdResponse(rsp)
}

// GetApiV3MovieIdWithResponse request returning *GetApiV3MovieIdResponse
func (c *ClientWithResponses) GetApiV3MovieIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MovieIdResponse, error) {
	rsp, err := c.GetApiV3MovieId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MovieIdResponse(rsp)
}

// PutApiV3MovieIdWithBodyWithResponse request with arbitrary body returning *PutApiV3MovieIdResponse
func (c *ClientWithResponses) PutApiV3MovieIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV3MovieIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MovieIdResponse, error) {
	rsp, err := c.PutApiV3MovieIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MovieIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MovieIdWithResponse(ctx context.Context, id string, params *PutApiV3MovieIdParams, body PutApiV3MovieIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MovieIdResponse, error) {
	rsp, err := c.PutApiV3MovieId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MovieIdResponse(rsp)
}

// GetApiV3MoviefileWithResponse request returning *GetApiV3MoviefileResponse
func (c *ClientWithResponses) GetApiV3MoviefileWithResponse(ctx context.Context, params *GetApiV3MoviefileParams, reqEditors ...RequestEditorFn) (*GetApiV3MoviefileResponse, error) {
	rsp, err := c.GetApiV3Moviefile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MoviefileResponse(rsp)
}

// DeleteApiV3MoviefileBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3MoviefileBulkResponse
func (c *ClientWithResponses) DeleteApiV3MoviefileBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileBulkResponse, error) {
	rsp, err := c.DeleteApiV3MoviefileBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MoviefileBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3MoviefileBulkWithResponse(ctx context.Context, body DeleteApiV3MoviefileBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileBulkResponse, error) {
	rsp, err := c.DeleteApiV3MoviefileBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MoviefileBulkResponse(rsp)
}

// PutApiV3MoviefileEditorWithBodyWithResponse request with arbitrary body returning *PutApiV3MoviefileEditorResponse
func (c *ClientWithResponses) PutApiV3MoviefileEditorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileEditorResponse, error) {
	rsp, err := c.PutApiV3MoviefileEditorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MoviefileEditorResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MoviefileEditorWithResponse(ctx context.Context, body PutApiV3MoviefileEditorJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileEditorResponse, error) {
	rsp, err := c.PutApiV3MoviefileEditor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MoviefileEditorResponse(rsp)
}

// DeleteApiV3MoviefileIdWithResponse request returning *DeleteApiV3MoviefileIdResponse
func (c *ClientWithResponses) DeleteApiV3MoviefileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3MoviefileIdResponse, error) {
	rsp, err := c.DeleteApiV3MoviefileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3MoviefileIdResponse(rsp)
}

// GetApiV3MoviefileIdWithResponse request returning *GetApiV3MoviefileIdResponse
func (c *ClientWithResponses) GetApiV3MoviefileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3MoviefileIdResponse, error) {
	rsp, err := c.GetApiV3MoviefileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3MoviefileIdResponse(rsp)
}

// PutApiV3MoviefileIdWithBodyWithResponse request with arbitrary body returning *PutApiV3MoviefileIdResponse
func (c *ClientWithResponses) PutApiV3MoviefileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileIdResponse, error) {
	rsp, err := c.PutApiV3MoviefileIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MoviefileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3MoviefileIdWithResponse(ctx context.Context, id string, body PutApiV3MoviefileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3MoviefileIdResponse, error) {
	rsp, err := c.PutApiV3MoviefileId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3MoviefileIdResponse(rsp)
}

// GetApiV3NotificationWithResponse request returning *GetApiV3NotificationResponse
func (c *ClientWithResponses) GetApiV3NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3NotificationResponse, error) {
	rsp, err := c.GetApiV3Notification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3NotificationResponse(rsp)
}

// PostApiV3NotificationWithBodyWithResponse request with arbitrary body returning *PostApiV3NotificationResponse
func (c *ClientWithResponses) PostApiV3NotificationWithBodyWithResponse(ctx context.Context, params *PostApiV3NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationResponse, error) {
	rsp, err := c.PostApiV3NotificationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3NotificationWithResponse(ctx context.Context, params *PostApiV3NotificationParams, body PostApiV3NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationResponse, error) {
	rsp, err := c.PostApiV3Notification(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationResponse(rsp)
}

// PostApiV3NotificationActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV3NotificationActionNameResponse
func (c *ClientWithResponses) PostApiV3NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationActionNameResponse, error) {
	rsp, err := c.PostApiV3NotificationActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3NotificationActionNameWithResponse(ctx context.Context, name string, body PostApiV3NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationActionNameResponse, error) {
	rsp, err := c.PostApiV3NotificationActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationActionNameResponse(rsp)
}

// GetApiV3NotificationSchemaWithResponse request returning *GetApiV3NotificationSchemaResponse
func (c *ClientWithResponses) GetApiV3NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3NotificationSchemaResponse, error) {
	rsp, err := c.GetApiV3NotificationSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3NotificationSchemaResponse(rsp)
}

// PostApiV3NotificationTestWithBodyWithResponse request with arbitrary body returning *PostApiV3NotificationTestResponse
func (c *ClientWithResponses) PostApiV3NotificationTestWithBodyWithResponse(ctx context.Context, params *PostApiV3NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestResponse, error) {
	rsp, err := c.PostApiV3NotificationTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3NotificationTestWithResponse(ctx context.Context, params *PostApiV3NotificationTestParams, body PostApiV3NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestResponse, error) {
	rsp, err := c.PostApiV3NotificationTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationTestResponse(rsp)
}

// PostApiV3NotificationTestallWithResponse request returning *PostApiV3NotificationTestallResponse
func (c *ClientWithResponses) PostApiV3NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3NotificationTestallResponse, error) {
	rsp, err := c.PostApiV3NotificationTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3NotificationTestallResponse(rsp)
}

// DeleteApiV3NotificationIdWithResponse request returning *DeleteApiV3NotificationIdResponse
func (c *ClientWithResponses) DeleteApiV3NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3NotificationIdResponse, error) {
	rsp, err := c.DeleteApiV3NotificationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3NotificationIdResponse(rsp)
}

// GetApiV3NotificationIdWithResponse request returning *GetApiV3NotificationIdResponse
func (c *ClientWithResponses) GetApiV3NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3NotificationIdResponse, error) {
	rsp, err := c.GetApiV3NotificationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3NotificationIdResponse(rsp)
}

// PutApiV3NotificationIdWithBodyWithResponse request with arbitrary body returning *PutApiV3NotificationIdResponse
func (c *ClientWithResponses) PutApiV3NotificationIdWithBodyWithResponse(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3NotificationIdResponse, error) {
	rsp, err := c.PutApiV3NotificationIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3NotificationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3NotificationIdWithResponse(ctx context.Context, id int32, params *PutApiV3NotificationIdParams, body PutApiV3NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3NotificationIdResponse, error) {
	rsp, err := c.PutApiV3NotificationId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3NotificationIdResponse(rsp)
}

// GetApiV3ParseWithResponse request returning *GetApiV3ParseResponse
func (c *ClientWithResponses) GetApiV3ParseWithResponse(ctx context.Context, params *GetApiV3ParseParams, reqEditors ...RequestEditorFn) (*GetApiV3ParseResponse, error) {
	rsp, err := c.GetApiV3Parse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ParseResponse(rsp)
}

// GetApiV3QualitydefinitionWithResponse request returning *GetApiV3QualitydefinitionResponse
func (c *ClientWithResponses) GetApiV3QualitydefinitionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualitydefinitionResponse, error) {
	rsp, err := c.GetApiV3Qualitydefinition(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QualitydefinitionResponse(rsp)
}

// PutApiV3QualitydefinitionUpdateWithBodyWithResponse request with arbitrary body returning *PutApiV3QualitydefinitionUpdateResponse
func (c *ClientWithResponses) PutApiV3QualitydefinitionUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3QualitydefinitionUpdateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutApiV3QualitydefinitionUpdateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionUpdateWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3QualitydefinitionUpdateWithResponse(ctx context.Context, body PutApiV3QualitydefinitionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionUpdateResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionUpdateResponse(rsp)
}

// GetApiV3QualitydefinitionIdWithResponse request returning *GetApiV3QualitydefinitionIdResponse
func (c *ClientWithResponses) GetApiV3QualitydefinitionIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3QualitydefinitionIdResponse, error) {
	rsp, err := c.GetApiV3QualitydefinitionId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QualitydefinitionIdResponse(rsp)
}

// PutApiV3QualitydefinitionIdWithBodyWithResponse request with arbitrary body returning *PutApiV3QualitydefinitionIdResponse
func (c *ClientWithResponses) PutApiV3QualitydefinitionIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3QualitydefinitionIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3QualitydefinitionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3QualitydefinitionIdWithResponse(ctx context.Context, id string, body PutApiV3QualitydefinitionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualitydefinitionIdResponse, error) {
	rsp, err := c.PutApiV3QualitydefinitionId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualitydefinitionIdResponse(rsp)
}

// GetApiV3QualityprofileWithResponse request returning *GetApiV3QualityprofileResponse
func (c *ClientWithResponses) GetApiV3QualityprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileResponse, error) {
	rsp, err := c.GetApiV3Qualityprofile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QualityprofileResponse(rsp)
}

// PostApiV3QualityprofileWithBodyWithResponse request with arbitrary body returning *PostApiV3QualityprofileResponse
func (c *ClientWithResponses) PostApiV3QualityprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3QualityprofileResponse, error) {
	rsp, err := c.PostApiV3QualityprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3QualityprofileResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3QualityprofileWithResponse(ctx context.Context, body PostApiV3QualityprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3QualityprofileResponse, error) {
	rsp, err := c.PostApiV3Qualityprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3QualityprofileResponse(rsp)
}

// GetApiV3QualityprofileSchemaWithResponse request returning *GetApiV3QualityprofileSchemaResponse
func (c *ClientWithResponses) GetApiV3QualityprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileSchemaResponse, error) {
	rsp, err := c.GetApiV3QualityprofileSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QualityprofileSchemaResponse(rsp)
}

// DeleteApiV3QualityprofileIdWithResponse request returning *DeleteApiV3QualityprofileIdResponse
func (c *ClientWithResponses) DeleteApiV3QualityprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3QualityprofileIdResponse, error) {
	rsp, err := c.DeleteApiV3QualityprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3QualityprofileIdResponse(rsp)
}

// GetApiV3QualityprofileIdWithResponse request returning *GetApiV3QualityprofileIdResponse
func (c *ClientWithResponses) GetApiV3QualityprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3QualityprofileIdResponse, error) {
	rsp, err := c.GetApiV3QualityprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QualityprofileIdResponse(rsp)
}

// PutApiV3QualityprofileIdWithBodyWithResponse request with arbitrary body returning *PutApiV3QualityprofileIdResponse
func (c *ClientWithResponses) PutApiV3QualityprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3QualityprofileIdResponse, error) {
	rsp, err := c.PutApiV3QualityprofileIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualityprofileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3QualityprofileIdWithResponse(ctx context.Context, id string, body PutApiV3QualityprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3QualityprofileIdResponse, error) {
	rsp, err := c.PutApiV3QualityprofileId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3QualityprofileIdResponse(rsp)
}

// GetApiV3QueueWithResponse request returning *GetApiV3QueueResponse
func (c *ClientWithResponses) GetApiV3QueueWithResponse(ctx context.Context, params *GetApiV3QueueParams, reqEditors ...RequestEditorFn) (*GetApiV3QueueResponse, error) {
	rsp, err := c.GetApiV3Queue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QueueResponse(rsp)
}

// DeleteApiV3QueueBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV3QueueBulkResponse
func (c *ClientWithResponses) DeleteApiV3QueueBulkWithBodyWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error) {
	rsp, err := c.DeleteApiV3QueueBulkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3QueueBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3QueueBulkWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error) {
	rsp, err := c.DeleteApiV3QueueBulkWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3QueueBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV3QueueBulkWithResponse(ctx context.Context, params *DeleteApiV3QueueBulkParams, body DeleteApiV3QueueBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueBulkResponse, error) {
	rsp, err := c.DeleteApiV3QueueBulk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3QueueBulkResponse(rsp)
}

// GetApiV3QueueDetailsWithResponse request returning *GetApiV3QueueDetailsResponse
func (c *ClientWithResponses) GetApiV3QueueDetailsWithResponse(ctx context.Context, params *GetApiV3QueueDetailsParams, reqEditors ...RequestEditorFn) (*GetApiV3QueueDetailsResponse, error) {
	rsp, err := c.GetApiV3QueueDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QueueDetailsResponse(rsp)
}

// PostApiV3QueueGrabBulkWithBodyWithResponse request with arbitrary body returning *PostApiV3QueueGrabBulkResponse
func (c *ClientWithResponses) PostApiV3QueueGrabBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabBulkResponse, error) {
	rsp, err := c.PostApiV3QueueGrabBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3QueueGrabBulkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3QueueGrabBulkWithResponse(ctx context.Context, body PostApiV3QueueGrabBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabBulkResponse, error) {
	rsp, err := c.PostApiV3QueueGrabBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3QueueGrabBulkResponse(rsp)
}

// PostApiV3QueueGrabIdWithResponse request returning *PostApiV3QueueGrabIdResponse
func (c *ClientWithResponses) PostApiV3QueueGrabIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3QueueGrabIdResponse, error) {
	rsp, err := c.PostApiV3QueueGrabId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3QueueGrabIdResponse(rsp)
}

// GetApiV3QueueStatusWithResponse request returning *GetApiV3QueueStatusResponse
func (c *ClientWithResponses) GetApiV3QueueStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3QueueStatusResponse, error) {
	rsp, err := c.GetApiV3QueueStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3QueueStatusResponse(rsp)
}

// DeleteApiV3QueueIdWithResponse request returning *DeleteApiV3QueueIdResponse
func (c *ClientWithResponses) DeleteApiV3QueueIdWithResponse(ctx context.Context, id int32, params *DeleteApiV3QueueIdParams, reqEditors ...RequestEditorFn) (*DeleteApiV3QueueIdResponse, error) {
	rsp, err := c.DeleteApiV3QueueId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3QueueIdResponse(rsp)
}

// GetApiV3ReleaseWithResponse request returning *GetApiV3ReleaseResponse
func (c *ClientWithResponses) GetApiV3ReleaseWithResponse(ctx context.Context, params *GetApiV3ReleaseParams, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseResponse, error) {
	rsp, err := c.GetApiV3Release(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ReleaseResponse(rsp)
}

// PostApiV3ReleaseWithBodyWithResponse request with arbitrary body returning *PostApiV3ReleaseResponse
func (c *ClientWithResponses) PostApiV3ReleaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseResponse, error) {
	rsp, err := c.PostApiV3ReleaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleaseResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ReleaseWithResponse(ctx context.Context, body PostApiV3ReleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseResponse, error) {
	rsp, err := c.PostApiV3Release(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleaseResponse(rsp)
}

// PostApiV3ReleasePushWithBodyWithResponse request with arbitrary body returning *PostApiV3ReleasePushResponse
func (c *ClientWithResponses) PostApiV3ReleasePushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleasePushResponse, error) {
	rsp, err := c.PostApiV3ReleasePushWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleasePushResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ReleasePushWithResponse(ctx context.Context, body PostApiV3ReleasePushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleasePushResponse, error) {
	rsp, err := c.PostApiV3ReleasePush(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleasePushResponse(rsp)
}

// GetApiV3ReleaseprofileWithResponse request returning *GetApiV3ReleaseprofileResponse
func (c *ClientWithResponses) GetApiV3ReleaseprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseprofileResponse, error) {
	rsp, err := c.GetApiV3Releaseprofile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ReleaseprofileResponse(rsp)
}

// PostApiV3ReleaseprofileWithBodyWithResponse request with arbitrary body returning *PostApiV3ReleaseprofileResponse
func (c *ClientWithResponses) PostApiV3ReleaseprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error) {
	rsp, err := c.PostApiV3ReleaseprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleaseprofileResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ReleaseprofileWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV3ReleaseprofileApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error) {
	rsp, err := c.PostApiV3ReleaseprofileWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleaseprofileResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3ReleaseprofileWithResponse(ctx context.Context, body PostApiV3ReleaseprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3ReleaseprofileResponse, error) {
	rsp, err := c.PostApiV3Releaseprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3ReleaseprofileResponse(rsp)
}

// DeleteApiV3ReleaseprofileIdWithResponse request returning *DeleteApiV3ReleaseprofileIdResponse
func (c *ClientWithResponses) DeleteApiV3ReleaseprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3ReleaseprofileIdResponse, error) {
	rsp, err := c.DeleteApiV3ReleaseprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3ReleaseprofileIdResponse(rsp)
}

// GetApiV3ReleaseprofileIdWithResponse request returning *GetApiV3ReleaseprofileIdResponse
func (c *ClientWithResponses) GetApiV3ReleaseprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3ReleaseprofileIdResponse, error) {
	rsp, err := c.GetApiV3ReleaseprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3ReleaseprofileIdResponse(rsp)
}

// PutApiV3ReleaseprofileIdWithBodyWithResponse request with arbitrary body returning *PutApiV3ReleaseprofileIdResponse
func (c *ClientWithResponses) PutApiV3ReleaseprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error) {
	rsp, err := c.PutApiV3ReleaseprofileIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ReleaseprofileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ReleaseprofileIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3ReleaseprofileIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error) {
	rsp, err := c.PutApiV3ReleaseprofileIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ReleaseprofileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3ReleaseprofileIdWithResponse(ctx context.Context, id string, body PutApiV3ReleaseprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3ReleaseprofileIdResponse, error) {
	rsp, err := c.PutApiV3ReleaseprofileId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3ReleaseprofileIdResponse(rsp)
}

// GetApiV3RemotepathmappingWithResponse request returning *GetApiV3RemotepathmappingResponse
func (c *ClientWithResponses) GetApiV3RemotepathmappingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3RemotepathmappingResponse, error) {
	rsp, err := c.GetApiV3Remotepathmapping(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3RemotepathmappingResponse(rsp)
}

// PostApiV3RemotepathmappingWithBodyWithResponse request with arbitrary body returning *PostApiV3RemotepathmappingResponse
func (c *ClientWithResponses) PostApiV3RemotepathmappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3RemotepathmappingResponse, error) {
	rsp, err := c.PostApiV3RemotepathmappingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3RemotepathmappingResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3RemotepathmappingWithResponse(ctx context.Context, body PostApiV3RemotepathmappingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3RemotepathmappingResponse, error) {
	rsp, err := c.PostApiV3Remotepathmapping(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3RemotepathmappingResponse(rsp)
}

// DeleteApiV3RemotepathmappingIdWithResponse request returning *DeleteApiV3RemotepathmappingIdResponse
func (c *ClientWithResponses) DeleteApiV3RemotepathmappingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3RemotepathmappingIdResponse, error) {
	rsp, err := c.DeleteApiV3RemotepathmappingId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3RemotepathmappingIdResponse(rsp)
}

// GetApiV3RemotepathmappingIdWithResponse request returning *GetApiV3RemotepathmappingIdResponse
func (c *ClientWithResponses) GetApiV3RemotepathmappingIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3RemotepathmappingIdResponse, error) {
	rsp, err := c.GetApiV3RemotepathmappingId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3RemotepathmappingIdResponse(rsp)
}

// PutApiV3RemotepathmappingIdWithBodyWithResponse request with arbitrary body returning *PutApiV3RemotepathmappingIdResponse
func (c *ClientWithResponses) PutApiV3RemotepathmappingIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error) {
	rsp, err := c.PutApiV3RemotepathmappingIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3RemotepathmappingIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3RemotepathmappingIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, id string, body PutApiV3RemotepathmappingIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error) {
	rsp, err := c.PutApiV3RemotepathmappingIdWithApplicationWildcardPlusJSONBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3RemotepathmappingIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3RemotepathmappingIdWithResponse(ctx context.Context, id string, body PutApiV3RemotepathmappingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3RemotepathmappingIdResponse, error) {
	rsp, err := c.PutApiV3RemotepathmappingId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3RemotepathmappingIdResponse(rsp)
}

// GetApiV3RenameWithResponse request returning *GetApiV3RenameResponse
func (c *ClientWithResponses) GetApiV3RenameWithResponse(ctx context.Context, params *GetApiV3RenameParams, reqEditors ...RequestEditorFn) (*GetApiV3RenameResponse, error) {
	rsp, err := c.GetApiV3Rename(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3RenameResponse(rsp)
}

// GetApiV3RootfolderWithResponse request returning *GetApiV3RootfolderResponse
func (c *ClientWithResponses) GetApiV3RootfolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3RootfolderResponse, error) {
	rsp, err := c.GetApiV3Rootfolder(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3RootfolderResponse(rsp)
}

// PostApiV3RootfolderWithBodyWithResponse request with arbitrary body returning *PostApiV3RootfolderResponse
func (c *ClientWithResponses) PostApiV3RootfolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3RootfolderResponse, error) {
	rsp, err := c.PostApiV3RootfolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3RootfolderResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3RootfolderWithResponse(ctx context.Context, body PostApiV3RootfolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3RootfolderResponse, error) {
	rsp, err := c.PostApiV3Rootfolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3RootfolderResponse(rsp)
}

// DeleteApiV3RootfolderIdWithResponse request returning *DeleteApiV3RootfolderIdResponse
func (c *ClientWithResponses) DeleteApiV3RootfolderIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3RootfolderIdResponse, error) {
	rsp, err := c.DeleteApiV3RootfolderId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3RootfolderIdResponse(rsp)
}

// GetApiV3RootfolderIdWithResponse request returning *GetApiV3RootfolderIdResponse
func (c *ClientWithResponses) GetApiV3RootfolderIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3RootfolderIdResponse, error) {
	rsp, err := c.GetApiV3RootfolderId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3RootfolderIdResponse(rsp)
}

// GetApiV3SystemBackupWithResponse request returning *GetApiV3SystemBackupResponse
func (c *ClientWithResponses) GetApiV3SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemBackupResponse, error) {
	rsp, err := c.GetApiV3SystemBackup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemBackupResponse(rsp)
}

// PostApiV3SystemBackupRestoreUploadWithResponse request returning *PostApiV3SystemBackupRestoreUploadResponse
func (c *ClientWithResponses) PostApiV3SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemBackupRestoreUploadResponse, error) {
	rsp, err := c.PostApiV3SystemBackupRestoreUpload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3SystemBackupRestoreUploadResponse(rsp)
}

// PostApiV3SystemBackupRestoreIdWithResponse request returning *PostApiV3SystemBackupRestoreIdResponse
func (c *ClientWithResponses) PostApiV3SystemBackupRestoreIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV3SystemBackupRestoreIdResponse, error) {
	rsp, err := c.PostApiV3SystemBackupRestoreId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3SystemBackupRestoreIdResponse(rsp)
}

// DeleteApiV3SystemBackupIdWithResponse request returning *DeleteApiV3SystemBackupIdResponse
func (c *ClientWithResponses) DeleteApiV3SystemBackupIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3SystemBackupIdResponse, error) {
	rsp, err := c.DeleteApiV3SystemBackupId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3SystemBackupIdResponse(rsp)
}

// PostApiV3SystemRestartWithResponse request returning *PostApiV3SystemRestartResponse
func (c *ClientWithResponses) PostApiV3SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemRestartResponse, error) {
	rsp, err := c.PostApiV3SystemRestart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3SystemRestartResponse(rsp)
}

// GetApiV3SystemRoutesWithResponse request returning *GetApiV3SystemRoutesResponse
func (c *ClientWithResponses) GetApiV3SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemRoutesResponse, error) {
	rsp, err := c.GetApiV3SystemRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemRoutesResponse(rsp)
}

// GetApiV3SystemRoutesDuplicateWithResponse request returning *GetApiV3SystemRoutesDuplicateResponse
func (c *ClientWithResponses) GetApiV3SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemRoutesDuplicateResponse, error) {
	rsp, err := c.GetApiV3SystemRoutesDuplicate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemRoutesDuplicateResponse(rsp)
}

// PostApiV3SystemShutdownWithResponse request returning *PostApiV3SystemShutdownResponse
func (c *ClientWithResponses) PostApiV3SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV3SystemShutdownResponse, error) {
	rsp, err := c.PostApiV3SystemShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3SystemShutdownResponse(rsp)
}

// GetApiV3SystemStatusWithResponse request returning *GetApiV3SystemStatusResponse
func (c *ClientWithResponses) GetApiV3SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemStatusResponse, error) {
	rsp, err := c.GetApiV3SystemStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemStatusResponse(rsp)
}

// GetApiV3SystemTaskWithResponse request returning *GetApiV3SystemTaskResponse
func (c *ClientWithResponses) GetApiV3SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3SystemTaskResponse, error) {
	rsp, err := c.GetApiV3SystemTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemTaskResponse(rsp)
}

// GetApiV3SystemTaskIdWithResponse request returning *GetApiV3SystemTaskIdResponse
func (c *ClientWithResponses) GetApiV3SystemTaskIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3SystemTaskIdResponse, error) {
	rsp, err := c.GetApiV3SystemTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3SystemTaskIdResponse(rsp)
}

// GetApiV3TagWithResponse request returning *GetApiV3TagResponse
func (c *ClientWithResponses) GetApiV3TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3TagResponse, error) {
	rsp, err := c.GetApiV3Tag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3TagResponse(rsp)
}

// PostApiV3TagWithBodyWithResponse request with arbitrary body returning *PostApiV3TagResponse
func (c *ClientWithResponses) PostApiV3TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV3TagResponse, error) {
	rsp, err := c.PostApiV3TagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3TagResponse(rsp)
}

func (c *ClientWithResponses) PostApiV3TagWithResponse(ctx context.Context, body PostApiV3TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV3TagResponse, error) {
	rsp, err := c.PostApiV3Tag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV3TagResponse(rsp)
}

// GetApiV3TagDetailWithResponse request returning *GetApiV3TagDetailResponse
func (c *ClientWithResponses) GetApiV3TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3TagDetailResponse, error) {
	rsp, err := c.GetApiV3TagDetail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3TagDetailResponse(rsp)
}

// GetApiV3TagDetailIdWithResponse request returning *GetApiV3TagDetailIdResponse
func (c *ClientWithResponses) GetApiV3TagDetailIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3TagDetailIdResponse, error) {
	rsp, err := c.GetApiV3TagDetailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3TagDetailIdResponse(rsp)
}

// DeleteApiV3TagIdWithResponse request returning *DeleteApiV3TagIdResponse
func (c *ClientWithResponses) DeleteApiV3TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV3TagIdResponse, error) {
	rsp, err := c.DeleteApiV3TagId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV3TagIdResponse(rsp)
}

// GetApiV3TagIdWithResponse request returning *GetApiV3TagIdResponse
func (c *ClientWithResponses) GetApiV3TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV3TagIdResponse, error) {
	rsp, err := c.GetApiV3TagId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3TagIdResponse(rsp)
}

// PutApiV3TagIdWithBodyWithResponse request with arbitrary body returning *PutApiV3TagIdResponse
func (c *ClientWithResponses) PutApiV3TagIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV3TagIdResponse, error) {
	rsp, err := c.PutApiV3TagIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3TagIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV3TagIdWithResponse(ctx context.Context, id string, body PutApiV3TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV3TagIdResponse, error) {
	rsp, err := c.PutApiV3TagId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV3TagIdResponse(rsp)
}

// GetApiV3UpdateWithResponse request returning *GetApiV3UpdateResponse
func (c *ClientWithResponses) GetApiV3UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV3UpdateResponse, error) {
	rsp, err := c.GetApiV3Update(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3UpdateResponse(rsp)
}

// GetApiV3WantedCutoffWithResponse request returning *GetApiV3WantedCutoffResponse
func (c *ClientWithResponses) GetApiV3WantedCutoffWithResponse(ctx context.Context, params *GetApiV3WantedCutoffParams, reqEditors ...RequestEditorFn) (*GetApiV3WantedCutoffResponse, error) {
	rsp, err := c.GetApiV3WantedCutoff(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3WantedCutoffResponse(rsp)
}

// GetApiV3WantedMissingWithResponse request returning *GetApiV3WantedMissingResponse
func (c *ClientWithResponses) GetApiV3WantedMissingWithResponse(ctx context.Context, params *GetApiV3WantedMissingParams, reqEditors ...RequestEditorFn) (*GetApiV3WantedMissingResponse, error) {
	rsp, err := c.GetApiV3WantedMissing(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV3WantedMissingResponse(rsp)
}

// GetContentPathWithResponse request returning *GetContentPathResponse
func (c *ClientWithResponses) GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error) {
	rsp, err := c.GetContentPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentPathResponse(rsp)
}

// GetFeedV3CalendarRadarrIcsWithResponse request returning *GetFeedV3CalendarRadarrIcsResponse
func (c *ClientWithResponses) GetFeedV3CalendarRadarrIcsWithResponse(ctx context.Context, params *GetFeedV3CalendarRadarrIcsParams, reqEditors ...RequestEditorFn) (*GetFeedV3CalendarRadarrIcsResponse, error) {
	rsp, err := c.GetFeedV3CalendarRadarrIcs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedV3CalendarRadarrIcsResponse(rsp)
}

// GetLoginWithResponse request returning *GetLoginResponse
func (c *ClientWithResponses) GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error) {
	rsp, err := c.GetLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetLogoutWithResponse request returning *GetLogoutResponse
func (c *ClientWithResponses) GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error) {
	rsp, err := c.GetLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogoutResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// HeadPingWithResponse request returning *HeadPingResponse
func (c *ClientWithResponses) HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error) {
	rsp, err := c.HeadPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadPingResponse(rsp)
}

// GetPathWithResponse request returning *GetPathResponse
func (c *ClientWithResponses) GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error) {
	rsp, err := c.GetPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPathResponse(rsp)
}

// ParseGetApiResponse parses an HTTP response from a GetApiWithResponse call
func ParseGetApiResponse(rsp *http.Response) (*GetApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiInfoResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3AlttitleResponse parses an HTTP response from a GetApiV3AlttitleWithResponse call
func ParseGetApiV3AlttitleResponse(rsp *http.Response) (*GetApiV3AlttitleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3AlttitleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlternativeTitleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3AlttitleIdResponse parses an HTTP response from a GetApiV3AlttitleIdWithResponse call
func ParseGetApiV3AlttitleIdResponse(rsp *http.Response) (*GetApiV3AlttitleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3AlttitleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlternativeTitleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3AutotaggingResponse parses an HTTP response from a GetApiV3AutotaggingWithResponse call
func ParseGetApiV3AutotaggingResponse(rsp *http.Response) (*GetApiV3AutotaggingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3AutotaggingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AutoTaggingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3AutotaggingResponse parses an HTTP response from a PostApiV3AutotaggingWithResponse call
func ParsePostApiV3AutotaggingResponse(rsp *http.Response) (*PostApiV3AutotaggingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3AutotaggingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoTaggingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3AutotaggingSchemaResponse parses an HTTP response from a GetApiV3AutotaggingSchemaWithResponse call
func ParseGetApiV3AutotaggingSchemaResponse(rsp *http.Response) (*GetApiV3AutotaggingSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3AutotaggingSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3AutotaggingIdResponse parses an HTTP response from a DeleteApiV3AutotaggingIdWithResponse call
func ParseDeleteApiV3AutotaggingIdResponse(rsp *http.Response) (*DeleteApiV3AutotaggingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3AutotaggingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3AutotaggingIdResponse parses an HTTP response from a GetApiV3AutotaggingIdWithResponse call
func ParseGetApiV3AutotaggingIdResponse(rsp *http.Response) (*GetApiV3AutotaggingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3AutotaggingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoTaggingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3AutotaggingIdResponse parses an HTTP response from a PutApiV3AutotaggingIdWithResponse call
func ParsePutApiV3AutotaggingIdResponse(rsp *http.Response) (*PutApiV3AutotaggingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3AutotaggingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoTaggingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3BlocklistResponse parses an HTTP response from a GetApiV3BlocklistWithResponse call
func ParseGetApiV3BlocklistResponse(rsp *http.Response) (*GetApiV3BlocklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3BlocklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BlocklistResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3BlocklistBulkResponse parses an HTTP response from a DeleteApiV3BlocklistBulkWithResponse call
func ParseDeleteApiV3BlocklistBulkResponse(rsp *http.Response) (*DeleteApiV3BlocklistBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3BlocklistBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3BlocklistMovieResponse parses an HTTP response from a GetApiV3BlocklistMovieWithResponse call
func ParseGetApiV3BlocklistMovieResponse(rsp *http.Response) (*GetApiV3BlocklistMovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3BlocklistMovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BlocklistResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3BlocklistIdResponse parses an HTTP response from a DeleteApiV3BlocklistIdWithResponse call
func ParseDeleteApiV3BlocklistIdResponse(rsp *http.Response) (*DeleteApiV3BlocklistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3BlocklistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CalendarResponse parses an HTTP response from a GetApiV3CalendarWithResponse call
func ParseGetApiV3CalendarResponse(rsp *http.Response) (*GetApiV3CalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3CollectionResponse parses an HTTP response from a GetApiV3CollectionWithResponse call
func ParseGetApiV3CollectionResponse(rsp *http.Response) (*GetApiV3CollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CollectionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV3CollectionResponse parses an HTTP response from a PutApiV3CollectionWithResponse call
func ParsePutApiV3CollectionResponse(rsp *http.Response) (*PutApiV3CollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3CollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CollectionIdResponse parses an HTTP response from a GetApiV3CollectionIdWithResponse call
func ParseGetApiV3CollectionIdResponse(rsp *http.Response) (*GetApiV3CollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3CollectionIdResponse parses an HTTP response from a PutApiV3CollectionIdWithResponse call
func ParsePutApiV3CollectionIdResponse(rsp *http.Response) (*PutApiV3CollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3CollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3CommandResponse parses an HTTP response from a GetApiV3CommandWithResponse call
func ParseGetApiV3CommandResponse(rsp *http.Response) (*GetApiV3CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3CommandResponse parses an HTTP response from a PostApiV3CommandWithResponse call
func ParsePostApiV3CommandResponse(rsp *http.Response) (*PostApiV3CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3CommandIdResponse parses an HTTP response from a DeleteApiV3CommandIdWithResponse call
func ParseDeleteApiV3CommandIdResponse(rsp *http.Response) (*DeleteApiV3CommandIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3CommandIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CommandIdResponse parses an HTTP response from a GetApiV3CommandIdWithResponse call
func ParseGetApiV3CommandIdResponse(rsp *http.Response) (*GetApiV3CommandIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CommandIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigDownloadclientResponse parses an HTTP response from a GetApiV3ConfigDownloadclientWithResponse call
func ParseGetApiV3ConfigDownloadclientResponse(rsp *http.Response) (*GetApiV3ConfigDownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigDownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigDownloadclientIdResponse parses an HTTP response from a GetApiV3ConfigDownloadclientIdWithResponse call
func ParseGetApiV3ConfigDownloadclientIdResponse(rsp *http.Response) (*GetApiV3ConfigDownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigDownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigDownloadclientIdResponse parses an HTTP response from a PutApiV3ConfigDownloadclientIdWithResponse call
func ParsePutApiV3ConfigDownloadclientIdResponse(rsp *http.Response) (*PutApiV3ConfigDownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigDownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigHostResponse parses an HTTP response from a GetApiV3ConfigHostWithResponse call
func ParseGetApiV3ConfigHostResponse(rsp *http.Response) (*GetApiV3ConfigHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigHostIdResponse parses an HTTP response from a GetApiV3ConfigHostIdWithResponse call
func ParseGetApiV3ConfigHostIdResponse(rsp *http.Response) (*GetApiV3ConfigHostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigHostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigHostIdResponse parses an HTTP response from a PutApiV3ConfigHostIdWithResponse call
func ParsePutApiV3ConfigHostIdResponse(rsp *http.Response) (*PutApiV3ConfigHostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigHostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigImportlistResponse parses an HTTP response from a GetApiV3ConfigImportlistWithResponse call
func ParseGetApiV3ConfigImportlistResponse(rsp *http.Response) (*GetApiV3ConfigImportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigImportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigImportlistIdResponse parses an HTTP response from a GetApiV3ConfigImportlistIdWithResponse call
func ParseGetApiV3ConfigImportlistIdResponse(rsp *http.Response) (*GetApiV3ConfigImportlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigImportlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigImportlistIdResponse parses an HTTP response from a PutApiV3ConfigImportlistIdWithResponse call
func ParsePutApiV3ConfigImportlistIdResponse(rsp *http.Response) (*PutApiV3ConfigImportlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigImportlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigIndexerResponse parses an HTTP response from a GetApiV3ConfigIndexerWithResponse call
func ParseGetApiV3ConfigIndexerResponse(rsp *http.Response) (*GetApiV3ConfigIndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigIndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigIndexerIdResponse parses an HTTP response from a GetApiV3ConfigIndexerIdWithResponse call
func ParseGetApiV3ConfigIndexerIdResponse(rsp *http.Response) (*GetApiV3ConfigIndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigIndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigIndexerIdResponse parses an HTTP response from a PutApiV3ConfigIndexerIdWithResponse call
func ParsePutApiV3ConfigIndexerIdResponse(rsp *http.Response) (*PutApiV3ConfigIndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigIndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigMediamanagementResponse parses an HTTP response from a GetApiV3ConfigMediamanagementWithResponse call
func ParseGetApiV3ConfigMediamanagementResponse(rsp *http.Response) (*GetApiV3ConfigMediamanagementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigMediamanagementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaManagementConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigMediamanagementIdResponse parses an HTTP response from a GetApiV3ConfigMediamanagementIdWithResponse call
func ParseGetApiV3ConfigMediamanagementIdResponse(rsp *http.Response) (*GetApiV3ConfigMediamanagementIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigMediamanagementIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaManagementConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigMediamanagementIdResponse parses an HTTP response from a PutApiV3ConfigMediamanagementIdWithResponse call
func ParsePutApiV3ConfigMediamanagementIdResponse(rsp *http.Response) (*PutApiV3ConfigMediamanagementIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigMediamanagementIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaManagementConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigMetadataResponse parses an HTTP response from a GetApiV3ConfigMetadataWithResponse call
func ParseGetApiV3ConfigMetadataResponse(rsp *http.Response) (*GetApiV3ConfigMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigMetadataIdResponse parses an HTTP response from a GetApiV3ConfigMetadataIdWithResponse call
func ParseGetApiV3ConfigMetadataIdResponse(rsp *http.Response) (*GetApiV3ConfigMetadataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigMetadataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigMetadataIdResponse parses an HTTP response from a PutApiV3ConfigMetadataIdWithResponse call
func ParsePutApiV3ConfigMetadataIdResponse(rsp *http.Response) (*PutApiV3ConfigMetadataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigMetadataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigNamingResponse parses an HTTP response from a GetApiV3ConfigNamingWithResponse call
func ParseGetApiV3ConfigNamingResponse(rsp *http.Response) (*GetApiV3ConfigNamingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigNamingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamingConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigNamingExamplesResponse parses an HTTP response from a GetApiV3ConfigNamingExamplesWithResponse call
func ParseGetApiV3ConfigNamingExamplesResponse(rsp *http.Response) (*GetApiV3ConfigNamingExamplesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigNamingExamplesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ConfigNamingIdResponse parses an HTTP response from a GetApiV3ConfigNamingIdWithResponse call
func ParseGetApiV3ConfigNamingIdResponse(rsp *http.Response) (*GetApiV3ConfigNamingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigNamingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamingConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigNamingIdResponse parses an HTTP response from a PutApiV3ConfigNamingIdWithResponse call
func ParsePutApiV3ConfigNamingIdResponse(rsp *http.Response) (*PutApiV3ConfigNamingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigNamingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamingConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ConfigUiResponse parses an HTTP response from a GetApiV3ConfigUiWithResponse call
func ParseGetApiV3ConfigUiResponse(rsp *http.Response) (*GetApiV3ConfigUiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigUiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ConfigUiIdResponse parses an HTTP response from a GetApiV3ConfigUiIdWithResponse call
func ParseGetApiV3ConfigUiIdResponse(rsp *http.Response) (*GetApiV3ConfigUiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ConfigUiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ConfigUiIdResponse parses an HTTP response from a PutApiV3ConfigUiIdWithResponse call
func ParsePutApiV3ConfigUiIdResponse(rsp *http.Response) (*PutApiV3ConfigUiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ConfigUiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3CreditResponse parses an HTTP response from a GetApiV3CreditWithResponse call
func ParseGetApiV3CreditResponse(rsp *http.Response) (*GetApiV3CreditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CreditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CreditIdResponse parses an HTTP response from a GetApiV3CreditIdWithResponse call
func ParseGetApiV3CreditIdResponse(rsp *http.Response) (*GetApiV3CreditIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CreditIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3CustomfilterResponse parses an HTTP response from a GetApiV3CustomfilterWithResponse call
func ParseGetApiV3CustomfilterResponse(rsp *http.Response) (*GetApiV3CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3CustomfilterResponse parses an HTTP response from a PostApiV3CustomfilterWithResponse call
func ParsePostApiV3CustomfilterResponse(rsp *http.Response) (*PostApiV3CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3CustomfilterIdResponse parses an HTTP response from a DeleteApiV3CustomfilterIdWithResponse call
func ParseDeleteApiV3CustomfilterIdResponse(rsp *http.Response) (*DeleteApiV3CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CustomfilterIdResponse parses an HTTP response from a GetApiV3CustomfilterIdWithResponse call
func ParseGetApiV3CustomfilterIdResponse(rsp *http.Response) (*GetApiV3CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3CustomfilterIdResponse parses an HTTP response from a PutApiV3CustomfilterIdWithResponse call
func ParsePutApiV3CustomfilterIdResponse(rsp *http.Response) (*PutApiV3CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3CustomformatResponse parses an HTTP response from a GetApiV3CustomformatWithResponse call
func ParseGetApiV3CustomformatResponse(rsp *http.Response) (*GetApiV3CustomformatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CustomformatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomFormatResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3CustomformatResponse parses an HTTP response from a PostApiV3CustomformatWithResponse call
func ParsePostApiV3CustomformatResponse(rsp *http.Response) (*PostApiV3CustomformatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3CustomformatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormatResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3CustomformatBulkResponse parses an HTTP response from a DeleteApiV3CustomformatBulkWithResponse call
func ParseDeleteApiV3CustomformatBulkResponse(rsp *http.Response) (*DeleteApiV3CustomformatBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3CustomformatBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3CustomformatBulkResponse parses an HTTP response from a PutApiV3CustomformatBulkWithResponse call
func ParsePutApiV3CustomformatBulkResponse(rsp *http.Response) (*PutApiV3CustomformatBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3CustomformatBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormatResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3CustomformatSchemaResponse parses an HTTP response from a GetApiV3CustomformatSchemaWithResponse call
func ParseGetApiV3CustomformatSchemaResponse(rsp *http.Response) (*GetApiV3CustomformatSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CustomformatSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3CustomformatIdResponse parses an HTTP response from a DeleteApiV3CustomformatIdWithResponse call
func ParseDeleteApiV3CustomformatIdResponse(rsp *http.Response) (*DeleteApiV3CustomformatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3CustomformatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3CustomformatIdResponse parses an HTTP response from a GetApiV3CustomformatIdWithResponse call
func ParseGetApiV3CustomformatIdResponse(rsp *http.Response) (*GetApiV3CustomformatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3CustomformatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormatResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3CustomformatIdResponse parses an HTTP response from a PutApiV3CustomformatIdWithResponse call
func ParsePutApiV3CustomformatIdResponse(rsp *http.Response) (*PutApiV3CustomformatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3CustomformatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFormatResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3DelayprofileResponse parses an HTTP response from a GetApiV3DelayprofileWithResponse call
func ParseGetApiV3DelayprofileResponse(rsp *http.Response) (*GetApiV3DelayprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DelayprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DelayProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3DelayprofileResponse parses an HTTP response from a PostApiV3DelayprofileWithResponse call
func ParsePostApiV3DelayprofileResponse(rsp *http.Response) (*PostApiV3DelayprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3DelayprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DelayProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3DelayprofileReorderIdResponse parses an HTTP response from a PutApiV3DelayprofileReorderIdWithResponse call
func ParsePutApiV3DelayprofileReorderIdResponse(rsp *http.Response) (*PutApiV3DelayprofileReorderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3DelayprofileReorderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DelayProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3DelayprofileIdResponse parses an HTTP response from a DeleteApiV3DelayprofileIdWithResponse call
func ParseDeleteApiV3DelayprofileIdResponse(rsp *http.Response) (*DeleteApiV3DelayprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3DelayprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3DelayprofileIdResponse parses an HTTP response from a GetApiV3DelayprofileIdWithResponse call
func ParseGetApiV3DelayprofileIdResponse(rsp *http.Response) (*GetApiV3DelayprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DelayprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DelayProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3DelayprofileIdResponse parses an HTTP response from a PutApiV3DelayprofileIdWithResponse call
func ParsePutApiV3DelayprofileIdResponse(rsp *http.Response) (*PutApiV3DelayprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3DelayprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DelayProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3DiskspaceResponse parses an HTTP response from a GetApiV3DiskspaceWithResponse call
func ParseGetApiV3DiskspaceResponse(rsp *http.Response) (*GetApiV3DiskspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DiskspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DiskSpaceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3DownloadclientResponse parses an HTTP response from a GetApiV3DownloadclientWithResponse call
func ParseGetApiV3DownloadclientResponse(rsp *http.Response) (*GetApiV3DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3DownloadclientResponse parses an HTTP response from a PostApiV3DownloadclientWithResponse call
func ParsePostApiV3DownloadclientResponse(rsp *http.Response) (*PostApiV3DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3DownloadclientActionNameResponse parses an HTTP response from a PostApiV3DownloadclientActionNameWithResponse call
func ParsePostApiV3DownloadclientActionNameResponse(rsp *http.Response) (*PostApiV3DownloadclientActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3DownloadclientActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3DownloadclientBulkResponse parses an HTTP response from a DeleteApiV3DownloadclientBulkWithResponse call
func ParseDeleteApiV3DownloadclientBulkResponse(rsp *http.Response) (*DeleteApiV3DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3DownloadclientBulkResponse parses an HTTP response from a PutApiV3DownloadclientBulkWithResponse call
func ParsePutApiV3DownloadclientBulkResponse(rsp *http.Response) (*PutApiV3DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3DownloadclientSchemaResponse parses an HTTP response from a GetApiV3DownloadclientSchemaWithResponse call
func ParseGetApiV3DownloadclientSchemaResponse(rsp *http.Response) (*GetApiV3DownloadclientSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DownloadclientSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3DownloadclientTestResponse parses an HTTP response from a PostApiV3DownloadclientTestWithResponse call
func ParsePostApiV3DownloadclientTestResponse(rsp *http.Response) (*PostApiV3DownloadclientTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3DownloadclientTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3DownloadclientTestallResponse parses an HTTP response from a PostApiV3DownloadclientTestallWithResponse call
func ParsePostApiV3DownloadclientTestallResponse(rsp *http.Response) (*PostApiV3DownloadclientTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3DownloadclientTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3DownloadclientIdResponse parses an HTTP response from a DeleteApiV3DownloadclientIdWithResponse call
func ParseDeleteApiV3DownloadclientIdResponse(rsp *http.Response) (*DeleteApiV3DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3DownloadclientIdResponse parses an HTTP response from a GetApiV3DownloadclientIdWithResponse call
func ParseGetApiV3DownloadclientIdResponse(rsp *http.Response) (*GetApiV3DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3DownloadclientIdResponse parses an HTTP response from a PutApiV3DownloadclientIdWithResponse call
func ParsePutApiV3DownloadclientIdResponse(rsp *http.Response) (*PutApiV3DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ExclusionsResponse parses an HTTP response from a GetApiV3ExclusionsWithResponse call
func ParseGetApiV3ExclusionsResponse(rsp *http.Response) (*GetApiV3ExclusionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ExclusionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImportListExclusionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ExclusionsResponse parses an HTTP response from a PostApiV3ExclusionsWithResponse call
func ParsePostApiV3ExclusionsResponse(rsp *http.Response) (*PostApiV3ExclusionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ExclusionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListExclusionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3ExclusionsBulkResponse parses an HTTP response from a DeleteApiV3ExclusionsBulkWithResponse call
func ParseDeleteApiV3ExclusionsBulkResponse(rsp *http.Response) (*DeleteApiV3ExclusionsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3ExclusionsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3ExclusionsBulkResponse parses an HTTP response from a PostApiV3ExclusionsBulkWithResponse call
func ParsePostApiV3ExclusionsBulkResponse(rsp *http.Response) (*PostApiV3ExclusionsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ExclusionsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ExclusionsPagedResponse parses an HTTP response from a GetApiV3ExclusionsPagedWithResponse call
func ParseGetApiV3ExclusionsPagedResponse(rsp *http.Response) (*GetApiV3ExclusionsPagedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ExclusionsPagedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListExclusionResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3ExclusionsIdResponse parses an HTTP response from a DeleteApiV3ExclusionsIdWithResponse call
func ParseDeleteApiV3ExclusionsIdResponse(rsp *http.Response) (*DeleteApiV3ExclusionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3ExclusionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ExclusionsIdResponse parses an HTTP response from a GetApiV3ExclusionsIdWithResponse call
func ParseGetApiV3ExclusionsIdResponse(rsp *http.Response) (*GetApiV3ExclusionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ExclusionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListExclusionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ExclusionsIdResponse parses an HTTP response from a PutApiV3ExclusionsIdWithResponse call
func ParsePutApiV3ExclusionsIdResponse(rsp *http.Response) (*PutApiV3ExclusionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ExclusionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListExclusionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ExtrafileResponse parses an HTTP response from a GetApiV3ExtrafileWithResponse call
func ParseGetApiV3ExtrafileResponse(rsp *http.Response) (*GetApiV3ExtrafileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ExtrafileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExtraFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3FilesystemResponse parses an HTTP response from a GetApiV3FilesystemWithResponse call
func ParseGetApiV3FilesystemResponse(rsp *http.Response) (*GetApiV3FilesystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3FilesystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3FilesystemMediafilesResponse parses an HTTP response from a GetApiV3FilesystemMediafilesWithResponse call
func ParseGetApiV3FilesystemMediafilesResponse(rsp *http.Response) (*GetApiV3FilesystemMediafilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3FilesystemMediafilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3FilesystemTypeResponse parses an HTTP response from a GetApiV3FilesystemTypeWithResponse call
func ParseGetApiV3FilesystemTypeResponse(rsp *http.Response) (*GetApiV3FilesystemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3FilesystemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3HealthResponse parses an HTTP response from a GetApiV3HealthWithResponse call
func ParseGetApiV3HealthResponse(rsp *http.Response) (*GetApiV3HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HealthResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3HistoryResponse parses an HTTP response from a GetApiV3HistoryWithResponse call
func ParseGetApiV3HistoryResponse(rsp *http.Response) (*GetApiV3HistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3HistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistoryResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3HistoryFailedIdResponse parses an HTTP response from a PostApiV3HistoryFailedIdWithResponse call
func ParsePostApiV3HistoryFailedIdResponse(rsp *http.Response) (*PostApiV3HistoryFailedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3HistoryFailedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3HistoryMovieResponse parses an HTTP response from a GetApiV3HistoryMovieWithResponse call
func ParseGetApiV3HistoryMovieResponse(rsp *http.Response) (*GetApiV3HistoryMovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3HistoryMovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3HistorySinceResponse parses an HTTP response from a GetApiV3HistorySinceWithResponse call
func ParseGetApiV3HistorySinceResponse(rsp *http.Response) (*GetApiV3HistorySinceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3HistorySinceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ImportlistResponse parses an HTTP response from a GetApiV3ImportlistWithResponse call
func ParseGetApiV3ImportlistResponse(rsp *http.Response) (*GetApiV3ImportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ImportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ImportlistResponse parses an HTTP response from a PostApiV3ImportlistWithResponse call
func ParsePostApiV3ImportlistResponse(rsp *http.Response) (*PostApiV3ImportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ImportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ImportlistActionNameResponse parses an HTTP response from a PostApiV3ImportlistActionNameWithResponse call
func ParsePostApiV3ImportlistActionNameResponse(rsp *http.Response) (*PostApiV3ImportlistActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ImportlistActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3ImportlistBulkResponse parses an HTTP response from a DeleteApiV3ImportlistBulkWithResponse call
func ParseDeleteApiV3ImportlistBulkResponse(rsp *http.Response) (*DeleteApiV3ImportlistBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3ImportlistBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3ImportlistBulkResponse parses an HTTP response from a PutApiV3ImportlistBulkWithResponse call
func ParsePutApiV3ImportlistBulkResponse(rsp *http.Response) (*PutApiV3ImportlistBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ImportlistBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ImportlistMovieResponse parses an HTTP response from a GetApiV3ImportlistMovieWithResponse call
func ParseGetApiV3ImportlistMovieResponse(rsp *http.Response) (*GetApiV3ImportlistMovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ImportlistMovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3ImportlistMovieResponse parses an HTTP response from a PostApiV3ImportlistMovieWithResponse call
func ParsePostApiV3ImportlistMovieResponse(rsp *http.Response) (*PostApiV3ImportlistMovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ImportlistMovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ImportlistSchemaResponse parses an HTTP response from a GetApiV3ImportlistSchemaWithResponse call
func ParseGetApiV3ImportlistSchemaResponse(rsp *http.Response) (*GetApiV3ImportlistSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ImportlistSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ImportlistTestResponse parses an HTTP response from a PostApiV3ImportlistTestWithResponse call
func ParsePostApiV3ImportlistTestResponse(rsp *http.Response) (*PostApiV3ImportlistTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ImportlistTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3ImportlistTestallResponse parses an HTTP response from a PostApiV3ImportlistTestallWithResponse call
func ParsePostApiV3ImportlistTestallResponse(rsp *http.Response) (*PostApiV3ImportlistTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ImportlistTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3ImportlistIdResponse parses an HTTP response from a DeleteApiV3ImportlistIdWithResponse call
func ParseDeleteApiV3ImportlistIdResponse(rsp *http.Response) (*DeleteApiV3ImportlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3ImportlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ImportlistIdResponse parses an HTTP response from a GetApiV3ImportlistIdWithResponse call
func ParseGetApiV3ImportlistIdResponse(rsp *http.Response) (*GetApiV3ImportlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ImportlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ImportlistIdResponse parses an HTTP response from a PutApiV3ImportlistIdWithResponse call
func ParsePutApiV3ImportlistIdResponse(rsp *http.Response) (*PutApiV3ImportlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ImportlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportListResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3IndexerResponse parses an HTTP response from a GetApiV3IndexerWithResponse call
func ParseGetApiV3IndexerResponse(rsp *http.Response) (*GetApiV3IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3IndexerResponse parses an HTTP response from a PostApiV3IndexerWithResponse call
func ParsePostApiV3IndexerResponse(rsp *http.Response) (*PostApiV3IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3IndexerActionNameResponse parses an HTTP response from a PostApiV3IndexerActionNameWithResponse call
func ParsePostApiV3IndexerActionNameResponse(rsp *http.Response) (*PostApiV3IndexerActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3IndexerActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3IndexerBulkResponse parses an HTTP response from a DeleteApiV3IndexerBulkWithResponse call
func ParseDeleteApiV3IndexerBulkResponse(rsp *http.Response) (*DeleteApiV3IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3IndexerBulkResponse parses an HTTP response from a PutApiV3IndexerBulkWithResponse call
func ParsePutApiV3IndexerBulkResponse(rsp *http.Response) (*PutApiV3IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3IndexerSchemaResponse parses an HTTP response from a GetApiV3IndexerSchemaWithResponse call
func ParseGetApiV3IndexerSchemaResponse(rsp *http.Response) (*GetApiV3IndexerSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3IndexerSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3IndexerTestResponse parses an HTTP response from a PostApiV3IndexerTestWithResponse call
func ParsePostApiV3IndexerTestResponse(rsp *http.Response) (*PostApiV3IndexerTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3IndexerTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3IndexerTestallResponse parses an HTTP response from a PostApiV3IndexerTestallWithResponse call
func ParsePostApiV3IndexerTestallResponse(rsp *http.Response) (*PostApiV3IndexerTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3IndexerTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3IndexerIdResponse parses an HTTP response from a DeleteApiV3IndexerIdWithResponse call
func ParseDeleteApiV3IndexerIdResponse(rsp *http.Response) (*DeleteApiV3IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3IndexerIdResponse parses an HTTP response from a GetApiV3IndexerIdWithResponse call
func ParseGetApiV3IndexerIdResponse(rsp *http.Response) (*GetApiV3IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3IndexerIdResponse parses an HTTP response from a PutApiV3IndexerIdWithResponse call
func ParsePutApiV3IndexerIdResponse(rsp *http.Response) (*PutApiV3IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3IndexerflagResponse parses an HTTP response from a GetApiV3IndexerflagWithResponse call
func ParseGetApiV3IndexerflagResponse(rsp *http.Response) (*GetApiV3IndexerflagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3IndexerflagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerFlagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LanguageResponse parses an HTTP response from a GetApiV3LanguageWithResponse call
func ParseGetApiV3LanguageResponse(rsp *http.Response) (*GetApiV3LanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LanguageIdResponse parses an HTTP response from a GetApiV3LanguageIdWithResponse call
func ParseGetApiV3LanguageIdResponse(rsp *http.Response) (*GetApiV3LanguageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LanguageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LocalizationResponse parses an HTTP response from a GetApiV3LocalizationWithResponse call
func ParseGetApiV3LocalizationResponse(rsp *http.Response) (*GetApiV3LocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LocalizationLanguageResponse parses an HTTP response from a GetApiV3LocalizationLanguageWithResponse call
func ParseGetApiV3LocalizationLanguageResponse(rsp *http.Response) (*GetApiV3LocalizationLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LocalizationLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalizationLanguageResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3LogResponse parses an HTTP response from a GetApiV3LogWithResponse call
func ParseGetApiV3LogResponse(rsp *http.Response) (*GetApiV3LogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3LogFileResponse parses an HTTP response from a GetApiV3LogFileWithResponse call
func ParseGetApiV3LogFileResponse(rsp *http.Response) (*GetApiV3LogFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LogFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LogFileUpdateResponse parses an HTTP response from a GetApiV3LogFileUpdateWithResponse call
func ParseGetApiV3LogFileUpdateResponse(rsp *http.Response) (*GetApiV3LogFileUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LogFileUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3LogFileUpdateFilenameResponse parses an HTTP response from a GetApiV3LogFileUpdateFilenameWithResponse call
func ParseGetApiV3LogFileUpdateFilenameResponse(rsp *http.Response) (*GetApiV3LogFileUpdateFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LogFileUpdateFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3LogFileFilenameResponse parses an HTTP response from a GetApiV3LogFileFilenameWithResponse call
func ParseGetApiV3LogFileFilenameResponse(rsp *http.Response) (*GetApiV3LogFileFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3LogFileFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ManualimportResponse parses an HTTP response from a GetApiV3ManualimportWithResponse call
func ParseGetApiV3ManualimportResponse(rsp *http.Response) (*GetApiV3ManualimportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ManualimportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ManualImportResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ManualimportResponse parses an HTTP response from a PostApiV3ManualimportWithResponse call
func ParsePostApiV3ManualimportResponse(rsp *http.Response) (*PostApiV3ManualimportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ManualimportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MediacoverMovieIdFilenameResponse parses an HTTP response from a GetApiV3MediacoverMovieIdFilenameWithResponse call
func ParseGetApiV3MediacoverMovieIdFilenameResponse(rsp *http.Response) (*GetApiV3MediacoverMovieIdFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MediacoverMovieIdFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MetadataResponse parses an HTTP response from a GetApiV3MetadataWithResponse call
func ParseGetApiV3MetadataResponse(rsp *http.Response) (*GetApiV3MetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MetadataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3MetadataResponse parses an HTTP response from a PostApiV3MetadataWithResponse call
func ParsePostApiV3MetadataResponse(rsp *http.Response) (*PostApiV3MetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3MetadataActionNameResponse parses an HTTP response from a PostApiV3MetadataActionNameWithResponse call
func ParsePostApiV3MetadataActionNameResponse(rsp *http.Response) (*PostApiV3MetadataActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MetadataActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MetadataSchemaResponse parses an HTTP response from a GetApiV3MetadataSchemaWithResponse call
func ParseGetApiV3MetadataSchemaResponse(rsp *http.Response) (*GetApiV3MetadataSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MetadataSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MetadataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3MetadataTestResponse parses an HTTP response from a PostApiV3MetadataTestWithResponse call
func ParsePostApiV3MetadataTestResponse(rsp *http.Response) (*PostApiV3MetadataTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MetadataTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3MetadataTestallResponse parses an HTTP response from a PostApiV3MetadataTestallWithResponse call
func ParsePostApiV3MetadataTestallResponse(rsp *http.Response) (*PostApiV3MetadataTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MetadataTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3MetadataIdResponse parses an HTTP response from a DeleteApiV3MetadataIdWithResponse call
func ParseDeleteApiV3MetadataIdResponse(rsp *http.Response) (*DeleteApiV3MetadataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3MetadataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MetadataIdResponse parses an HTTP response from a GetApiV3MetadataIdWithResponse call
func ParseGetApiV3MetadataIdResponse(rsp *http.Response) (*GetApiV3MetadataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MetadataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3MetadataIdResponse parses an HTTP response from a PutApiV3MetadataIdWithResponse call
func ParsePutApiV3MetadataIdResponse(rsp *http.Response) (*PutApiV3MetadataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3MetadataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3MovieResponse parses an HTTP response from a GetApiV3MovieWithResponse call
func ParseGetApiV3MovieResponse(rsp *http.Response) (*GetApiV3MovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3MovieResponse parses an HTTP response from a PostApiV3MovieWithResponse call
func ParsePostApiV3MovieResponse(rsp *http.Response) (*PostApiV3MovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3MovieEditorResponse parses an HTTP response from a DeleteApiV3MovieEditorWithResponse call
func ParseDeleteApiV3MovieEditorResponse(rsp *http.Response) (*DeleteApiV3MovieEditorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3MovieEditorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3MovieEditorResponse parses an HTTP response from a PutApiV3MovieEditorWithResponse call
func ParsePutApiV3MovieEditorResponse(rsp *http.Response) (*PutApiV3MovieEditorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3MovieEditorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3MovieImportResponse parses an HTTP response from a PostApiV3MovieImportWithResponse call
func ParsePostApiV3MovieImportResponse(rsp *http.Response) (*PostApiV3MovieImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3MovieImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3MovieLookupResponse parses an HTTP response from a GetApiV3MovieLookupWithResponse call
func ParseGetApiV3MovieLookupResponse(rsp *http.Response) (*GetApiV3MovieLookupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MovieLookupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3MovieLookupImdbResponse parses an HTTP response from a GetApiV3MovieLookupImdbWithResponse call
func ParseGetApiV3MovieLookupImdbResponse(rsp *http.Response) (*GetApiV3MovieLookupImdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MovieLookupImdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3MovieLookupTmdbResponse parses an HTTP response from a GetApiV3MovieLookupTmdbWithResponse call
func ParseGetApiV3MovieLookupTmdbResponse(rsp *http.Response) (*GetApiV3MovieLookupTmdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MovieLookupTmdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3MovieIdResponse parses an HTTP response from a DeleteApiV3MovieIdWithResponse call
func ParseDeleteApiV3MovieIdResponse(rsp *http.Response) (*DeleteApiV3MovieIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3MovieIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MovieIdResponse parses an HTTP response from a GetApiV3MovieIdWithResponse call
func ParseGetApiV3MovieIdResponse(rsp *http.Response) (*GetApiV3MovieIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MovieIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3MovieIdResponse parses an HTTP response from a PutApiV3MovieIdWithResponse call
func ParsePutApiV3MovieIdResponse(rsp *http.Response) (*PutApiV3MovieIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3MovieIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3MoviefileResponse parses an HTTP response from a GetApiV3MoviefileWithResponse call
func ParseGetApiV3MoviefileResponse(rsp *http.Response) (*GetApiV3MoviefileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MoviefileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MovieFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3MoviefileBulkResponse parses an HTTP response from a DeleteApiV3MoviefileBulkWithResponse call
func ParseDeleteApiV3MoviefileBulkResponse(rsp *http.Response) (*DeleteApiV3MoviefileBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3MoviefileBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV3MoviefileEditorResponse parses an HTTP response from a PutApiV3MoviefileEditorWithResponse call
func ParsePutApiV3MoviefileEditorResponse(rsp *http.Response) (*PutApiV3MoviefileEditorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3MoviefileEditorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3MoviefileIdResponse parses an HTTP response from a DeleteApiV3MoviefileIdWithResponse call
func ParseDeleteApiV3MoviefileIdResponse(rsp *http.Response) (*DeleteApiV3MoviefileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3MoviefileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3MoviefileIdResponse parses an HTTP response from a GetApiV3MoviefileIdWithResponse call
func ParseGetApiV3MoviefileIdResponse(rsp *http.Response) (*GetApiV3MoviefileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3MoviefileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3MoviefileIdResponse parses an HTTP response from a PutApiV3MoviefileIdWithResponse call
func ParsePutApiV3MoviefileIdResponse(rsp *http.Response) (*PutApiV3MoviefileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3MoviefileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3NotificationResponse parses an HTTP response from a GetApiV3NotificationWithResponse call
func ParseGetApiV3NotificationResponse(rsp *http.Response) (*GetApiV3NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3NotificationResponse parses an HTTP response from a PostApiV3NotificationWithResponse call
func ParsePostApiV3NotificationResponse(rsp *http.Response) (*PostApiV3NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3NotificationActionNameResponse parses an HTTP response from a PostApiV3NotificationActionNameWithResponse call
func ParsePostApiV3NotificationActionNameResponse(rsp *http.Response) (*PostApiV3NotificationActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3NotificationActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3NotificationSchemaResponse parses an HTTP response from a GetApiV3NotificationSchemaWithResponse call
func ParseGetApiV3NotificationSchemaResponse(rsp *http.Response) (*GetApiV3NotificationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3NotificationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3NotificationTestResponse parses an HTTP response from a PostApiV3NotificationTestWithResponse call
func ParsePostApiV3NotificationTestResponse(rsp *http.Response) (*PostApiV3NotificationTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3NotificationTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3NotificationTestallResponse parses an HTTP response from a PostApiV3NotificationTestallWithResponse call
func ParsePostApiV3NotificationTestallResponse(rsp *http.Response) (*PostApiV3NotificationTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3NotificationTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3NotificationIdResponse parses an HTTP response from a DeleteApiV3NotificationIdWithResponse call
func ParseDeleteApiV3NotificationIdResponse(rsp *http.Response) (*DeleteApiV3NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3NotificationIdResponse parses an HTTP response from a GetApiV3NotificationIdWithResponse call
func ParseGetApiV3NotificationIdResponse(rsp *http.Response) (*GetApiV3NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3NotificationIdResponse parses an HTTP response from a PutApiV3NotificationIdWithResponse call
func ParsePutApiV3NotificationIdResponse(rsp *http.Response) (*PutApiV3NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3ParseResponse parses an HTTP response from a GetApiV3ParseWithResponse call
func ParseGetApiV3ParseResponse(rsp *http.Response) (*GetApiV3ParseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ParseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3QualitydefinitionResponse parses an HTTP response from a GetApiV3QualitydefinitionWithResponse call
func ParseGetApiV3QualitydefinitionResponse(rsp *http.Response) (*GetApiV3QualitydefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QualitydefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []QualityDefinitionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3QualitydefinitionUpdateResponse parses an HTTP response from a PutApiV3QualitydefinitionUpdateWithResponse call
func ParsePutApiV3QualitydefinitionUpdateResponse(rsp *http.Response) (*PutApiV3QualitydefinitionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3QualitydefinitionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3QualitydefinitionIdResponse parses an HTTP response from a GetApiV3QualitydefinitionIdWithResponse call
func ParseGetApiV3QualitydefinitionIdResponse(rsp *http.Response) (*GetApiV3QualitydefinitionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QualitydefinitionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityDefinitionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3QualitydefinitionIdResponse parses an HTTP response from a PutApiV3QualitydefinitionIdWithResponse call
func ParsePutApiV3QualitydefinitionIdResponse(rsp *http.Response) (*PutApiV3QualitydefinitionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3QualitydefinitionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityDefinitionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3QualityprofileResponse parses an HTTP response from a GetApiV3QualityprofileWithResponse call
func ParseGetApiV3QualityprofileResponse(rsp *http.Response) (*GetApiV3QualityprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QualityprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []QualityProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3QualityprofileResponse parses an HTTP response from a PostApiV3QualityprofileWithResponse call
func ParsePostApiV3QualityprofileResponse(rsp *http.Response) (*PostApiV3QualityprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3QualityprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3QualityprofileSchemaResponse parses an HTTP response from a GetApiV3QualityprofileSchemaWithResponse call
func ParseGetApiV3QualityprofileSchemaResponse(rsp *http.Response) (*GetApiV3QualityprofileSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QualityprofileSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3QualityprofileIdResponse parses an HTTP response from a DeleteApiV3QualityprofileIdWithResponse call
func ParseDeleteApiV3QualityprofileIdResponse(rsp *http.Response) (*DeleteApiV3QualityprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3QualityprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3QualityprofileIdResponse parses an HTTP response from a GetApiV3QualityprofileIdWithResponse call
func ParseGetApiV3QualityprofileIdResponse(rsp *http.Response) (*GetApiV3QualityprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QualityprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3QualityprofileIdResponse parses an HTTP response from a PutApiV3QualityprofileIdWithResponse call
func ParsePutApiV3QualityprofileIdResponse(rsp *http.Response) (*PutApiV3QualityprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3QualityprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QualityProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3QueueResponse parses an HTTP response from a GetApiV3QueueWithResponse call
func ParseGetApiV3QueueResponse(rsp *http.Response) (*GetApiV3QueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV3QueueBulkResponse parses an HTTP response from a DeleteApiV3QueueBulkWithResponse call
func ParseDeleteApiV3QueueBulkResponse(rsp *http.Response) (*DeleteApiV3QueueBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3QueueBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3QueueDetailsResponse parses an HTTP response from a GetApiV3QueueDetailsWithResponse call
func ParseGetApiV3QueueDetailsResponse(rsp *http.Response) (*GetApiV3QueueDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QueueDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []QueueResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3QueueGrabBulkResponse parses an HTTP response from a PostApiV3QueueGrabBulkWithResponse call
func ParsePostApiV3QueueGrabBulkResponse(rsp *http.Response) (*PostApiV3QueueGrabBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3QueueGrabBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3QueueGrabIdResponse parses an HTTP response from a PostApiV3QueueGrabIdWithResponse call
func ParsePostApiV3QueueGrabIdResponse(rsp *http.Response) (*PostApiV3QueueGrabIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3QueueGrabIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3QueueStatusResponse parses an HTTP response from a GetApiV3QueueStatusWithResponse call
func ParseGetApiV3QueueStatusResponse(rsp *http.Response) (*GetApiV3QueueStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3QueueStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueStatusResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3QueueIdResponse parses an HTTP response from a DeleteApiV3QueueIdWithResponse call
func ParseDeleteApiV3QueueIdResponse(rsp *http.Response) (*DeleteApiV3QueueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3QueueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ReleaseResponse parses an HTTP response from a GetApiV3ReleaseWithResponse call
func ParseGetApiV3ReleaseResponse(rsp *http.Response) (*GetApiV3ReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV3ReleaseResponse parses an HTTP response from a PostApiV3ReleaseWithResponse call
func ParsePostApiV3ReleaseResponse(rsp *http.Response) (*PostApiV3ReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3ReleasePushResponse parses an HTTP response from a PostApiV3ReleasePushWithResponse call
func ParsePostApiV3ReleasePushResponse(rsp *http.Response) (*PostApiV3ReleasePushResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ReleasePushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3ReleaseprofileResponse parses an HTTP response from a GetApiV3ReleaseprofileWithResponse call
func ParseGetApiV3ReleaseprofileResponse(rsp *http.Response) (*GetApiV3ReleaseprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ReleaseprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReleaseProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3ReleaseprofileResponse parses an HTTP response from a PostApiV3ReleaseprofileWithResponse call
func ParsePostApiV3ReleaseprofileResponse(rsp *http.Response) (*PostApiV3ReleaseprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3ReleaseprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3ReleaseprofileIdResponse parses an HTTP response from a DeleteApiV3ReleaseprofileIdWithResponse call
func ParseDeleteApiV3ReleaseprofileIdResponse(rsp *http.Response) (*DeleteApiV3ReleaseprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3ReleaseprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3ReleaseprofileIdResponse parses an HTTP response from a GetApiV3ReleaseprofileIdWithResponse call
func ParseGetApiV3ReleaseprofileIdResponse(rsp *http.Response) (*GetApiV3ReleaseprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3ReleaseprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3ReleaseprofileIdResponse parses an HTTP response from a PutApiV3ReleaseprofileIdWithResponse call
func ParsePutApiV3ReleaseprofileIdResponse(rsp *http.Response) (*PutApiV3ReleaseprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3ReleaseprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3RemotepathmappingResponse parses an HTTP response from a GetApiV3RemotepathmappingWithResponse call
func ParseGetApiV3RemotepathmappingResponse(rsp *http.Response) (*GetApiV3RemotepathmappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3RemotepathmappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RemotePathMappingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3RemotepathmappingResponse parses an HTTP response from a PostApiV3RemotepathmappingWithResponse call
func ParsePostApiV3RemotepathmappingResponse(rsp *http.Response) (*PostApiV3RemotepathmappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3RemotepathmappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemotePathMappingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3RemotepathmappingIdResponse parses an HTTP response from a DeleteApiV3RemotepathmappingIdWithResponse call
func ParseDeleteApiV3RemotepathmappingIdResponse(rsp *http.Response) (*DeleteApiV3RemotepathmappingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3RemotepathmappingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3RemotepathmappingIdResponse parses an HTTP response from a GetApiV3RemotepathmappingIdWithResponse call
func ParseGetApiV3RemotepathmappingIdResponse(rsp *http.Response) (*GetApiV3RemotepathmappingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3RemotepathmappingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemotePathMappingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3RemotepathmappingIdResponse parses an HTTP response from a PutApiV3RemotepathmappingIdWithResponse call
func ParsePutApiV3RemotepathmappingIdResponse(rsp *http.Response) (*PutApiV3RemotepathmappingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3RemotepathmappingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemotePathMappingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3RenameResponse parses an HTTP response from a GetApiV3RenameWithResponse call
func ParseGetApiV3RenameResponse(rsp *http.Response) (*GetApiV3RenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3RenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RenameMovieResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3RootfolderResponse parses an HTTP response from a GetApiV3RootfolderWithResponse call
func ParseGetApiV3RootfolderResponse(rsp *http.Response) (*GetApiV3RootfolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3RootfolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RootFolderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3RootfolderResponse parses an HTTP response from a PostApiV3RootfolderWithResponse call
func ParsePostApiV3RootfolderResponse(rsp *http.Response) (*PostApiV3RootfolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3RootfolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RootFolderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3RootfolderIdResponse parses an HTTP response from a DeleteApiV3RootfolderIdWithResponse call
func ParseDeleteApiV3RootfolderIdResponse(rsp *http.Response) (*DeleteApiV3RootfolderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3RootfolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3RootfolderIdResponse parses an HTTP response from a GetApiV3RootfolderIdWithResponse call
func ParseGetApiV3RootfolderIdResponse(rsp *http.Response) (*GetApiV3RootfolderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3RootfolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RootFolderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3SystemBackupResponse parses an HTTP response from a GetApiV3SystemBackupWithResponse call
func ParseGetApiV3SystemBackupResponse(rsp *http.Response) (*GetApiV3SystemBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BackupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3SystemBackupRestoreUploadResponse parses an HTTP response from a PostApiV3SystemBackupRestoreUploadWithResponse call
func ParsePostApiV3SystemBackupRestoreUploadResponse(rsp *http.Response) (*PostApiV3SystemBackupRestoreUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3SystemBackupRestoreUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3SystemBackupRestoreIdResponse parses an HTTP response from a PostApiV3SystemBackupRestoreIdWithResponse call
func ParsePostApiV3SystemBackupRestoreIdResponse(rsp *http.Response) (*PostApiV3SystemBackupRestoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3SystemBackupRestoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV3SystemBackupIdResponse parses an HTTP response from a DeleteApiV3SystemBackupIdWithResponse call
func ParseDeleteApiV3SystemBackupIdResponse(rsp *http.Response) (*DeleteApiV3SystemBackupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3SystemBackupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3SystemRestartResponse parses an HTTP response from a PostApiV3SystemRestartWithResponse call
func ParsePostApiV3SystemRestartResponse(rsp *http.Response) (*PostApiV3SystemRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3SystemRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3SystemRoutesResponse parses an HTTP response from a GetApiV3SystemRoutesWithResponse call
func ParseGetApiV3SystemRoutesResponse(rsp *http.Response) (*GetApiV3SystemRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3SystemRoutesDuplicateResponse parses an HTTP response from a GetApiV3SystemRoutesDuplicateWithResponse call
func ParseGetApiV3SystemRoutesDuplicateResponse(rsp *http.Response) (*GetApiV3SystemRoutesDuplicateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemRoutesDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV3SystemShutdownResponse parses an HTTP response from a PostApiV3SystemShutdownWithResponse call
func ParsePostApiV3SystemShutdownResponse(rsp *http.Response) (*PostApiV3SystemShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3SystemShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3SystemStatusResponse parses an HTTP response from a GetApiV3SystemStatusWithResponse call
func ParseGetApiV3SystemStatusResponse(rsp *http.Response) (*GetApiV3SystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3SystemTaskResponse parses an HTTP response from a GetApiV3SystemTaskWithResponse call
func ParseGetApiV3SystemTaskResponse(rsp *http.Response) (*GetApiV3SystemTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3SystemTaskIdResponse parses an HTTP response from a GetApiV3SystemTaskIdWithResponse call
func ParseGetApiV3SystemTaskIdResponse(rsp *http.Response) (*GetApiV3SystemTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3SystemTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3TagResponse parses an HTTP response from a GetApiV3TagWithResponse call
func ParseGetApiV3TagResponse(rsp *http.Response) (*GetApiV3TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV3TagResponse parses an HTTP response from a PostApiV3TagWithResponse call
func ParsePostApiV3TagResponse(rsp *http.Response) (*PostApiV3TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV3TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3TagDetailResponse parses an HTTP response from a GetApiV3TagDetailWithResponse call
func ParseGetApiV3TagDetailResponse(rsp *http.Response) (*GetApiV3TagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3TagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3TagDetailIdResponse parses an HTTP response from a GetApiV3TagDetailIdWithResponse call
func ParseGetApiV3TagDetailIdResponse(rsp *http.Response) (*GetApiV3TagDetailIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3TagDetailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiV3TagIdResponse parses an HTTP response from a DeleteApiV3TagIdWithResponse call
func ParseDeleteApiV3TagIdResponse(rsp *http.Response) (*DeleteApiV3TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV3TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV3TagIdResponse parses an HTTP response from a GetApiV3TagIdWithResponse call
func ParseGetApiV3TagIdResponse(rsp *http.Response) (*GetApiV3TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiV3TagIdResponse parses an HTTP response from a PutApiV3TagIdWithResponse call
func ParsePutApiV3TagIdResponse(rsp *http.Response) (*PutApiV3TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV3TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3UpdateResponse parses an HTTP response from a GetApiV3UpdateWithResponse call
func ParseGetApiV3UpdateResponse(rsp *http.Response) (*GetApiV3UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UpdateResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiV3WantedCutoffResponse parses an HTTP response from a GetApiV3WantedCutoffWithResponse call
func ParseGetApiV3WantedCutoffResponse(rsp *http.Response) (*GetApiV3WantedCutoffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3WantedCutoffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV3WantedMissingResponse parses an HTTP response from a GetApiV3WantedMissingWithResponse call
func ParseGetApiV3WantedMissingResponse(rsp *http.Response) (*GetApiV3WantedMissingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV3WantedMissingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContentPathResponse parses an HTTP response from a GetContentPathWithResponse call
func ParseGetContentPathResponse(rsp *http.Response) (*GetContentPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFeedV3CalendarRadarrIcsResponse parses an HTTP response from a GetFeedV3CalendarRadarrIcsWithResponse call
func ParseGetFeedV3CalendarRadarrIcsResponse(rsp *http.Response) (*GetFeedV3CalendarRadarrIcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedV3CalendarRadarrIcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoginResponse parses an HTTP response from a GetLoginWithResponse call
func ParseGetLoginResponse(rsp *http.Response) (*GetLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLogoutResponse parses an HTTP response from a GetLogoutWithResponse call
func ParseGetLogoutResponse(rsp *http.Response) (*GetLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadPingResponse parses an HTTP response from a HeadPingWithResponse call
func ParseHeadPingResponse(rsp *http.Response) (*HeadPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPathResponse parses an HTTP response from a GetPathWithResponse call
func ParseGetPathResponse(rsp *http.Response) (*GetPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
