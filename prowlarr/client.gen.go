// Package prowlarr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package prowlarr

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	X_Api_KeyScopes = "X_Api_Key.Scopes"
	ApikeyScopes    = "apikey.Scopes"
)

// Defines values for ApplicationSyncLevel.
const (
	ApplicationSyncLevelAddOnly  ApplicationSyncLevel = "addOnly"
	ApplicationSyncLevelDisabled ApplicationSyncLevel = "disabled"
	ApplicationSyncLevelFullSync ApplicationSyncLevel = "fullSync"
)

// Defines values for ApplyTags.
const (
	Add     ApplyTags = "add"
	Remove  ApplyTags = "remove"
	Replace ApplyTags = "replace"
)

// Defines values for AuthenticationRequiredType.
const (
	DisabledForLocalAddresses AuthenticationRequiredType = "disabledForLocalAddresses"
	Enabled                   AuthenticationRequiredType = "enabled"
)

// Defines values for AuthenticationType.
const (
	AuthenticationTypeBasic    AuthenticationType = "basic"
	AuthenticationTypeExternal AuthenticationType = "external"
	AuthenticationTypeForms    AuthenticationType = "forms"
	AuthenticationTypeNone     AuthenticationType = "none"
)

// Defines values for BackupType.
const (
	BackupTypeManual    BackupType = "manual"
	BackupTypeScheduled BackupType = "scheduled"
	BackupTypeUpdate    BackupType = "update"
)

// Defines values for BookSearchParam.
const (
	BookSearchParamAuthor    BookSearchParam = "author"
	BookSearchParamGenre     BookSearchParam = "genre"
	BookSearchParamPublisher BookSearchParam = "publisher"
	BookSearchParamQ         BookSearchParam = "q"
	BookSearchParamTitle     BookSearchParam = "title"
	BookSearchParamYear      BookSearchParam = "year"
)

// Defines values for CertificateValidationType.
const (
	CertificateValidationTypeDisabled                  CertificateValidationType = "disabled"
	CertificateValidationTypeDisabledForLocalAddresses CertificateValidationType = "disabledForLocalAddresses"
	CertificateValidationTypeEnabled                   CertificateValidationType = "enabled"
)

// Defines values for CommandPriority.
const (
	CommandPriorityHigh   CommandPriority = "high"
	CommandPriorityLow    CommandPriority = "low"
	CommandPriorityNormal CommandPriority = "normal"
)

// Defines values for CommandStatus.
const (
	Aborted   CommandStatus = "aborted"
	Cancelled CommandStatus = "cancelled"
	Completed CommandStatus = "completed"
	Failed    CommandStatus = "failed"
	Orphaned  CommandStatus = "orphaned"
	Queued    CommandStatus = "queued"
	Started   CommandStatus = "started"
)

// Defines values for CommandTrigger.
const (
	CommandTriggerManual      CommandTrigger = "manual"
	CommandTriggerScheduled   CommandTrigger = "scheduled"
	CommandTriggerUnspecified CommandTrigger = "unspecified"
)

// Defines values for DatabaseType.
const (
	PostgreSQL DatabaseType = "postgreSQL"
	SqLite     DatabaseType = "sqLite"
)

// Defines values for DownloadProtocol.
const (
	DownloadProtocolTorrent DownloadProtocol = "torrent"
	DownloadProtocolUnknown DownloadProtocol = "unknown"
	DownloadProtocolUsenet  DownloadProtocol = "usenet"
)

// Defines values for HealthCheckResult.
const (
	HealthCheckResultError   HealthCheckResult = "error"
	HealthCheckResultNotice  HealthCheckResult = "notice"
	HealthCheckResultOk      HealthCheckResult = "ok"
	HealthCheckResultWarning HealthCheckResult = "warning"
)

// Defines values for HistoryEventType.
const (
	HistoryEventTypeIndexerAuth    HistoryEventType = "indexerAuth"
	HistoryEventTypeIndexerInfo    HistoryEventType = "indexerInfo"
	HistoryEventTypeIndexerQuery   HistoryEventType = "indexerQuery"
	HistoryEventTypeIndexerRss     HistoryEventType = "indexerRss"
	HistoryEventTypeReleaseGrabbed HistoryEventType = "releaseGrabbed"
	HistoryEventTypeUnknown        HistoryEventType = "unknown"
)

// Defines values for IndexerPrivacy.
const (
	Private     IndexerPrivacy = "private"
	Public      IndexerPrivacy = "public"
	SemiPrivate IndexerPrivacy = "semiPrivate"
)

// Defines values for MovieSearchParam.
const (
	MovieSearchParamDoubanId  MovieSearchParam = "doubanId"
	MovieSearchParamGenre     MovieSearchParam = "genre"
	MovieSearchParamImdbId    MovieSearchParam = "imdbId"
	MovieSearchParamImdbTitle MovieSearchParam = "imdbTitle"
	MovieSearchParamImdbYear  MovieSearchParam = "imdbYear"
	MovieSearchParamQ         MovieSearchParam = "q"
	MovieSearchParamTmdbId    MovieSearchParam = "tmdbId"
	MovieSearchParamTraktId   MovieSearchParam = "traktId"
	MovieSearchParamYear      MovieSearchParam = "year"
)

// Defines values for MusicSearchParam.
const (
	MusicSearchParamAlbum  MusicSearchParam = "album"
	MusicSearchParamArtist MusicSearchParam = "artist"
	MusicSearchParamGenre  MusicSearchParam = "genre"
	MusicSearchParamLabel  MusicSearchParam = "label"
	MusicSearchParamQ      MusicSearchParam = "q"
	MusicSearchParamTrack  MusicSearchParam = "track"
	MusicSearchParamYear   MusicSearchParam = "year"
)

// Defines values for PrivacyLevel.
const (
	PrivacyLevelApiKey   PrivacyLevel = "apiKey"
	PrivacyLevelNormal   PrivacyLevel = "normal"
	PrivacyLevelPassword PrivacyLevel = "password"
	PrivacyLevelUserName PrivacyLevel = "userName"
)

// Defines values for ProviderMessageType.
const (
	ProviderMessageTypeError   ProviderMessageType = "error"
	ProviderMessageTypeInfo    ProviderMessageType = "info"
	ProviderMessageTypeWarning ProviderMessageType = "warning"
)

// Defines values for ProxyType.
const (
	Http   ProxyType = "http"
	Socks4 ProxyType = "socks4"
	Socks5 ProxyType = "socks5"
)

// Defines values for RuntimeMode.
const (
	Console RuntimeMode = "console"
	Service RuntimeMode = "service"
	Tray    RuntimeMode = "tray"
)

// Defines values for SearchParam.
const (
	SearchParamQ SearchParam = "q"
)

// Defines values for SortDirection.
const (
	Ascending  SortDirection = "ascending"
	Default    SortDirection = "default"
	Descending SortDirection = "descending"
)

// Defines values for TvSearchParam.
const (
	DoubanId TvSearchParam = "doubanId"
	Ep       TvSearchParam = "ep"
	Genre    TvSearchParam = "genre"
	ImdbId   TvSearchParam = "imdbId"
	Q        TvSearchParam = "q"
	RId      TvSearchParam = "rId"
	Season   TvSearchParam = "season"
	TmdbId   TvSearchParam = "tmdbId"
	TraktId  TvSearchParam = "traktId"
	TvMazeId TvSearchParam = "tvMazeId"
	TvdbId   TvSearchParam = "tvdbId"
	Year     TvSearchParam = "year"
)

// Defines values for UpdateMechanism.
const (
	UpdateMechanismApt      UpdateMechanism = "apt"
	UpdateMechanismBuiltIn  UpdateMechanism = "builtIn"
	UpdateMechanismDocker   UpdateMechanism = "docker"
	UpdateMechanismExternal UpdateMechanism = "external"
	UpdateMechanismScript   UpdateMechanism = "script"
)

// ApiInfoResource defines model for ApiInfoResource.
type ApiInfoResource struct {
	Current    *string   `json:"current"`
	Deprecated *[]string `json:"deprecated"`
}

// AppProfileResource defines model for AppProfileResource.
type AppProfileResource struct {
	EnableAutomaticSearch   *bool   `json:"enableAutomaticSearch,omitempty"`
	EnableInteractiveSearch *bool   `json:"enableInteractiveSearch,omitempty"`
	EnableRss               *bool   `json:"enableRss,omitempty"`
	Id                      *int32  `json:"id,omitempty"`
	MinimumSeeders          *int32  `json:"minimumSeeders,omitempty"`
	Name                    *string `json:"name"`
}

// ApplicationBulkResource defines model for ApplicationBulkResource.
type ApplicationBulkResource struct {
	ApplyTags *ApplyTags            `json:"applyTags,omitempty"`
	Ids       *[]int32              `json:"ids"`
	SyncLevel *ApplicationSyncLevel `json:"syncLevel,omitempty"`
	Tags      *[]int32              `json:"tags"`
}

// ApplicationResource defines model for ApplicationResource.
type ApplicationResource struct {
	ConfigContract     *string                `json:"configContract"`
	Fields             *[]Field               `json:"fields"`
	Id                 *int32                 `json:"id,omitempty"`
	Implementation     *string                `json:"implementation"`
	ImplementationName *string                `json:"implementationName"`
	InfoLink           *string                `json:"infoLink"`
	Message            *ProviderMessage       `json:"message,omitempty"`
	Name               *string                `json:"name"`
	Presets            *[]ApplicationResource `json:"presets"`
	SyncLevel          *ApplicationSyncLevel  `json:"syncLevel,omitempty"`
	Tags               *[]int32               `json:"tags"`
	TestCommand        *string                `json:"testCommand"`
}

// ApplicationSyncLevel defines model for ApplicationSyncLevel.
type ApplicationSyncLevel string

// ApplyTags defines model for ApplyTags.
type ApplyTags string

// AuthenticationRequiredType defines model for AuthenticationRequiredType.
type AuthenticationRequiredType string

// AuthenticationType defines model for AuthenticationType.
type AuthenticationType string

// BackupResource defines model for BackupResource.
type BackupResource struct {
	Id   *int32      `json:"id,omitempty"`
	Name *string     `json:"name"`
	Path *string     `json:"path"`
	Size *int64      `json:"size,omitempty"`
	Time *time.Time  `json:"time,omitempty"`
	Type *BackupType `json:"type,omitempty"`
}

// BackupType defines model for BackupType.
type BackupType string

// BookSearchParam defines model for BookSearchParam.
type BookSearchParam string

// CertificateValidationType defines model for CertificateValidationType.
type CertificateValidationType string

// Command defines model for Command.
type Command struct {
	ClientUserAgent     *string         `json:"clientUserAgent"`
	CompletionMessage   *string         `json:"completionMessage"`
	IsExclusive         *bool           `json:"isExclusive,omitempty"`
	IsTypeExclusive     *bool           `json:"isTypeExclusive,omitempty"`
	LastExecutionTime   *time.Time      `json:"lastExecutionTime"`
	LastStartTime       *time.Time      `json:"lastStartTime"`
	Name                *string         `json:"name"`
	RequiresDiskAccess  *bool           `json:"requiresDiskAccess,omitempty"`
	SendUpdatesToClient *bool           `json:"sendUpdatesToClient,omitempty"`
	SuppressMessages    *bool           `json:"suppressMessages,omitempty"`
	Trigger             *CommandTrigger `json:"trigger,omitempty"`
	UpdateScheduledTask *bool           `json:"updateScheduledTask,omitempty"`
}

// CommandPriority defines model for CommandPriority.
type CommandPriority string

// CommandResource defines model for CommandResource.
type CommandResource struct {
	Body                *Command         `json:"body,omitempty"`
	ClientUserAgent     *string          `json:"clientUserAgent"`
	CommandName         *string          `json:"commandName"`
	Duration            *string          `json:"duration"`
	Ended               *time.Time       `json:"ended"`
	Exception           *string          `json:"exception"`
	Id                  *int32           `json:"id,omitempty"`
	LastExecutionTime   *time.Time       `json:"lastExecutionTime"`
	Message             *string          `json:"message"`
	Name                *string          `json:"name"`
	Priority            *CommandPriority `json:"priority,omitempty"`
	Queued              *time.Time       `json:"queued,omitempty"`
	SendUpdatesToClient *bool            `json:"sendUpdatesToClient,omitempty"`
	Started             *time.Time       `json:"started"`
	StateChangeTime     *time.Time       `json:"stateChangeTime"`
	Status              *CommandStatus   `json:"status,omitempty"`
	Trigger             *CommandTrigger  `json:"trigger,omitempty"`
	UpdateScheduledTask *bool            `json:"updateScheduledTask,omitempty"`
}

// CommandStatus defines model for CommandStatus.
type CommandStatus string

// CommandTrigger defines model for CommandTrigger.
type CommandTrigger string

// CustomFilterResource defines model for CustomFilterResource.
type CustomFilterResource struct {
	Filters *[]map[string]interface{} `json:"filters"`
	Id      *int32                    `json:"id,omitempty"`
	Label   *string                   `json:"label"`
	Type    *string                   `json:"type"`
}

// DatabaseType defines model for DatabaseType.
type DatabaseType string

// DevelopmentConfigResource defines model for DevelopmentConfigResource.
type DevelopmentConfigResource struct {
	ConsoleLogLevel    *string `json:"consoleLogLevel"`
	FilterSentryEvents *bool   `json:"filterSentryEvents,omitempty"`
	Id                 *int32  `json:"id,omitempty"`
	LogIndexerResponse *bool   `json:"logIndexerResponse,omitempty"`
	LogRotate          *int32  `json:"logRotate,omitempty"`
	LogSql             *bool   `json:"logSql,omitempty"`
}

// DownloadClientBulkResource defines model for DownloadClientBulkResource.
type DownloadClientBulkResource struct {
	ApplyTags *ApplyTags `json:"applyTags,omitempty"`
	Enable    *bool      `json:"enable"`
	Ids       *[]int32   `json:"ids"`
	Priority  *int32     `json:"priority"`
	Tags      *[]int32   `json:"tags"`
}

// DownloadClientCategory defines model for DownloadClientCategory.
type DownloadClientCategory struct {
	Categories     *[]int32 `json:"categories"`
	ClientCategory *string  `json:"clientCategory"`
}

// DownloadClientConfigResource defines model for DownloadClientConfigResource.
type DownloadClientConfigResource struct {
	Id *int32 `json:"id,omitempty"`
}

// DownloadClientResource defines model for DownloadClientResource.
type DownloadClientResource struct {
	Categories         *[]DownloadClientCategory `json:"categories"`
	ConfigContract     *string                   `json:"configContract"`
	Enable             *bool                     `json:"enable,omitempty"`
	Fields             *[]Field                  `json:"fields"`
	Id                 *int32                    `json:"id,omitempty"`
	Implementation     *string                   `json:"implementation"`
	ImplementationName *string                   `json:"implementationName"`
	InfoLink           *string                   `json:"infoLink"`
	Message            *ProviderMessage          `json:"message,omitempty"`
	Name               *string                   `json:"name"`
	Presets            *[]DownloadClientResource `json:"presets"`
	Priority           *int32                    `json:"priority,omitempty"`
	Protocol           *DownloadProtocol         `json:"protocol,omitempty"`
	SupportsCategories *bool                     `json:"supportsCategories,omitempty"`
	Tags               *[]int32                  `json:"tags"`
}

// DownloadProtocol defines model for DownloadProtocol.
type DownloadProtocol string

// Field defines model for Field.
type Field struct {
	Advanced                    *bool           `json:"advanced,omitempty"`
	HelpLink                    *string         `json:"helpLink"`
	HelpText                    *string         `json:"helpText"`
	HelpTextWarning             *string         `json:"helpTextWarning"`
	Hidden                      *string         `json:"hidden"`
	IsFloat                     *bool           `json:"isFloat,omitempty"`
	Label                       *string         `json:"label"`
	Name                        *string         `json:"name"`
	Order                       *int32          `json:"order,omitempty"`
	Placeholder                 *string         `json:"placeholder"`
	Privacy                     *PrivacyLevel   `json:"privacy,omitempty"`
	Section                     *string         `json:"section"`
	SelectOptions               *[]SelectOption `json:"selectOptions"`
	SelectOptionsProviderAction *string         `json:"selectOptionsProviderAction"`
	Type                        *string         `json:"type"`
	Unit                        *string         `json:"unit"`
	Value                       *interface{}    `json:"value"`
}

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult string

// HealthResource defines model for HealthResource.
type HealthResource struct {
	Id      *int32             `json:"id,omitempty"`
	Message *string            `json:"message"`
	Source  *string            `json:"source"`
	Type    *HealthCheckResult `json:"type,omitempty"`
	WikiUrl *string            `json:"wikiUrl,omitempty"`
}

// HistoryEventType defines model for HistoryEventType.
type HistoryEventType string

// HistoryResource defines model for HistoryResource.
type HistoryResource struct {
	Data       *map[string]*string `json:"data"`
	Date       *time.Time          `json:"date,omitempty"`
	DownloadId *string             `json:"downloadId"`
	EventType  *HistoryEventType   `json:"eventType,omitempty"`
	Id         *int32              `json:"id,omitempty"`
	IndexerId  *int32              `json:"indexerId,omitempty"`
	Successful *bool               `json:"successful,omitempty"`
}

// HistoryResourcePagingResource defines model for HistoryResourcePagingResource.
type HistoryResourcePagingResource struct {
	Page          *int32             `json:"page,omitempty"`
	PageSize      *int32             `json:"pageSize,omitempty"`
	Records       *[]HistoryResource `json:"records"`
	SortDirection *SortDirection     `json:"sortDirection,omitempty"`
	SortKey       *string            `json:"sortKey"`
	TotalRecords  *int32             `json:"totalRecords,omitempty"`
}

// HostConfigResource defines model for HostConfigResource.
type HostConfigResource struct {
	AnalyticsEnabled          *bool                       `json:"analyticsEnabled,omitempty"`
	ApiKey                    *string                     `json:"apiKey"`
	ApplicationUrl            *string                     `json:"applicationUrl"`
	AuthenticationMethod      *AuthenticationType         `json:"authenticationMethod,omitempty"`
	AuthenticationRequired    *AuthenticationRequiredType `json:"authenticationRequired,omitempty"`
	BackupFolder              *string                     `json:"backupFolder"`
	BackupInterval            *int32                      `json:"backupInterval,omitempty"`
	BackupRetention           *int32                      `json:"backupRetention,omitempty"`
	BindAddress               *string                     `json:"bindAddress"`
	Branch                    *string                     `json:"branch"`
	CertificateValidation     *CertificateValidationType  `json:"certificateValidation,omitempty"`
	ConsoleLogLevel           *string                     `json:"consoleLogLevel"`
	EnableSsl                 *bool                       `json:"enableSsl,omitempty"`
	HistoryCleanupDays        *int32                      `json:"historyCleanupDays,omitempty"`
	Id                        *int32                      `json:"id,omitempty"`
	InstanceName              *string                     `json:"instanceName"`
	LaunchBrowser             *bool                       `json:"launchBrowser,omitempty"`
	LogLevel                  *string                     `json:"logLevel"`
	LogSizeLimit              *int32                      `json:"logSizeLimit,omitempty"`
	Password                  *string                     `json:"password"`
	PasswordConfirmation      *string                     `json:"passwordConfirmation"`
	Port                      *int32                      `json:"port,omitempty"`
	ProxyBypassFilter         *string                     `json:"proxyBypassFilter"`
	ProxyBypassLocalAddresses *bool                       `json:"proxyBypassLocalAddresses,omitempty"`
	ProxyEnabled              *bool                       `json:"proxyEnabled,omitempty"`
	ProxyHostname             *string                     `json:"proxyHostname"`
	ProxyPassword             *string                     `json:"proxyPassword"`
	ProxyPort                 *int32                      `json:"proxyPort,omitempty"`
	ProxyType                 *ProxyType                  `json:"proxyType,omitempty"`
	ProxyUsername             *string                     `json:"proxyUsername"`
	SslCertPassword           *string                     `json:"sslCertPassword"`
	SslCertPath               *string                     `json:"sslCertPath"`
	SslPort                   *int32                      `json:"sslPort,omitempty"`
	UpdateAutomatically       *bool                       `json:"updateAutomatically,omitempty"`
	UpdateMechanism           *UpdateMechanism            `json:"updateMechanism,omitempty"`
	UpdateScriptPath          *string                     `json:"updateScriptPath"`
	UrlBase                   *string                     `json:"urlBase"`
	Username                  *string                     `json:"username"`
}

// HostStatistics defines model for HostStatistics.
type HostStatistics struct {
	Host            *string `json:"host"`
	NumberOfGrabs   *int32  `json:"numberOfGrabs,omitempty"`
	NumberOfQueries *int32  `json:"numberOfQueries,omitempty"`
}

// IActionResult defines model for IActionResult.
type IActionResult = map[string]interface{}

// IndexerBulkResource defines model for IndexerBulkResource.
type IndexerBulkResource struct {
	AppProfileId    *int32     `json:"appProfileId"`
	ApplyTags       *ApplyTags `json:"applyTags,omitempty"`
	Enable          *bool      `json:"enable"`
	Ids             *[]int32   `json:"ids"`
	MinimumSeeders  *int32     `json:"minimumSeeders"`
	PackSeedTime    *int32     `json:"packSeedTime"`
	PreferMagnetUrl *bool      `json:"preferMagnetUrl"`
	Priority        *int32     `json:"priority"`
	SeedRatio       *float64   `json:"seedRatio"`
	SeedTime        *int32     `json:"seedTime"`
	Tags            *[]int32   `json:"tags"`
}

// IndexerCapabilityResource defines model for IndexerCapabilityResource.
type IndexerCapabilityResource struct {
	BookSearchParams  *[]BookSearchParam  `json:"bookSearchParams"`
	Categories        *[]IndexerCategory  `json:"categories"`
	Id                *int32              `json:"id,omitempty"`
	LimitsDefault     *int32              `json:"limitsDefault"`
	LimitsMax         *int32              `json:"limitsMax"`
	MovieSearchParams *[]MovieSearchParam `json:"movieSearchParams"`
	MusicSearchParams *[]MusicSearchParam `json:"musicSearchParams"`
	SearchParams      *[]SearchParam      `json:"searchParams"`
	SupportsRawSearch *bool               `json:"supportsRawSearch,omitempty"`
	TvSearchParams    *[]TvSearchParam    `json:"tvSearchParams"`
}

// IndexerCategory defines model for IndexerCategory.
type IndexerCategory struct {
	Description   *string            `json:"description"`
	Id            *int32             `json:"id,omitempty"`
	Name          *string            `json:"name"`
	SubCategories *[]IndexerCategory `json:"subCategories"`
}

// IndexerPrivacy defines model for IndexerPrivacy.
type IndexerPrivacy string

// IndexerProxyResource defines model for IndexerProxyResource.
type IndexerProxyResource struct {
	ConfigContract        *string                 `json:"configContract"`
	Fields                *[]Field                `json:"fields"`
	Id                    *int32                  `json:"id,omitempty"`
	Implementation        *string                 `json:"implementation"`
	ImplementationName    *string                 `json:"implementationName"`
	IncludeHealthWarnings *bool                   `json:"includeHealthWarnings,omitempty"`
	InfoLink              *string                 `json:"infoLink"`
	Link                  *string                 `json:"link"`
	Message               *ProviderMessage        `json:"message,omitempty"`
	Name                  *string                 `json:"name"`
	OnHealthIssue         *bool                   `json:"onHealthIssue,omitempty"`
	Presets               *[]IndexerProxyResource `json:"presets"`
	SupportsOnHealthIssue *bool                   `json:"supportsOnHealthIssue,omitempty"`
	Tags                  *[]int32                `json:"tags"`
	TestCommand           *string                 `json:"testCommand"`
}

// IndexerResource defines model for IndexerResource.
type IndexerResource struct {
	Added              *time.Time                 `json:"added,omitempty"`
	AppProfileId       *int32                     `json:"appProfileId,omitempty"`
	Capabilities       *IndexerCapabilityResource `json:"capabilities,omitempty"`
	ConfigContract     *string                    `json:"configContract"`
	DefinitionName     *string                    `json:"definitionName"`
	Description        *string                    `json:"description"`
	DownloadClientId   *int32                     `json:"downloadClientId,omitempty"`
	Enable             *bool                      `json:"enable,omitempty"`
	Encoding           *string                    `json:"encoding"`
	Fields             *[]Field                   `json:"fields"`
	Id                 *int32                     `json:"id,omitempty"`
	Implementation     *string                    `json:"implementation"`
	ImplementationName *string                    `json:"implementationName"`
	IndexerUrls        *[]string                  `json:"indexerUrls"`
	InfoLink           *string                    `json:"infoLink"`
	Language           *string                    `json:"language"`
	LegacyUrls         *[]string                  `json:"legacyUrls"`
	Message            *ProviderMessage           `json:"message,omitempty"`
	Name               *string                    `json:"name"`
	Presets            *[]IndexerResource         `json:"presets"`
	Priority           *int32                     `json:"priority,omitempty"`
	Privacy            *IndexerPrivacy            `json:"privacy,omitempty"`
	Protocol           *DownloadProtocol          `json:"protocol,omitempty"`
	Redirect           *bool                      `json:"redirect,omitempty"`
	SortName           *string                    `json:"sortName"`
	Status             *IndexerStatusResource     `json:"status,omitempty"`
	SupportsPagination *bool                      `json:"supportsPagination,omitempty"`
	SupportsRedirect   *bool                      `json:"supportsRedirect,omitempty"`
	SupportsRss        *bool                      `json:"supportsRss,omitempty"`
	SupportsSearch     *bool                      `json:"supportsSearch,omitempty"`
	Tags               *[]int32                   `json:"tags"`
}

// IndexerStatistics defines model for IndexerStatistics.
type IndexerStatistics struct {
	AverageGrabResponseTime   *int32  `json:"averageGrabResponseTime,omitempty"`
	AverageResponseTime       *int32  `json:"averageResponseTime,omitempty"`
	IndexerId                 *int32  `json:"indexerId,omitempty"`
	IndexerName               *string `json:"indexerName"`
	NumberOfAuthQueries       *int32  `json:"numberOfAuthQueries,omitempty"`
	NumberOfFailedAuthQueries *int32  `json:"numberOfFailedAuthQueries,omitempty"`
	NumberOfFailedGrabs       *int32  `json:"numberOfFailedGrabs,omitempty"`
	NumberOfFailedQueries     *int32  `json:"numberOfFailedQueries,omitempty"`
	NumberOfFailedRssQueries  *int32  `json:"numberOfFailedRssQueries,omitempty"`
	NumberOfGrabs             *int32  `json:"numberOfGrabs,omitempty"`
	NumberOfQueries           *int32  `json:"numberOfQueries,omitempty"`
	NumberOfRssQueries        *int32  `json:"numberOfRssQueries,omitempty"`
}

// IndexerStatsResource defines model for IndexerStatsResource.
type IndexerStatsResource struct {
	Hosts      *[]HostStatistics      `json:"hosts"`
	Id         *int32                 `json:"id,omitempty"`
	Indexers   *[]IndexerStatistics   `json:"indexers"`
	UserAgents *[]UserAgentStatistics `json:"userAgents"`
}

// IndexerStatusResource defines model for IndexerStatusResource.
type IndexerStatusResource struct {
	DisabledTill      *time.Time `json:"disabledTill"`
	Id                *int32     `json:"id,omitempty"`
	IndexerId         *int32     `json:"indexerId,omitempty"`
	InitialFailure    *time.Time `json:"initialFailure"`
	MostRecentFailure *time.Time `json:"mostRecentFailure"`
}

// LocalizationOption defines model for LocalizationOption.
type LocalizationOption struct {
	Name  *string `json:"name"`
	Value *string `json:"value"`
}

// LogFileResource defines model for LogFileResource.
type LogFileResource struct {
	ContentsUrl   *string    `json:"contentsUrl"`
	DownloadUrl   *string    `json:"downloadUrl"`
	Filename      *string    `json:"filename"`
	Id            *int32     `json:"id,omitempty"`
	LastWriteTime *time.Time `json:"lastWriteTime,omitempty"`
}

// LogResource defines model for LogResource.
type LogResource struct {
	Exception     *string    `json:"exception"`
	ExceptionType *string    `json:"exceptionType"`
	Id            *int32     `json:"id,omitempty"`
	Level         *string    `json:"level"`
	Logger        *string    `json:"logger"`
	Message       *string    `json:"message"`
	Method        *string    `json:"method"`
	Time          *time.Time `json:"time,omitempty"`
}

// LogResourcePagingResource defines model for LogResourcePagingResource.
type LogResourcePagingResource struct {
	Page          *int32         `json:"page,omitempty"`
	PageSize      *int32         `json:"pageSize,omitempty"`
	Records       *[]LogResource `json:"records"`
	SortDirection *SortDirection `json:"sortDirection,omitempty"`
	SortKey       *string        `json:"sortKey"`
	TotalRecords  *int32         `json:"totalRecords,omitempty"`
}

// MovieSearchParam defines model for MovieSearchParam.
type MovieSearchParam string

// MusicSearchParam defines model for MusicSearchParam.
type MusicSearchParam string

// NotificationResource defines model for NotificationResource.
type NotificationResource struct {
	ConfigContract              *string                 `json:"configContract"`
	Fields                      *[]Field                `json:"fields"`
	Id                          *int32                  `json:"id,omitempty"`
	Implementation              *string                 `json:"implementation"`
	ImplementationName          *string                 `json:"implementationName"`
	IncludeHealthWarnings       *bool                   `json:"includeHealthWarnings,omitempty"`
	IncludeManualGrabs          *bool                   `json:"includeManualGrabs,omitempty"`
	InfoLink                    *string                 `json:"infoLink"`
	Link                        *string                 `json:"link"`
	Message                     *ProviderMessage        `json:"message,omitempty"`
	Name                        *string                 `json:"name"`
	OnApplicationUpdate         *bool                   `json:"onApplicationUpdate,omitempty"`
	OnGrab                      *bool                   `json:"onGrab,omitempty"`
	OnHealthIssue               *bool                   `json:"onHealthIssue,omitempty"`
	OnHealthRestored            *bool                   `json:"onHealthRestored,omitempty"`
	Presets                     *[]NotificationResource `json:"presets"`
	SupportsOnApplicationUpdate *bool                   `json:"supportsOnApplicationUpdate,omitempty"`
	SupportsOnGrab              *bool                   `json:"supportsOnGrab,omitempty"`
	SupportsOnHealthIssue       *bool                   `json:"supportsOnHealthIssue,omitempty"`
	SupportsOnHealthRestored    *bool                   `json:"supportsOnHealthRestored,omitempty"`
	Tags                        *[]int32                `json:"tags"`
	TestCommand                 *string                 `json:"testCommand"`
}

// PingResource defines model for PingResource.
type PingResource struct {
	Status *string `json:"status"`
}

// PrivacyLevel defines model for PrivacyLevel.
type PrivacyLevel string

// ProviderMessage defines model for ProviderMessage.
type ProviderMessage struct {
	Message *string              `json:"message"`
	Type    *ProviderMessageType `json:"type,omitempty"`
}

// ProviderMessageType defines model for ProviderMessageType.
type ProviderMessageType string

// ProxyType defines model for ProxyType.
type ProxyType string

// ReleaseResource defines model for ReleaseResource.
type ReleaseResource struct {
	Age              *int32             `json:"age,omitempty"`
	AgeHours         *float64           `json:"ageHours,omitempty"`
	AgeMinutes       *float64           `json:"ageMinutes,omitempty"`
	Categories       *[]IndexerCategory `json:"categories"`
	CommentUrl       *string            `json:"commentUrl"`
	DownloadClientId *int32             `json:"downloadClientId"`
	DownloadUrl      *string            `json:"downloadUrl"`
	FileName         *string            `json:"fileName"`
	Files            *int32             `json:"files"`
	Grabs            *int32             `json:"grabs"`
	Guid             *string            `json:"guid"`
	Id               *int32             `json:"id,omitempty"`
	ImdbId           *int32             `json:"imdbId,omitempty"`
	Indexer          *string            `json:"indexer"`
	IndexerFlags     *[]string          `json:"indexerFlags"`
	IndexerId        *int32             `json:"indexerId,omitempty"`
	InfoHash         *string            `json:"infoHash"`
	InfoUrl          *string            `json:"infoUrl"`
	Leechers         *int32             `json:"leechers"`
	MagnetUrl        *string            `json:"magnetUrl"`
	PosterUrl        *string            `json:"posterUrl"`
	Protocol         *DownloadProtocol  `json:"protocol,omitempty"`
	PublishDate      *time.Time         `json:"publishDate,omitempty"`
	ReleaseHash      *string            `json:"releaseHash"`
	Seeders          *int32             `json:"seeders"`
	Size             *int64             `json:"size,omitempty"`
	SortTitle        *string            `json:"sortTitle"`
	SubGroup         *string            `json:"subGroup"`
	Title            *string            `json:"title"`
	TmdbId           *int32             `json:"tmdbId,omitempty"`
	TvMazeId         *int32             `json:"tvMazeId,omitempty"`
	TvdbId           *int32             `json:"tvdbId,omitempty"`
}

// RuntimeMode defines model for RuntimeMode.
type RuntimeMode string

// SearchParam defines model for SearchParam.
type SearchParam string

// SelectOption defines model for SelectOption.
type SelectOption struct {
	Hint        *string `json:"hint"`
	Name        *string `json:"name"`
	Order       *int32  `json:"order,omitempty"`
	ParentValue *int32  `json:"parentValue"`
	Value       *int32  `json:"value,omitempty"`
}

// SortDirection defines model for SortDirection.
type SortDirection string

// SystemResource defines model for SystemResource.
type SystemResource struct {
	AppData                       *string             `json:"appData"`
	AppName                       *string             `json:"appName"`
	Authentication                *AuthenticationType `json:"authentication,omitempty"`
	Branch                        *string             `json:"branch"`
	BuildTime                     *time.Time          `json:"buildTime,omitempty"`
	DatabaseType                  *DatabaseType       `json:"databaseType,omitempty"`
	DatabaseVersion               *string             `json:"databaseVersion"`
	InstanceName                  *string             `json:"instanceName"`
	IsAdmin                       *bool               `json:"isAdmin,omitempty"`
	IsDebug                       *bool               `json:"isDebug,omitempty"`
	IsDocker                      *bool               `json:"isDocker,omitempty"`
	IsLinux                       *bool               `json:"isLinux,omitempty"`
	IsNetCore                     *bool               `json:"isNetCore,omitempty"`
	IsOsx                         *bool               `json:"isOsx,omitempty"`
	IsProduction                  *bool               `json:"isProduction,omitempty"`
	IsUserInteractive             *bool               `json:"isUserInteractive,omitempty"`
	IsWindows                     *bool               `json:"isWindows,omitempty"`
	MigrationVersion              *int32              `json:"migrationVersion,omitempty"`
	Mode                          *RuntimeMode        `json:"mode,omitempty"`
	OsName                        *string             `json:"osName"`
	OsVersion                     *string             `json:"osVersion"`
	PackageAuthor                 *string             `json:"packageAuthor"`
	PackageUpdateMechanism        *UpdateMechanism    `json:"packageUpdateMechanism,omitempty"`
	PackageUpdateMechanismMessage *string             `json:"packageUpdateMechanismMessage"`
	PackageVersion                *string             `json:"packageVersion"`
	RuntimeName                   *string             `json:"runtimeName"`
	RuntimeVersion                *string             `json:"runtimeVersion"`
	StartTime                     *time.Time          `json:"startTime,omitempty"`
	StartupPath                   *string             `json:"startupPath"`
	UrlBase                       *string             `json:"urlBase"`
	Version                       *string             `json:"version"`
}

// TagDetailsResource defines model for TagDetailsResource.
type TagDetailsResource struct {
	ApplicationIds  *[]int32 `json:"applicationIds"`
	Id              *int32   `json:"id,omitempty"`
	IndexerIds      *[]int32 `json:"indexerIds"`
	IndexerProxyIds *[]int32 `json:"indexerProxyIds"`
	Label           *string  `json:"label"`
	NotificationIds *[]int32 `json:"notificationIds"`
}

// TagResource defines model for TagResource.
type TagResource struct {
	Id    *int32  `json:"id,omitempty"`
	Label *string `json:"label"`
}

// TaskResource defines model for TaskResource.
type TaskResource struct {
	Id            *int32     `json:"id,omitempty"`
	Interval      *int32     `json:"interval,omitempty"`
	LastDuration  *string    `json:"lastDuration,omitempty"`
	LastExecution *time.Time `json:"lastExecution,omitempty"`
	LastStartTime *time.Time `json:"lastStartTime,omitempty"`
	Name          *string    `json:"name"`
	NextExecution *time.Time `json:"nextExecution,omitempty"`
	TaskName      *string    `json:"taskName"`
}

// TvSearchParam defines model for TvSearchParam.
type TvSearchParam string

// UiConfigResource defines model for UiConfigResource.
type UiConfigResource struct {
	CalendarWeekColumnHeader *string `json:"calendarWeekColumnHeader"`
	EnableColorImpairedMode  *bool   `json:"enableColorImpairedMode,omitempty"`
	FirstDayOfWeek           *int32  `json:"firstDayOfWeek,omitempty"`
	Id                       *int32  `json:"id,omitempty"`
	LongDateFormat           *string `json:"longDateFormat"`
	ShortDateFormat          *string `json:"shortDateFormat"`
	ShowRelativeDates        *bool   `json:"showRelativeDates,omitempty"`
	Theme                    *string `json:"theme"`
	TimeFormat               *string `json:"timeFormat"`
	UiLanguage               *string `json:"uiLanguage"`
}

// UpdateChanges defines model for UpdateChanges.
type UpdateChanges struct {
	Fixed *[]string `json:"fixed"`
	New   *[]string `json:"new"`
}

// UpdateMechanism defines model for UpdateMechanism.
type UpdateMechanism string

// UpdateResource defines model for UpdateResource.
type UpdateResource struct {
	Branch      *string        `json:"branch"`
	Changes     *UpdateChanges `json:"changes,omitempty"`
	FileName    *string        `json:"fileName"`
	Hash        *string        `json:"hash"`
	Id          *int32         `json:"id,omitempty"`
	Installable *bool          `json:"installable,omitempty"`
	Installed   *bool          `json:"installed,omitempty"`
	InstalledOn *time.Time     `json:"installedOn"`
	Latest      *bool          `json:"latest,omitempty"`
	ReleaseDate *time.Time     `json:"releaseDate,omitempty"`
	Url         *string        `json:"url"`
	Version     *string        `json:"version"`
}

// UserAgentStatistics defines model for UserAgentStatistics.
type UserAgentStatistics struct {
	NumberOfGrabs   *int32  `json:"numberOfGrabs,omitempty"`
	NumberOfQueries *int32  `json:"numberOfQueries,omitempty"`
	UserAgent       *string `json:"userAgent"`
}

// PostApiV1ApplicationsParams defines parameters for PostApiV1Applications.
type PostApiV1ApplicationsParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1ApplicationsTestParams defines parameters for PostApiV1ApplicationsTest.
type PostApiV1ApplicationsTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV1ApplicationsIdParams defines parameters for PutApiV1ApplicationsId.
type PutApiV1ApplicationsIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1DownloadclientParams defines parameters for PostApiV1Downloadclient.
type PostApiV1DownloadclientParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1DownloadclientTestParams defines parameters for PostApiV1DownloadclientTest.
type PostApiV1DownloadclientTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV1DownloadclientIdParams defines parameters for PutApiV1DownloadclientId.
type PutApiV1DownloadclientIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV1FilesystemParams defines parameters for GetApiV1Filesystem.
type GetApiV1FilesystemParams struct {
	Path                               *string `form:"path,omitempty" json:"path,omitempty"`
	IncludeFiles                       *bool   `form:"includeFiles,omitempty" json:"includeFiles,omitempty"`
	AllowFoldersWithoutTrailingSlashes *bool   `form:"allowFoldersWithoutTrailingSlashes,omitempty" json:"allowFoldersWithoutTrailingSlashes,omitempty"`
}

// GetApiV1FilesystemTypeParams defines parameters for GetApiV1FilesystemType.
type GetApiV1FilesystemTypeParams struct {
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetApiV1HistoryParams defines parameters for GetApiV1History.
type GetApiV1HistoryParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	EventType     *[]int32       `form:"eventType,omitempty" json:"eventType,omitempty"`
	Successful    *bool          `form:"successful,omitempty" json:"successful,omitempty"`
	DownloadId    *string        `form:"downloadId,omitempty" json:"downloadId,omitempty"`
	IndexerIds    *[]int32       `form:"indexerIds,omitempty" json:"indexerIds,omitempty"`
}

// GetApiV1HistoryIndexerParams defines parameters for GetApiV1HistoryIndexer.
type GetApiV1HistoryIndexerParams struct {
	IndexerId *int32            `form:"indexerId,omitempty" json:"indexerId,omitempty"`
	EventType *HistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
	Limit     *int32            `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetApiV1HistorySinceParams defines parameters for GetApiV1HistorySince.
type GetApiV1HistorySinceParams struct {
	Date      *time.Time        `form:"date,omitempty" json:"date,omitempty"`
	EventType *HistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
}

// PostApiV1IndexerParams defines parameters for PostApiV1Indexer.
type PostApiV1IndexerParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1IndexerTestParams defines parameters for PostApiV1IndexerTest.
type PostApiV1IndexerTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV1IndexerIdParams defines parameters for PutApiV1IndexerId.
type PutApiV1IndexerIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV1IndexerIdDownloadParams defines parameters for GetApiV1IndexerIdDownload.
type GetApiV1IndexerIdDownloadParams struct {
	Link *string `form:"link,omitempty" json:"link,omitempty"`
	File *string `form:"file,omitempty" json:"file,omitempty"`
}

// GetApiV1IndexerIdNewznabParams defines parameters for GetApiV1IndexerIdNewznab.
type GetApiV1IndexerIdNewznabParams struct {
	T          *string `form:"t,omitempty" json:"t,omitempty"`
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	Cat        *string `form:"cat,omitempty" json:"cat,omitempty"`
	Imdbid     *string `form:"imdbid,omitempty" json:"imdbid,omitempty"`
	Tmdbid     *int32  `form:"tmdbid,omitempty" json:"tmdbid,omitempty"`
	Extended   *string `form:"extended,omitempty" json:"extended,omitempty"`
	Limit      *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32  `form:"offset,omitempty" json:"offset,omitempty"`
	Minage     *int32  `form:"minage,omitempty" json:"minage,omitempty"`
	Maxage     *int32  `form:"maxage,omitempty" json:"maxage,omitempty"`
	Minsize    *int64  `form:"minsize,omitempty" json:"minsize,omitempty"`
	Maxsize    *int64  `form:"maxsize,omitempty" json:"maxsize,omitempty"`
	Rid        *int32  `form:"rid,omitempty" json:"rid,omitempty"`
	Tvmazeid   *int32  `form:"tvmazeid,omitempty" json:"tvmazeid,omitempty"`
	Traktid    *int32  `form:"traktid,omitempty" json:"traktid,omitempty"`
	Tvdbid     *int32  `form:"tvdbid,omitempty" json:"tvdbid,omitempty"`
	Doubanid   *int32  `form:"doubanid,omitempty" json:"doubanid,omitempty"`
	Season     *int32  `form:"season,omitempty" json:"season,omitempty"`
	Ep         *string `form:"ep,omitempty" json:"ep,omitempty"`
	Album      *string `form:"album,omitempty" json:"album,omitempty"`
	Artist     *string `form:"artist,omitempty" json:"artist,omitempty"`
	Label      *string `form:"label,omitempty" json:"label,omitempty"`
	Track      *string `form:"track,omitempty" json:"track,omitempty"`
	Year       *int32  `form:"year,omitempty" json:"year,omitempty"`
	Genre      *string `form:"genre,omitempty" json:"genre,omitempty"`
	Author     *string `form:"author,omitempty" json:"author,omitempty"`
	Title      *string `form:"title,omitempty" json:"title,omitempty"`
	Publisher  *string `form:"publisher,omitempty" json:"publisher,omitempty"`
	Configured *string `form:"configured,omitempty" json:"configured,omitempty"`
	Source     *string `form:"source,omitempty" json:"source,omitempty"`
	Host       *string `form:"host,omitempty" json:"host,omitempty"`
	Server     *string `form:"server,omitempty" json:"server,omitempty"`
}

// PostApiV1IndexerproxyParams defines parameters for PostApiV1Indexerproxy.
type PostApiV1IndexerproxyParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1IndexerproxyTestParams defines parameters for PostApiV1IndexerproxyTest.
type PostApiV1IndexerproxyTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV1IndexerproxyIdParams defines parameters for PutApiV1IndexerproxyId.
type PutApiV1IndexerproxyIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV1IndexerstatsParams defines parameters for GetApiV1Indexerstats.
type GetApiV1IndexerstatsParams struct {
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate   *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`
	Indexers  *string    `form:"indexers,omitempty" json:"indexers,omitempty"`
	Protocols *string    `form:"protocols,omitempty" json:"protocols,omitempty"`
	Tags      *string    `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetApiV1LogParams defines parameters for GetApiV1Log.
type GetApiV1LogParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Level         *string        `form:"level,omitempty" json:"level,omitempty"`
}

// PostApiV1NotificationParams defines parameters for PostApiV1Notification.
type PostApiV1NotificationParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostApiV1NotificationTestParams defines parameters for PostApiV1NotificationTest.
type PostApiV1NotificationTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutApiV1NotificationIdParams defines parameters for PutApiV1NotificationId.
type PutApiV1NotificationIdParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetApiV1SearchParams defines parameters for GetApiV1Search.
type GetApiV1SearchParams struct {
	Query      *string  `form:"query,omitempty" json:"query,omitempty"`
	Type       *string  `form:"type,omitempty" json:"type,omitempty"`
	IndexerIds *[]int32 `form:"indexerIds,omitempty" json:"indexerIds,omitempty"`
	Categories *[]int32 `form:"categories,omitempty" json:"categories,omitempty"`
	Limit      *int32   `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32   `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1SearchBulkJSONBody defines parameters for PostApiV1SearchBulk.
type PostApiV1SearchBulkJSONBody = []ReleaseResource

// PostLoginMultipartBody defines parameters for PostLogin.
type PostLoginMultipartBody struct {
	Password   *string `json:"password,omitempty"`
	RememberMe *string `json:"rememberMe,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// PostLoginParams defines parameters for PostLogin.
type PostLoginParams struct {
	ReturnUrl *string `form:"returnUrl,omitempty" json:"returnUrl,omitempty"`
}

// GetIdApiParams defines parameters for GetIdApi.
type GetIdApiParams struct {
	T          *string `form:"t,omitempty" json:"t,omitempty"`
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	Cat        *string `form:"cat,omitempty" json:"cat,omitempty"`
	Imdbid     *string `form:"imdbid,omitempty" json:"imdbid,omitempty"`
	Tmdbid     *int32  `form:"tmdbid,omitempty" json:"tmdbid,omitempty"`
	Extended   *string `form:"extended,omitempty" json:"extended,omitempty"`
	Limit      *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32  `form:"offset,omitempty" json:"offset,omitempty"`
	Minage     *int32  `form:"minage,omitempty" json:"minage,omitempty"`
	Maxage     *int32  `form:"maxage,omitempty" json:"maxage,omitempty"`
	Minsize    *int64  `form:"minsize,omitempty" json:"minsize,omitempty"`
	Maxsize    *int64  `form:"maxsize,omitempty" json:"maxsize,omitempty"`
	Rid        *int32  `form:"rid,omitempty" json:"rid,omitempty"`
	Tvmazeid   *int32  `form:"tvmazeid,omitempty" json:"tvmazeid,omitempty"`
	Traktid    *int32  `form:"traktid,omitempty" json:"traktid,omitempty"`
	Tvdbid     *int32  `form:"tvdbid,omitempty" json:"tvdbid,omitempty"`
	Doubanid   *int32  `form:"doubanid,omitempty" json:"doubanid,omitempty"`
	Season     *int32  `form:"season,omitempty" json:"season,omitempty"`
	Ep         *string `form:"ep,omitempty" json:"ep,omitempty"`
	Album      *string `form:"album,omitempty" json:"album,omitempty"`
	Artist     *string `form:"artist,omitempty" json:"artist,omitempty"`
	Label      *string `form:"label,omitempty" json:"label,omitempty"`
	Track      *string `form:"track,omitempty" json:"track,omitempty"`
	Year       *int32  `form:"year,omitempty" json:"year,omitempty"`
	Genre      *string `form:"genre,omitempty" json:"genre,omitempty"`
	Author     *string `form:"author,omitempty" json:"author,omitempty"`
	Title      *string `form:"title,omitempty" json:"title,omitempty"`
	Publisher  *string `form:"publisher,omitempty" json:"publisher,omitempty"`
	Configured *string `form:"configured,omitempty" json:"configured,omitempty"`
	Source     *string `form:"source,omitempty" json:"source,omitempty"`
	Host       *string `form:"host,omitempty" json:"host,omitempty"`
	Server     *string `form:"server,omitempty" json:"server,omitempty"`
}

// GetIdDownloadParams defines parameters for GetIdDownload.
type GetIdDownloadParams struct {
	Link *string `form:"link,omitempty" json:"link,omitempty"`
	File *string `form:"file,omitempty" json:"file,omitempty"`
}

// PostApiV1ApplicationsJSONRequestBody defines body for PostApiV1Applications for application/json ContentType.
type PostApiV1ApplicationsJSONRequestBody = ApplicationResource

// PostApiV1ApplicationsActionNameJSONRequestBody defines body for PostApiV1ApplicationsActionName for application/json ContentType.
type PostApiV1ApplicationsActionNameJSONRequestBody = ApplicationResource

// DeleteApiV1ApplicationsBulkJSONRequestBody defines body for DeleteApiV1ApplicationsBulk for application/json ContentType.
type DeleteApiV1ApplicationsBulkJSONRequestBody = ApplicationBulkResource

// PutApiV1ApplicationsBulkJSONRequestBody defines body for PutApiV1ApplicationsBulk for application/json ContentType.
type PutApiV1ApplicationsBulkJSONRequestBody = ApplicationBulkResource

// PostApiV1ApplicationsTestJSONRequestBody defines body for PostApiV1ApplicationsTest for application/json ContentType.
type PostApiV1ApplicationsTestJSONRequestBody = ApplicationResource

// PutApiV1ApplicationsIdJSONRequestBody defines body for PutApiV1ApplicationsId for application/json ContentType.
type PutApiV1ApplicationsIdJSONRequestBody = ApplicationResource

// PostApiV1AppprofileJSONRequestBody defines body for PostApiV1Appprofile for application/json ContentType.
type PostApiV1AppprofileJSONRequestBody = AppProfileResource

// PutApiV1AppprofileIdJSONRequestBody defines body for PutApiV1AppprofileId for application/json ContentType.
type PutApiV1AppprofileIdJSONRequestBody = AppProfileResource

// PostApiV1CommandJSONRequestBody defines body for PostApiV1Command for application/json ContentType.
type PostApiV1CommandJSONRequestBody = CommandResource

// PutApiV1ConfigDevelopmentIdJSONRequestBody defines body for PutApiV1ConfigDevelopmentId for application/json ContentType.
type PutApiV1ConfigDevelopmentIdJSONRequestBody = DevelopmentConfigResource

// PutApiV1ConfigDownloadclientIdJSONRequestBody defines body for PutApiV1ConfigDownloadclientId for application/json ContentType.
type PutApiV1ConfigDownloadclientIdJSONRequestBody = DownloadClientConfigResource

// PutApiV1ConfigHostIdJSONRequestBody defines body for PutApiV1ConfigHostId for application/json ContentType.
type PutApiV1ConfigHostIdJSONRequestBody = HostConfigResource

// PutApiV1ConfigUiIdJSONRequestBody defines body for PutApiV1ConfigUiId for application/json ContentType.
type PutApiV1ConfigUiIdJSONRequestBody = UiConfigResource

// PostApiV1CustomfilterJSONRequestBody defines body for PostApiV1Customfilter for application/json ContentType.
type PostApiV1CustomfilterJSONRequestBody = CustomFilterResource

// PutApiV1CustomfilterIdJSONRequestBody defines body for PutApiV1CustomfilterId for application/json ContentType.
type PutApiV1CustomfilterIdJSONRequestBody = CustomFilterResource

// PostApiV1DownloadclientJSONRequestBody defines body for PostApiV1Downloadclient for application/json ContentType.
type PostApiV1DownloadclientJSONRequestBody = DownloadClientResource

// PostApiV1DownloadclientActionNameJSONRequestBody defines body for PostApiV1DownloadclientActionName for application/json ContentType.
type PostApiV1DownloadclientActionNameJSONRequestBody = DownloadClientResource

// DeleteApiV1DownloadclientBulkJSONRequestBody defines body for DeleteApiV1DownloadclientBulk for application/json ContentType.
type DeleteApiV1DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PutApiV1DownloadclientBulkJSONRequestBody defines body for PutApiV1DownloadclientBulk for application/json ContentType.
type PutApiV1DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PostApiV1DownloadclientTestJSONRequestBody defines body for PostApiV1DownloadclientTest for application/json ContentType.
type PostApiV1DownloadclientTestJSONRequestBody = DownloadClientResource

// PutApiV1DownloadclientIdJSONRequestBody defines body for PutApiV1DownloadclientId for application/json ContentType.
type PutApiV1DownloadclientIdJSONRequestBody = DownloadClientResource

// PostApiV1IndexerJSONRequestBody defines body for PostApiV1Indexer for application/json ContentType.
type PostApiV1IndexerJSONRequestBody = IndexerResource

// PostApiV1IndexerActionNameJSONRequestBody defines body for PostApiV1IndexerActionName for application/json ContentType.
type PostApiV1IndexerActionNameJSONRequestBody = IndexerResource

// DeleteApiV1IndexerBulkJSONRequestBody defines body for DeleteApiV1IndexerBulk for application/json ContentType.
type DeleteApiV1IndexerBulkJSONRequestBody = IndexerBulkResource

// PutApiV1IndexerBulkJSONRequestBody defines body for PutApiV1IndexerBulk for application/json ContentType.
type PutApiV1IndexerBulkJSONRequestBody = IndexerBulkResource

// PostApiV1IndexerTestJSONRequestBody defines body for PostApiV1IndexerTest for application/json ContentType.
type PostApiV1IndexerTestJSONRequestBody = IndexerResource

// PutApiV1IndexerIdJSONRequestBody defines body for PutApiV1IndexerId for application/json ContentType.
type PutApiV1IndexerIdJSONRequestBody = IndexerResource

// PostApiV1IndexerproxyJSONRequestBody defines body for PostApiV1Indexerproxy for application/json ContentType.
type PostApiV1IndexerproxyJSONRequestBody = IndexerProxyResource

// PostApiV1IndexerproxyActionNameJSONRequestBody defines body for PostApiV1IndexerproxyActionName for application/json ContentType.
type PostApiV1IndexerproxyActionNameJSONRequestBody = IndexerProxyResource

// PostApiV1IndexerproxyTestJSONRequestBody defines body for PostApiV1IndexerproxyTest for application/json ContentType.
type PostApiV1IndexerproxyTestJSONRequestBody = IndexerProxyResource

// PutApiV1IndexerproxyIdJSONRequestBody defines body for PutApiV1IndexerproxyId for application/json ContentType.
type PutApiV1IndexerproxyIdJSONRequestBody = IndexerProxyResource

// PostApiV1NotificationJSONRequestBody defines body for PostApiV1Notification for application/json ContentType.
type PostApiV1NotificationJSONRequestBody = NotificationResource

// PostApiV1NotificationActionNameJSONRequestBody defines body for PostApiV1NotificationActionName for application/json ContentType.
type PostApiV1NotificationActionNameJSONRequestBody = NotificationResource

// PostApiV1NotificationTestJSONRequestBody defines body for PostApiV1NotificationTest for application/json ContentType.
type PostApiV1NotificationTestJSONRequestBody = NotificationResource

// PutApiV1NotificationIdJSONRequestBody defines body for PutApiV1NotificationId for application/json ContentType.
type PutApiV1NotificationIdJSONRequestBody = NotificationResource

// PostApiV1SearchJSONRequestBody defines body for PostApiV1Search for application/json ContentType.
type PostApiV1SearchJSONRequestBody = ReleaseResource

// PostApiV1SearchBulkJSONRequestBody defines body for PostApiV1SearchBulk for application/json ContentType.
type PostApiV1SearchBulkJSONRequestBody = PostApiV1SearchBulkJSONBody

// PostApiV1TagJSONRequestBody defines body for PostApiV1Tag for application/json ContentType.
type PostApiV1TagJSONRequestBody = TagResource

// PutApiV1TagIdJSONRequestBody defines body for PutApiV1TagId for application/json ContentType.
type PutApiV1TagIdJSONRequestBody = TagResource

// PostLoginMultipartRequestBody defines body for PostLogin for multipart/form-data ContentType.
type PostLoginMultipartRequestBody PostLoginMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApi request
	GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Applications request
	GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ApplicationsWithBody request with any body
	PostApiV1ApplicationsWithBody(ctx context.Context, params *PostApiV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Applications(ctx context.Context, params *PostApiV1ApplicationsParams, body PostApiV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ApplicationsActionNameWithBody request with any body
	PostApiV1ApplicationsActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ApplicationsActionName(ctx context.Context, name string, body PostApiV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ApplicationsBulkWithBody request with any body
	DeleteApiV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV1ApplicationsBulk(ctx context.Context, body DeleteApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ApplicationsBulkWithBody request with any body
	PutApiV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ApplicationsBulk(ctx context.Context, body PutApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ApplicationsSchema request
	GetApiV1ApplicationsSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ApplicationsTestWithBody request with any body
	PostApiV1ApplicationsTestWithBody(ctx context.Context, params *PostApiV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ApplicationsTest(ctx context.Context, params *PostApiV1ApplicationsTestParams, body PostApiV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ApplicationsTestall request
	PostApiV1ApplicationsTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ApplicationsId request
	DeleteApiV1ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ApplicationsId request
	GetApiV1ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ApplicationsIdWithBody request with any body
	PutApiV1ApplicationsIdWithBody(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ApplicationsId(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, body PutApiV1ApplicationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Appprofile request
	GetApiV1Appprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AppprofileWithBody request with any body
	PostApiV1AppprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Appprofile(ctx context.Context, body PostApiV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AppprofileSchema request
	GetApiV1AppprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AppprofileId request
	DeleteApiV1AppprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AppprofileId request
	GetApiV1AppprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1AppprofileIdWithBody request with any body
	PutApiV1AppprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1AppprofileId(ctx context.Context, id string, body PutApiV1AppprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Command request
	GetApiV1Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CommandWithBody request with any body
	PostApiV1CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Command(ctx context.Context, body PostApiV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1CommandId request
	DeleteApiV1CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CommandId request
	GetApiV1CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigDevelopment request
	GetApiV1ConfigDevelopment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigDevelopmentId request
	GetApiV1ConfigDevelopmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ConfigDevelopmentIdWithBody request with any body
	PutApiV1ConfigDevelopmentIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ConfigDevelopmentId(ctx context.Context, id string, body PutApiV1ConfigDevelopmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigDownloadclient request
	GetApiV1ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigDownloadclientId request
	GetApiV1ConfigDownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ConfigDownloadclientIdWithBody request with any body
	PutApiV1ConfigDownloadclientIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ConfigDownloadclientId(ctx context.Context, id string, body PutApiV1ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigHost request
	GetApiV1ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigHostId request
	GetApiV1ConfigHostId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ConfigHostIdWithBody request with any body
	PutApiV1ConfigHostIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ConfigHostId(ctx context.Context, id string, body PutApiV1ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigUi request
	GetApiV1ConfigUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ConfigUiId request
	GetApiV1ConfigUiId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ConfigUiIdWithBody request with any body
	PutApiV1ConfigUiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ConfigUiId(ctx context.Context, id string, body PutApiV1ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Customfilter request
	GetApiV1Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1CustomfilterWithBody request with any body
	PostApiV1CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Customfilter(ctx context.Context, body PostApiV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1CustomfilterId request
	DeleteApiV1CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CustomfilterId request
	GetApiV1CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1CustomfilterIdWithBody request with any body
	PutApiV1CustomfilterIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1CustomfilterId(ctx context.Context, id string, body PutApiV1CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Downloadclient request
	GetApiV1Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DownloadclientWithBody request with any body
	PostApiV1DownloadclientWithBody(ctx context.Context, params *PostApiV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Downloadclient(ctx context.Context, params *PostApiV1DownloadclientParams, body PostApiV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DownloadclientActionNameWithBody request with any body
	PostApiV1DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DownloadclientActionName(ctx context.Context, name string, body PostApiV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DownloadclientBulkWithBody request with any body
	DeleteApiV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV1DownloadclientBulk(ctx context.Context, body DeleteApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DownloadclientBulkWithBody request with any body
	PutApiV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DownloadclientBulk(ctx context.Context, body PutApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DownloadclientSchema request
	GetApiV1DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DownloadclientTestWithBody request with any body
	PostApiV1DownloadclientTestWithBody(ctx context.Context, params *PostApiV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DownloadclientTest(ctx context.Context, params *PostApiV1DownloadclientTestParams, body PostApiV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DownloadclientTestall request
	PostApiV1DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1DownloadclientId request
	DeleteApiV1DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DownloadclientId request
	GetApiV1DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1DownloadclientIdWithBody request with any body
	PutApiV1DownloadclientIdWithBody(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1DownloadclientId(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, body PutApiV1DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Filesystem request
	GetApiV1Filesystem(ctx context.Context, params *GetApiV1FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1FilesystemType request
	GetApiV1FilesystemType(ctx context.Context, params *GetApiV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Health request
	GetApiV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1History request
	GetApiV1History(ctx context.Context, params *GetApiV1HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1HistoryIndexer request
	GetApiV1HistoryIndexer(ctx context.Context, params *GetApiV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1HistorySince request
	GetApiV1HistorySince(ctx context.Context, params *GetApiV1HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Indexer request
	GetApiV1Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerWithBody request with any body
	PostApiV1IndexerWithBody(ctx context.Context, params *PostApiV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Indexer(ctx context.Context, params *PostApiV1IndexerParams, body PostApiV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerActionNameWithBody request with any body
	PostApiV1IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1IndexerActionName(ctx context.Context, name string, body PostApiV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1IndexerBulkWithBody request with any body
	DeleteApiV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV1IndexerBulk(ctx context.Context, body DeleteApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1IndexerBulkWithBody request with any body
	PutApiV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1IndexerBulk(ctx context.Context, body PutApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerCategories request
	GetApiV1IndexerCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerSchema request
	GetApiV1IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerTestWithBody request with any body
	PostApiV1IndexerTestWithBody(ctx context.Context, params *PostApiV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1IndexerTest(ctx context.Context, params *PostApiV1IndexerTestParams, body PostApiV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerTestall request
	PostApiV1IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1IndexerId request
	DeleteApiV1IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerId request
	GetApiV1IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1IndexerIdWithBody request with any body
	PutApiV1IndexerIdWithBody(ctx context.Context, id string, params *PutApiV1IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1IndexerId(ctx context.Context, id string, params *PutApiV1IndexerIdParams, body PutApiV1IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerIdDownload request
	GetApiV1IndexerIdDownload(ctx context.Context, id int32, params *GetApiV1IndexerIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerIdNewznab request
	GetApiV1IndexerIdNewznab(ctx context.Context, id int32, params *GetApiV1IndexerIdNewznabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Indexerproxy request
	GetApiV1Indexerproxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerproxyWithBody request with any body
	PostApiV1IndexerproxyWithBody(ctx context.Context, params *PostApiV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Indexerproxy(ctx context.Context, params *PostApiV1IndexerproxyParams, body PostApiV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerproxyActionNameWithBody request with any body
	PostApiV1IndexerproxyActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1IndexerproxyActionName(ctx context.Context, name string, body PostApiV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerproxySchema request
	GetApiV1IndexerproxySchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerproxyTestWithBody request with any body
	PostApiV1IndexerproxyTestWithBody(ctx context.Context, params *PostApiV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1IndexerproxyTest(ctx context.Context, params *PostApiV1IndexerproxyTestParams, body PostApiV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IndexerproxyTestall request
	PostApiV1IndexerproxyTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1IndexerproxyId request
	DeleteApiV1IndexerproxyId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IndexerproxyId request
	GetApiV1IndexerproxyId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1IndexerproxyIdWithBody request with any body
	PutApiV1IndexerproxyIdWithBody(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1IndexerproxyId(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, body PutApiV1IndexerproxyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Indexerstats request
	GetApiV1Indexerstats(ctx context.Context, params *GetApiV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Indexerstatus request
	GetApiV1Indexerstatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Localization request
	GetApiV1Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LocalizationOptions request
	GetApiV1LocalizationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Log request
	GetApiV1Log(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LogFile request
	GetApiV1LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LogFileUpdate request
	GetApiV1LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LogFileUpdateFilename request
	GetApiV1LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1LogFileFilename request
	GetApiV1LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Notification request
	GetApiV1Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1NotificationWithBody request with any body
	PostApiV1NotificationWithBody(ctx context.Context, params *PostApiV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Notification(ctx context.Context, params *PostApiV1NotificationParams, body PostApiV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1NotificationActionNameWithBody request with any body
	PostApiV1NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1NotificationActionName(ctx context.Context, name string, body PostApiV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1NotificationSchema request
	GetApiV1NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1NotificationTestWithBody request with any body
	PostApiV1NotificationTestWithBody(ctx context.Context, params *PostApiV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1NotificationTest(ctx context.Context, params *PostApiV1NotificationTestParams, body PostApiV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1NotificationTestall request
	PostApiV1NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1NotificationId request
	DeleteApiV1NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1NotificationId request
	GetApiV1NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1NotificationIdWithBody request with any body
	PutApiV1NotificationIdWithBody(ctx context.Context, id string, params *PutApiV1NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1NotificationId(ctx context.Context, id string, params *PutApiV1NotificationIdParams, body PutApiV1NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Search request
	GetApiV1Search(ctx context.Context, params *GetApiV1SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SearchWithBody request with any body
	PostApiV1SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Search(ctx context.Context, body PostApiV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SearchBulkWithBody request with any body
	PostApiV1SearchBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SearchBulk(ctx context.Context, body PostApiV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemBackup request
	GetApiV1SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SystemBackupRestoreUpload request
	PostApiV1SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SystemBackupRestoreId request
	PostApiV1SystemBackupRestoreId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1SystemBackupId request
	DeleteApiV1SystemBackupId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SystemRestart request
	PostApiV1SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemRoutes request
	GetApiV1SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemRoutesDuplicate request
	GetApiV1SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SystemShutdown request
	PostApiV1SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemStatus request
	GetApiV1SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemTask request
	GetApiV1SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SystemTaskId request
	GetApiV1SystemTaskId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Tag request
	GetApiV1Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1TagWithBody request with any body
	PostApiV1TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Tag(ctx context.Context, body PostApiV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TagDetail request
	GetApiV1TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TagDetailId request
	GetApiV1TagDetailId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1TagId request
	DeleteApiV1TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TagId request
	GetApiV1TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1TagIdWithBody request with any body
	PutApiV1TagIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1TagId(ctx context.Context, id string, body PutApiV1TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Update request
	GetApiV1Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentPath request
	GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogin request
	GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogout request
	GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadPing request
	HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdApi request
	GetIdApi(ctx context.Context, id int32, params *GetIdApiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdDownload request
	GetIdDownload(ctx context.Context, id int32, params *GetIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPath request
	GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsWithBody(ctx context.Context, params *PostApiV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Applications(ctx context.Context, params *PostApiV1ApplicationsParams, body PostApiV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsActionName(ctx context.Context, name string, body PostApiV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ApplicationsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ApplicationsBulk(ctx context.Context, body DeleteApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ApplicationsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ApplicationsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ApplicationsBulk(ctx context.Context, body PutApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ApplicationsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ApplicationsSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsTestWithBody(ctx context.Context, params *PostApiV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsTest(ctx context.Context, params *PostApiV1ApplicationsTestParams, body PostApiV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ApplicationsTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ApplicationsTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ApplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ApplicationsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ApplicationsIdWithBody(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ApplicationsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ApplicationsId(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, body PutApiV1ApplicationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ApplicationsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Appprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AppprofileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AppprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AppprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Appprofile(ctx context.Context, body PostApiV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AppprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AppprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AppprofileSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AppprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AppprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AppprofileId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AppprofileIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AppprofileIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AppprofileIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1AppprofileId(ctx context.Context, id string, body PutApiV1AppprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1AppprofileIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommandRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Command(ctx context.Context, body PostApiV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CommandRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1CommandIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CommandId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CommandIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigDevelopment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigDevelopmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigDevelopmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigDevelopmentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigDevelopmentIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigDevelopmentIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigDevelopmentId(ctx context.Context, id string, body PutApiV1ConfigDevelopmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigDevelopmentIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigDownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigDownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigDownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigDownloadclientIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigDownloadclientIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigDownloadclientId(ctx context.Context, id string, body PutApiV1ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigDownloadclientIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigHostId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigHostIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigHostIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigHostIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigHostId(ctx context.Context, id string, body PutApiV1ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigHostIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigUiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ConfigUiId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ConfigUiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigUiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigUiIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ConfigUiId(ctx context.Context, id string, body PutApiV1ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ConfigUiIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CustomfilterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustomfilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Customfilter(ctx context.Context, body PostApiV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1CustomfilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1CustomfilterIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CustomfilterId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CustomfilterIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CustomfilterIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CustomfilterIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1CustomfilterId(ctx context.Context, id string, body PutApiV1CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1CustomfilterIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientWithBody(ctx context.Context, params *PostApiV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Downloadclient(ctx context.Context, params *PostApiV1DownloadclientParams, body PostApiV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientActionName(ctx context.Context, name string, body PostApiV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DownloadclientBulk(ctx context.Context, body DeleteApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DownloadclientBulk(ctx context.Context, body PutApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DownloadclientSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientTestWithBody(ctx context.Context, params *PostApiV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientTest(ctx context.Context, params *PostApiV1DownloadclientTestParams, body PostApiV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DownloadclientTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1DownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DownloadclientId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DownloadclientIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DownloadclientIdWithBody(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DownloadclientIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1DownloadclientId(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, body PutApiV1DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1DownloadclientIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Filesystem(ctx context.Context, params *GetApiV1FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1FilesystemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1FilesystemType(ctx context.Context, params *GetApiV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1FilesystemTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1History(ctx context.Context, params *GetApiV1HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1HistoryIndexer(ctx context.Context, params *GetApiV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HistoryIndexerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1HistorySince(ctx context.Context, params *GetApiV1HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HistorySinceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerWithBody(ctx context.Context, params *PostApiV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Indexer(ctx context.Context, params *PostApiV1IndexerParams, body PostApiV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerActionName(ctx context.Context, name string, body PostApiV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IndexerBulk(ctx context.Context, body DeleteApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerBulk(ctx context.Context, body PutApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerTestWithBody(ctx context.Context, params *PostApiV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerTest(ctx context.Context, params *PostApiV1IndexerTestParams, body PostApiV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IndexerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerIdWithBody(ctx context.Context, id string, params *PutApiV1IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerId(ctx context.Context, id string, params *PutApiV1IndexerIdParams, body PutApiV1IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerIdDownload(ctx context.Context, id int32, params *GetApiV1IndexerIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerIdDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerIdNewznab(ctx context.Context, id int32, params *GetApiV1IndexerIdNewznabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerIdNewznabRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Indexerproxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerproxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyWithBody(ctx context.Context, params *PostApiV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Indexerproxy(ctx context.Context, params *PostApiV1IndexerproxyParams, body PostApiV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyActionName(ctx context.Context, name string, body PostApiV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerproxySchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerproxySchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyTestWithBody(ctx context.Context, params *PostApiV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyTest(ctx context.Context, params *PostApiV1IndexerproxyTestParams, body PostApiV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IndexerproxyTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IndexerproxyTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IndexerproxyId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IndexerproxyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IndexerproxyId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerproxyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerproxyIdWithBody(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerproxyIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1IndexerproxyId(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, body PutApiV1IndexerproxyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1IndexerproxyIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Indexerstats(ctx context.Context, params *GetApiV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerstatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Indexerstatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IndexerstatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LocalizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LocalizationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LocalizationOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Log(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogFileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogFileUpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogFileUpdateFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LogFileFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1NotificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationWithBody(ctx context.Context, params *PostApiV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Notification(ctx context.Context, params *PostApiV1NotificationParams, body PostApiV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationActionName(ctx context.Context, name string, body PostApiV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1NotificationSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationTestWithBody(ctx context.Context, params *PostApiV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationTest(ctx context.Context, params *PostApiV1NotificationTestParams, body PostApiV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1NotificationTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1NotificationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1NotificationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1NotificationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1NotificationIdWithBody(ctx context.Context, id string, params *PutApiV1NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1NotificationIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1NotificationId(ctx context.Context, id string, params *PutApiV1NotificationIdParams, body PutApiV1NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1NotificationIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Search(ctx context.Context, params *GetApiV1SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Search(ctx context.Context, body PostApiV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SearchBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SearchBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SearchBulk(ctx context.Context, body PostApiV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SearchBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemBackupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SystemBackupRestoreUploadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SystemBackupRestoreId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SystemBackupRestoreIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1SystemBackupId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1SystemBackupIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SystemRestartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemRoutesDuplicateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SystemShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SystemTaskId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SystemTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Tag(ctx context.Context, body PostApiV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TagDetailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TagDetailId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TagDetailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1TagIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TagId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TagIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1TagIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1TagIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1TagId(ctx context.Context, id string, body PutApiV1TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1TagIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdApi(ctx context.Context, id int32, params *GetIdApiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdApiRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdDownload(ctx context.Context, id int32, params *GetIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiRequest generates requests for GetApi
func NewGetApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ApplicationsRequest generates requests for GetApiV1Applications
func NewGetApiV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ApplicationsRequest calls the generic PostApiV1Applications builder with application/json body
func NewPostApiV1ApplicationsRequest(server string, params *PostApiV1ApplicationsParams, body PostApiV1ApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1ApplicationsRequestWithBody generates requests for PostApiV1Applications with any type of body
func NewPostApiV1ApplicationsRequestWithBody(server string, params *PostApiV1ApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1ApplicationsActionNameRequest calls the generic PostApiV1ApplicationsActionName builder with application/json body
func NewPostApiV1ApplicationsActionNameRequest(server string, name string, body PostApiV1ApplicationsActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ApplicationsActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV1ApplicationsActionNameRequestWithBody generates requests for PostApiV1ApplicationsActionName with any type of body
func NewPostApiV1ApplicationsActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ApplicationsBulkRequest calls the generic DeleteApiV1ApplicationsBulk builder with application/json body
func NewDeleteApiV1ApplicationsBulkRequest(server string, body DeleteApiV1ApplicationsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV1ApplicationsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV1ApplicationsBulkRequestWithBody generates requests for DeleteApiV1ApplicationsBulk with any type of body
func NewDeleteApiV1ApplicationsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV1ApplicationsBulkRequest calls the generic PutApiV1ApplicationsBulk builder with application/json body
func NewPutApiV1ApplicationsBulkRequest(server string, body PutApiV1ApplicationsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ApplicationsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV1ApplicationsBulkRequestWithBody generates requests for PutApiV1ApplicationsBulk with any type of body
func NewPutApiV1ApplicationsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ApplicationsSchemaRequest generates requests for GetApiV1ApplicationsSchema
func NewGetApiV1ApplicationsSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ApplicationsTestRequest calls the generic PostApiV1ApplicationsTest builder with application/json body
func NewPostApiV1ApplicationsTestRequest(server string, params *PostApiV1ApplicationsTestParams, body PostApiV1ApplicationsTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ApplicationsTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1ApplicationsTestRequestWithBody generates requests for PostApiV1ApplicationsTest with any type of body
func NewPostApiV1ApplicationsTestRequestWithBody(server string, params *PostApiV1ApplicationsTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1ApplicationsTestallRequest generates requests for PostApiV1ApplicationsTestall
func NewPostApiV1ApplicationsTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1ApplicationsIdRequest generates requests for DeleteApiV1ApplicationsId
func NewDeleteApiV1ApplicationsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ApplicationsIdRequest generates requests for GetApiV1ApplicationsId
func NewGetApiV1ApplicationsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ApplicationsIdRequest calls the generic PutApiV1ApplicationsId builder with application/json body
func NewPutApiV1ApplicationsIdRequest(server string, id string, params *PutApiV1ApplicationsIdParams, body PutApiV1ApplicationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ApplicationsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV1ApplicationsIdRequestWithBody generates requests for PutApiV1ApplicationsId with any type of body
func NewPutApiV1ApplicationsIdRequestWithBody(server string, id string, params *PutApiV1ApplicationsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AppprofileRequest generates requests for GetApiV1Appprofile
func NewGetApiV1AppprofileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AppprofileRequest calls the generic PostApiV1Appprofile builder with application/json body
func NewPostApiV1AppprofileRequest(server string, body PostApiV1AppprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AppprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AppprofileRequestWithBody generates requests for PostApiV1Appprofile with any type of body
func NewPostApiV1AppprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AppprofileSchemaRequest generates requests for GetApiV1AppprofileSchema
func NewGetApiV1AppprofileSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1AppprofileIdRequest generates requests for DeleteApiV1AppprofileId
func NewDeleteApiV1AppprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AppprofileIdRequest generates requests for GetApiV1AppprofileId
func NewGetApiV1AppprofileIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1AppprofileIdRequest calls the generic PutApiV1AppprofileId builder with application/json body
func NewPutApiV1AppprofileIdRequest(server string, id string, body PutApiV1AppprofileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1AppprofileIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1AppprofileIdRequestWithBody generates requests for PutApiV1AppprofileId with any type of body
func NewPutApiV1AppprofileIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CommandRequest generates requests for GetApiV1Command
func NewGetApiV1CommandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CommandRequest calls the generic PostApiV1Command builder with application/json body
func NewPostApiV1CommandRequest(server string, body PostApiV1CommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CommandRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CommandRequestWithBody generates requests for PostApiV1Command with any type of body
func NewPostApiV1CommandRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1CommandIdRequest generates requests for DeleteApiV1CommandId
func NewDeleteApiV1CommandIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CommandIdRequest generates requests for GetApiV1CommandId
func NewGetApiV1CommandIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ConfigDevelopmentRequest generates requests for GetApiV1ConfigDevelopment
func NewGetApiV1ConfigDevelopmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ConfigDevelopmentIdRequest generates requests for GetApiV1ConfigDevelopmentId
func NewGetApiV1ConfigDevelopmentIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ConfigDevelopmentIdRequest calls the generic PutApiV1ConfigDevelopmentId builder with application/json body
func NewPutApiV1ConfigDevelopmentIdRequest(server string, id string, body PutApiV1ConfigDevelopmentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ConfigDevelopmentIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1ConfigDevelopmentIdRequestWithBody generates requests for PutApiV1ConfigDevelopmentId with any type of body
func NewPutApiV1ConfigDevelopmentIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ConfigDownloadclientRequest generates requests for GetApiV1ConfigDownloadclient
func NewGetApiV1ConfigDownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ConfigDownloadclientIdRequest generates requests for GetApiV1ConfigDownloadclientId
func NewGetApiV1ConfigDownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ConfigDownloadclientIdRequest calls the generic PutApiV1ConfigDownloadclientId builder with application/json body
func NewPutApiV1ConfigDownloadclientIdRequest(server string, id string, body PutApiV1ConfigDownloadclientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ConfigDownloadclientIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1ConfigDownloadclientIdRequestWithBody generates requests for PutApiV1ConfigDownloadclientId with any type of body
func NewPutApiV1ConfigDownloadclientIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ConfigHostRequest generates requests for GetApiV1ConfigHost
func NewGetApiV1ConfigHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ConfigHostIdRequest generates requests for GetApiV1ConfigHostId
func NewGetApiV1ConfigHostIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ConfigHostIdRequest calls the generic PutApiV1ConfigHostId builder with application/json body
func NewPutApiV1ConfigHostIdRequest(server string, id string, body PutApiV1ConfigHostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ConfigHostIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1ConfigHostIdRequestWithBody generates requests for PutApiV1ConfigHostId with any type of body
func NewPutApiV1ConfigHostIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ConfigUiRequest generates requests for GetApiV1ConfigUi
func NewGetApiV1ConfigUiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ConfigUiIdRequest generates requests for GetApiV1ConfigUiId
func NewGetApiV1ConfigUiIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ConfigUiIdRequest calls the generic PutApiV1ConfigUiId builder with application/json body
func NewPutApiV1ConfigUiIdRequest(server string, id string, body PutApiV1ConfigUiIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ConfigUiIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1ConfigUiIdRequestWithBody generates requests for PutApiV1ConfigUiId with any type of body
func NewPutApiV1ConfigUiIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1CustomfilterRequest generates requests for GetApiV1Customfilter
func NewGetApiV1CustomfilterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1CustomfilterRequest calls the generic PostApiV1Customfilter builder with application/json body
func NewPostApiV1CustomfilterRequest(server string, body PostApiV1CustomfilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1CustomfilterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1CustomfilterRequestWithBody generates requests for PostApiV1Customfilter with any type of body
func NewPostApiV1CustomfilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1CustomfilterIdRequest generates requests for DeleteApiV1CustomfilterId
func NewDeleteApiV1CustomfilterIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CustomfilterIdRequest generates requests for GetApiV1CustomfilterId
func NewGetApiV1CustomfilterIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1CustomfilterIdRequest calls the generic PutApiV1CustomfilterId builder with application/json body
func NewPutApiV1CustomfilterIdRequest(server string, id string, body PutApiV1CustomfilterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1CustomfilterIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1CustomfilterIdRequestWithBody generates requests for PutApiV1CustomfilterId with any type of body
func NewPutApiV1CustomfilterIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DownloadclientRequest generates requests for GetApiV1Downloadclient
func NewGetApiV1DownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DownloadclientRequest calls the generic PostApiV1Downloadclient builder with application/json body
func NewPostApiV1DownloadclientRequest(server string, params *PostApiV1DownloadclientParams, body PostApiV1DownloadclientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DownloadclientRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1DownloadclientRequestWithBody generates requests for PostApiV1Downloadclient with any type of body
func NewPostApiV1DownloadclientRequestWithBody(server string, params *PostApiV1DownloadclientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DownloadclientActionNameRequest calls the generic PostApiV1DownloadclientActionName builder with application/json body
func NewPostApiV1DownloadclientActionNameRequest(server string, name string, body PostApiV1DownloadclientActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DownloadclientActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV1DownloadclientActionNameRequestWithBody generates requests for PostApiV1DownloadclientActionName with any type of body
func NewPostApiV1DownloadclientActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1DownloadclientBulkRequest calls the generic DeleteApiV1DownloadclientBulk builder with application/json body
func NewDeleteApiV1DownloadclientBulkRequest(server string, body DeleteApiV1DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV1DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV1DownloadclientBulkRequestWithBody generates requests for DeleteApiV1DownloadclientBulk with any type of body
func NewDeleteApiV1DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV1DownloadclientBulkRequest calls the generic PutApiV1DownloadclientBulk builder with application/json body
func NewPutApiV1DownloadclientBulkRequest(server string, body PutApiV1DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV1DownloadclientBulkRequestWithBody generates requests for PutApiV1DownloadclientBulk with any type of body
func NewPutApiV1DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1DownloadclientSchemaRequest generates requests for GetApiV1DownloadclientSchema
func NewGetApiV1DownloadclientSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DownloadclientTestRequest calls the generic PostApiV1DownloadclientTest builder with application/json body
func NewPostApiV1DownloadclientTestRequest(server string, params *PostApiV1DownloadclientTestParams, body PostApiV1DownloadclientTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DownloadclientTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1DownloadclientTestRequestWithBody generates requests for PostApiV1DownloadclientTest with any type of body
func NewPostApiV1DownloadclientTestRequestWithBody(server string, params *PostApiV1DownloadclientTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DownloadclientTestallRequest generates requests for PostApiV1DownloadclientTestall
func NewPostApiV1DownloadclientTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1DownloadclientIdRequest generates requests for DeleteApiV1DownloadclientId
func NewDeleteApiV1DownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DownloadclientIdRequest generates requests for GetApiV1DownloadclientId
func NewGetApiV1DownloadclientIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1DownloadclientIdRequest calls the generic PutApiV1DownloadclientId builder with application/json body
func NewPutApiV1DownloadclientIdRequest(server string, id string, params *PutApiV1DownloadclientIdParams, body PutApiV1DownloadclientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1DownloadclientIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV1DownloadclientIdRequestWithBody generates requests for PutApiV1DownloadclientId with any type of body
func NewPutApiV1DownloadclientIdRequestWithBody(server string, id string, params *PutApiV1DownloadclientIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1FilesystemRequest generates requests for GetApiV1Filesystem
func NewGetApiV1FilesystemRequest(server string, params *GetApiV1FilesystemParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/filesystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeFiles", runtime.ParamLocationQuery, *params.IncludeFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllowFoldersWithoutTrailingSlashes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allowFoldersWithoutTrailingSlashes", runtime.ParamLocationQuery, *params.AllowFoldersWithoutTrailingSlashes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1FilesystemTypeRequest generates requests for GetApiV1FilesystemType
func NewGetApiV1FilesystemTypeRequest(server string, params *GetApiV1FilesystemTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/filesystem/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HealthRequest generates requests for GetApiV1Health
func NewGetApiV1HealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HistoryRequest generates requests for GetApiV1History
func NewGetApiV1HistoryRequest(server string, params *GetApiV1HistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Successful != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "successful", runtime.ParamLocationQuery, *params.Successful); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DownloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "downloadId", runtime.ParamLocationQuery, *params.DownloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexerIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerIds", runtime.ParamLocationQuery, *params.IndexerIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HistoryIndexerRequest generates requests for GetApiV1HistoryIndexer
func NewGetApiV1HistoryIndexerRequest(server string, params *GetApiV1HistoryIndexerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IndexerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerId", runtime.ParamLocationQuery, *params.IndexerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HistorySinceRequest generates requests for GetApiV1HistorySince
func NewGetApiV1HistorySinceRequest(server string, params *GetApiV1HistorySinceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history/since")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerRequest generates requests for GetApiV1Indexer
func NewGetApiV1IndexerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1IndexerRequest calls the generic PostApiV1Indexer builder with application/json body
func NewPostApiV1IndexerRequest(server string, params *PostApiV1IndexerParams, body PostApiV1IndexerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1IndexerRequestWithBody generates requests for PostApiV1Indexer with any type of body
func NewPostApiV1IndexerRequestWithBody(server string, params *PostApiV1IndexerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1IndexerActionNameRequest calls the generic PostApiV1IndexerActionName builder with application/json body
func NewPostApiV1IndexerActionNameRequest(server string, name string, body PostApiV1IndexerActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV1IndexerActionNameRequestWithBody generates requests for PostApiV1IndexerActionName with any type of body
func NewPostApiV1IndexerActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1IndexerBulkRequest calls the generic DeleteApiV1IndexerBulk builder with application/json body
func NewDeleteApiV1IndexerBulkRequest(server string, body DeleteApiV1IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV1IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV1IndexerBulkRequestWithBody generates requests for DeleteApiV1IndexerBulk with any type of body
func NewDeleteApiV1IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV1IndexerBulkRequest calls the generic PutApiV1IndexerBulk builder with application/json body
func NewPutApiV1IndexerBulkRequest(server string, body PutApiV1IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV1IndexerBulkRequestWithBody generates requests for PutApiV1IndexerBulk with any type of body
func NewPutApiV1IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1IndexerCategoriesRequest generates requests for GetApiV1IndexerCategories
func NewGetApiV1IndexerCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerSchemaRequest generates requests for GetApiV1IndexerSchema
func NewGetApiV1IndexerSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1IndexerTestRequest calls the generic PostApiV1IndexerTest builder with application/json body
func NewPostApiV1IndexerTestRequest(server string, params *PostApiV1IndexerTestParams, body PostApiV1IndexerTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1IndexerTestRequestWithBody generates requests for PostApiV1IndexerTest with any type of body
func NewPostApiV1IndexerTestRequestWithBody(server string, params *PostApiV1IndexerTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1IndexerTestallRequest generates requests for PostApiV1IndexerTestall
func NewPostApiV1IndexerTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1IndexerIdRequest generates requests for DeleteApiV1IndexerId
func NewDeleteApiV1IndexerIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerIdRequest generates requests for GetApiV1IndexerId
func NewGetApiV1IndexerIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1IndexerIdRequest calls the generic PutApiV1IndexerId builder with application/json body
func NewPutApiV1IndexerIdRequest(server string, id string, params *PutApiV1IndexerIdParams, body PutApiV1IndexerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1IndexerIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV1IndexerIdRequestWithBody generates requests for PutApiV1IndexerId with any type of body
func NewPutApiV1IndexerIdRequestWithBody(server string, id string, params *PutApiV1IndexerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1IndexerIdDownloadRequest generates requests for GetApiV1IndexerIdDownload
func NewGetApiV1IndexerIdDownloadRequest(server string, id int32, params *GetApiV1IndexerIdDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Link != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link", runtime.ParamLocationQuery, *params.Link); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.File != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerIdNewznabRequest generates requests for GetApiV1IndexerIdNewznab
func NewGetApiV1IndexerIdNewznabRequest(server string, id int32, params *GetApiV1IndexerIdNewznabParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s/newznab", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.T != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t", runtime.ParamLocationQuery, *params.T); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cat", runtime.ParamLocationQuery, *params.Cat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Imdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imdbid", runtime.ParamLocationQuery, *params.Imdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tmdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbid", runtime.ParamLocationQuery, *params.Tmdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extended != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended", runtime.ParamLocationQuery, *params.Extended); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minage", runtime.ParamLocationQuery, *params.Minage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxage", runtime.ParamLocationQuery, *params.Maxage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minsize", runtime.ParamLocationQuery, *params.Minsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxsize", runtime.ParamLocationQuery, *params.Maxsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvmazeid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvmazeid", runtime.ParamLocationQuery, *params.Tvmazeid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Traktid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traktid", runtime.ParamLocationQuery, *params.Traktid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvdbid", runtime.ParamLocationQuery, *params.Tvdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Doubanid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "doubanid", runtime.ParamLocationQuery, *params.Doubanid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Season != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "season", runtime.ParamLocationQuery, *params.Season); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ep", runtime.ParamLocationQuery, *params.Ep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Album != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "album", runtime.ParamLocationQuery, *params.Album); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Artist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist", runtime.ParamLocationQuery, *params.Artist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Track != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "track", runtime.ParamLocationQuery, *params.Track); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Publisher != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisher", runtime.ParamLocationQuery, *params.Publisher); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Configured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configured", runtime.ParamLocationQuery, *params.Configured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Server != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerproxyRequest generates requests for GetApiV1Indexerproxy
func NewGetApiV1IndexerproxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1IndexerproxyRequest calls the generic PostApiV1Indexerproxy builder with application/json body
func NewPostApiV1IndexerproxyRequest(server string, params *PostApiV1IndexerproxyParams, body PostApiV1IndexerproxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerproxyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1IndexerproxyRequestWithBody generates requests for PostApiV1Indexerproxy with any type of body
func NewPostApiV1IndexerproxyRequestWithBody(server string, params *PostApiV1IndexerproxyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1IndexerproxyActionNameRequest calls the generic PostApiV1IndexerproxyActionName builder with application/json body
func NewPostApiV1IndexerproxyActionNameRequest(server string, name string, body PostApiV1IndexerproxyActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerproxyActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV1IndexerproxyActionNameRequestWithBody generates requests for PostApiV1IndexerproxyActionName with any type of body
func NewPostApiV1IndexerproxyActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1IndexerproxySchemaRequest generates requests for GetApiV1IndexerproxySchema
func NewGetApiV1IndexerproxySchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1IndexerproxyTestRequest calls the generic PostApiV1IndexerproxyTest builder with application/json body
func NewPostApiV1IndexerproxyTestRequest(server string, params *PostApiV1IndexerproxyTestParams, body PostApiV1IndexerproxyTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IndexerproxyTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1IndexerproxyTestRequestWithBody generates requests for PostApiV1IndexerproxyTest with any type of body
func NewPostApiV1IndexerproxyTestRequestWithBody(server string, params *PostApiV1IndexerproxyTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1IndexerproxyTestallRequest generates requests for PostApiV1IndexerproxyTestall
func NewPostApiV1IndexerproxyTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1IndexerproxyIdRequest generates requests for DeleteApiV1IndexerproxyId
func NewDeleteApiV1IndexerproxyIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerproxyIdRequest generates requests for GetApiV1IndexerproxyId
func NewGetApiV1IndexerproxyIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1IndexerproxyIdRequest calls the generic PutApiV1IndexerproxyId builder with application/json body
func NewPutApiV1IndexerproxyIdRequest(server string, id string, params *PutApiV1IndexerproxyIdParams, body PutApiV1IndexerproxyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1IndexerproxyIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV1IndexerproxyIdRequestWithBody generates requests for PutApiV1IndexerproxyId with any type of body
func NewPutApiV1IndexerproxyIdRequestWithBody(server string, id string, params *PutApiV1IndexerproxyIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1IndexerstatsRequest generates requests for GetApiV1Indexerstats
func NewGetApiV1IndexerstatsRequest(server string, params *GetApiV1IndexerstatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerstats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Indexers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexers", runtime.ParamLocationQuery, *params.Indexers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocols != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocols", runtime.ParamLocationQuery, *params.Protocols); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IndexerstatusRequest generates requests for GetApiV1Indexerstatus
func NewGetApiV1IndexerstatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LocalizationRequest generates requests for GetApiV1Localization
func NewGetApiV1LocalizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/localization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LocalizationOptionsRequest generates requests for GetApiV1LocalizationOptions
func NewGetApiV1LocalizationOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/localization/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogRequest generates requests for GetApiV1Log
func NewGetApiV1LogRequest(server string, params *GetApiV1LogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogFileRequest generates requests for GetApiV1LogFile
func NewGetApiV1LogFileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogFileUpdateRequest generates requests for GetApiV1LogFileUpdate
func NewGetApiV1LogFileUpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogFileUpdateFilenameRequest generates requests for GetApiV1LogFileUpdateFilename
func NewGetApiV1LogFileUpdateFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/update/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LogFileFilenameRequest generates requests for GetApiV1LogFileFilename
func NewGetApiV1LogFileFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1NotificationRequest generates requests for GetApiV1Notification
func NewGetApiV1NotificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1NotificationRequest calls the generic PostApiV1Notification builder with application/json body
func NewPostApiV1NotificationRequest(server string, params *PostApiV1NotificationParams, body PostApiV1NotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1NotificationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1NotificationRequestWithBody generates requests for PostApiV1Notification with any type of body
func NewPostApiV1NotificationRequestWithBody(server string, params *PostApiV1NotificationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1NotificationActionNameRequest calls the generic PostApiV1NotificationActionName builder with application/json body
func NewPostApiV1NotificationActionNameRequest(server string, name string, body PostApiV1NotificationActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1NotificationActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiV1NotificationActionNameRequestWithBody generates requests for PostApiV1NotificationActionName with any type of body
func NewPostApiV1NotificationActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1NotificationSchemaRequest generates requests for GetApiV1NotificationSchema
func NewGetApiV1NotificationSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1NotificationTestRequest calls the generic PostApiV1NotificationTest builder with application/json body
func NewPostApiV1NotificationTestRequest(server string, params *PostApiV1NotificationTestParams, body PostApiV1NotificationTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1NotificationTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiV1NotificationTestRequestWithBody generates requests for PostApiV1NotificationTest with any type of body
func NewPostApiV1NotificationTestRequestWithBody(server string, params *PostApiV1NotificationTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1NotificationTestallRequest generates requests for PostApiV1NotificationTestall
func NewPostApiV1NotificationTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1NotificationIdRequest generates requests for DeleteApiV1NotificationId
func NewDeleteApiV1NotificationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1NotificationIdRequest generates requests for GetApiV1NotificationId
func NewGetApiV1NotificationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1NotificationIdRequest calls the generic PutApiV1NotificationId builder with application/json body
func NewPutApiV1NotificationIdRequest(server string, id string, params *PutApiV1NotificationIdParams, body PutApiV1NotificationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1NotificationIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutApiV1NotificationIdRequestWithBody generates requests for PutApiV1NotificationId with any type of body
func NewPutApiV1NotificationIdRequestWithBody(server string, id string, params *PutApiV1NotificationIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SearchRequest generates requests for GetApiV1Search
func NewGetApiV1SearchRequest(server string, params *GetApiV1SearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexerIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerIds", runtime.ParamLocationQuery, *params.IndexerIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Categories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, *params.Categories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SearchRequest calls the generic PostApiV1Search builder with application/json body
func NewPostApiV1SearchRequest(server string, body PostApiV1SearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SearchRequestWithBody generates requests for PostApiV1Search with any type of body
func NewPostApiV1SearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SearchBulkRequest calls the generic PostApiV1SearchBulk builder with application/json body
func NewPostApiV1SearchBulkRequest(server string, body PostApiV1SearchBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SearchBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SearchBulkRequestWithBody generates requests for PostApiV1SearchBulk with any type of body
func NewPostApiV1SearchBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SystemBackupRequest generates requests for GetApiV1SystemBackup
func NewGetApiV1SystemBackupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SystemBackupRestoreUploadRequest generates requests for PostApiV1SystemBackupRestoreUpload
func NewPostApiV1SystemBackupRestoreUploadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/restore/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SystemBackupRestoreIdRequest generates requests for PostApiV1SystemBackupRestoreId
func NewPostApiV1SystemBackupRestoreIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/restore/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1SystemBackupIdRequest generates requests for DeleteApiV1SystemBackupId
func NewDeleteApiV1SystemBackupIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SystemRestartRequest generates requests for PostApiV1SystemRestart
func NewPostApiV1SystemRestartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SystemRoutesRequest generates requests for GetApiV1SystemRoutes
func NewGetApiV1SystemRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SystemRoutesDuplicateRequest generates requests for GetApiV1SystemRoutesDuplicate
func NewGetApiV1SystemRoutesDuplicateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/routes/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SystemShutdownRequest generates requests for PostApiV1SystemShutdown
func NewPostApiV1SystemShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SystemStatusRequest generates requests for GetApiV1SystemStatus
func NewGetApiV1SystemStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SystemTaskRequest generates requests for GetApiV1SystemTask
func NewGetApiV1SystemTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SystemTaskIdRequest generates requests for GetApiV1SystemTaskId
func NewGetApiV1SystemTaskIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1TagRequest generates requests for GetApiV1Tag
func NewGetApiV1TagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1TagRequest calls the generic PostApiV1Tag builder with application/json body
func NewPostApiV1TagRequest(server string, body PostApiV1TagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1TagRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1TagRequestWithBody generates requests for PostApiV1Tag with any type of body
func NewPostApiV1TagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1TagDetailRequest generates requests for GetApiV1TagDetail
func NewGetApiV1TagDetailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1TagDetailIdRequest generates requests for GetApiV1TagDetailId
func NewGetApiV1TagDetailIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1TagIdRequest generates requests for DeleteApiV1TagId
func NewDeleteApiV1TagIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1TagIdRequest generates requests for GetApiV1TagId
func NewGetApiV1TagIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1TagIdRequest calls the generic PutApiV1TagId builder with application/json body
func NewPutApiV1TagIdRequest(server string, id string, body PutApiV1TagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1TagIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1TagIdRequestWithBody generates requests for PutApiV1TagId with any type of body
func NewPutApiV1TagIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1UpdateRequest generates requests for GetApiV1Update
func NewGetApiV1UpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentPathRequest generates requests for GetContentPath
func NewGetContentPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoginRequest generates requests for GetLogin
func NewGetLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, params *PostLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnUrl", runtime.ParamLocationQuery, *params.ReturnUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogoutRequest generates requests for GetLogout
func NewGetLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadPingRequest generates requests for HeadPing
func NewHeadPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdApiRequest generates requests for GetIdApi
func NewGetIdApiRequest(server string, id int32, params *GetIdApiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/api", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.T != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t", runtime.ParamLocationQuery, *params.T); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cat", runtime.ParamLocationQuery, *params.Cat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Imdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imdbid", runtime.ParamLocationQuery, *params.Imdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tmdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbid", runtime.ParamLocationQuery, *params.Tmdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extended != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended", runtime.ParamLocationQuery, *params.Extended); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minage", runtime.ParamLocationQuery, *params.Minage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxage", runtime.ParamLocationQuery, *params.Maxage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minsize", runtime.ParamLocationQuery, *params.Minsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxsize", runtime.ParamLocationQuery, *params.Maxsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvmazeid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvmazeid", runtime.ParamLocationQuery, *params.Tvmazeid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Traktid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traktid", runtime.ParamLocationQuery, *params.Traktid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvdbid", runtime.ParamLocationQuery, *params.Tvdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Doubanid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "doubanid", runtime.ParamLocationQuery, *params.Doubanid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Season != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "season", runtime.ParamLocationQuery, *params.Season); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ep", runtime.ParamLocationQuery, *params.Ep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Album != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "album", runtime.ParamLocationQuery, *params.Album); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Artist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist", runtime.ParamLocationQuery, *params.Artist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Track != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "track", runtime.ParamLocationQuery, *params.Track); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Publisher != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisher", runtime.ParamLocationQuery, *params.Publisher); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Configured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configured", runtime.ParamLocationQuery, *params.Configured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Server != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdDownloadRequest generates requests for GetIdDownload
func NewGetIdDownloadRequest(server string, id int32, params *GetIdDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Link != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link", runtime.ParamLocationQuery, *params.Link); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.File != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPathRequest generates requests for GetPath
func NewGetPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiWithResponse request
	GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error)

	// GetApiV1ApplicationsWithResponse request
	GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error)

	// PostApiV1ApplicationsWithBodyWithResponse request with any body
	PostApiV1ApplicationsWithBodyWithResponse(ctx context.Context, params *PostApiV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsResponse, error)

	PostApiV1ApplicationsWithResponse(ctx context.Context, params *PostApiV1ApplicationsParams, body PostApiV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsResponse, error)

	// PostApiV1ApplicationsActionNameWithBodyWithResponse request with any body
	PostApiV1ApplicationsActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsActionNameResponse, error)

	PostApiV1ApplicationsActionNameWithResponse(ctx context.Context, name string, body PostApiV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsActionNameResponse, error)

	// DeleteApiV1ApplicationsBulkWithBodyWithResponse request with any body
	DeleteApiV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsBulkResponse, error)

	DeleteApiV1ApplicationsBulkWithResponse(ctx context.Context, body DeleteApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsBulkResponse, error)

	// PutApiV1ApplicationsBulkWithBodyWithResponse request with any body
	PutApiV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsBulkResponse, error)

	PutApiV1ApplicationsBulkWithResponse(ctx context.Context, body PutApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsBulkResponse, error)

	// GetApiV1ApplicationsSchemaWithResponse request
	GetApiV1ApplicationsSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsSchemaResponse, error)

	// PostApiV1ApplicationsTestWithBodyWithResponse request with any body
	PostApiV1ApplicationsTestWithBodyWithResponse(ctx context.Context, params *PostApiV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestResponse, error)

	PostApiV1ApplicationsTestWithResponse(ctx context.Context, params *PostApiV1ApplicationsTestParams, body PostApiV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestResponse, error)

	// PostApiV1ApplicationsTestallWithResponse request
	PostApiV1ApplicationsTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestallResponse, error)

	// DeleteApiV1ApplicationsIdWithResponse request
	DeleteApiV1ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsIdResponse, error)

	// GetApiV1ApplicationsIdWithResponse request
	GetApiV1ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsIdResponse, error)

	// PutApiV1ApplicationsIdWithBodyWithResponse request with any body
	PutApiV1ApplicationsIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsIdResponse, error)

	PutApiV1ApplicationsIdWithResponse(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, body PutApiV1ApplicationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsIdResponse, error)

	// GetApiV1AppprofileWithResponse request
	GetApiV1AppprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileResponse, error)

	// PostApiV1AppprofileWithBodyWithResponse request with any body
	PostApiV1AppprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AppprofileResponse, error)

	PostApiV1AppprofileWithResponse(ctx context.Context, body PostApiV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AppprofileResponse, error)

	// GetApiV1AppprofileSchemaWithResponse request
	GetApiV1AppprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileSchemaResponse, error)

	// DeleteApiV1AppprofileIdWithResponse request
	DeleteApiV1AppprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1AppprofileIdResponse, error)

	// GetApiV1AppprofileIdWithResponse request
	GetApiV1AppprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileIdResponse, error)

	// PutApiV1AppprofileIdWithBodyWithResponse request with any body
	PutApiV1AppprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AppprofileIdResponse, error)

	PutApiV1AppprofileIdWithResponse(ctx context.Context, id string, body PutApiV1AppprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AppprofileIdResponse, error)

	// GetApiV1CommandWithResponse request
	GetApiV1CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CommandResponse, error)

	// PostApiV1CommandWithBodyWithResponse request with any body
	PostApiV1CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommandResponse, error)

	PostApiV1CommandWithResponse(ctx context.Context, body PostApiV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommandResponse, error)

	// DeleteApiV1CommandIdWithResponse request
	DeleteApiV1CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CommandIdResponse, error)

	// GetApiV1CommandIdWithResponse request
	GetApiV1CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CommandIdResponse, error)

	// GetApiV1ConfigDevelopmentWithResponse request
	GetApiV1ConfigDevelopmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDevelopmentResponse, error)

	// GetApiV1ConfigDevelopmentIdWithResponse request
	GetApiV1ConfigDevelopmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDevelopmentIdResponse, error)

	// PutApiV1ConfigDevelopmentIdWithBodyWithResponse request with any body
	PutApiV1ConfigDevelopmentIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDevelopmentIdResponse, error)

	PutApiV1ConfigDevelopmentIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigDevelopmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDevelopmentIdResponse, error)

	// GetApiV1ConfigDownloadclientWithResponse request
	GetApiV1ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDownloadclientResponse, error)

	// GetApiV1ConfigDownloadclientIdWithResponse request
	GetApiV1ConfigDownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDownloadclientIdResponse, error)

	// PutApiV1ConfigDownloadclientIdWithBodyWithResponse request with any body
	PutApiV1ConfigDownloadclientIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDownloadclientIdResponse, error)

	PutApiV1ConfigDownloadclientIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDownloadclientIdResponse, error)

	// GetApiV1ConfigHostWithResponse request
	GetApiV1ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigHostResponse, error)

	// GetApiV1ConfigHostIdWithResponse request
	GetApiV1ConfigHostIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigHostIdResponse, error)

	// PutApiV1ConfigHostIdWithBodyWithResponse request with any body
	PutApiV1ConfigHostIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigHostIdResponse, error)

	PutApiV1ConfigHostIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigHostIdResponse, error)

	// GetApiV1ConfigUiWithResponse request
	GetApiV1ConfigUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigUiResponse, error)

	// GetApiV1ConfigUiIdWithResponse request
	GetApiV1ConfigUiIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigUiIdResponse, error)

	// PutApiV1ConfigUiIdWithBodyWithResponse request with any body
	PutApiV1ConfigUiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigUiIdResponse, error)

	PutApiV1ConfigUiIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigUiIdResponse, error)

	// GetApiV1CustomfilterWithResponse request
	GetApiV1CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CustomfilterResponse, error)

	// PostApiV1CustomfilterWithBodyWithResponse request with any body
	PostApiV1CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustomfilterResponse, error)

	PostApiV1CustomfilterWithResponse(ctx context.Context, body PostApiV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustomfilterResponse, error)

	// DeleteApiV1CustomfilterIdWithResponse request
	DeleteApiV1CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CustomfilterIdResponse, error)

	// GetApiV1CustomfilterIdWithResponse request
	GetApiV1CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CustomfilterIdResponse, error)

	// PutApiV1CustomfilterIdWithBodyWithResponse request with any body
	PutApiV1CustomfilterIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CustomfilterIdResponse, error)

	PutApiV1CustomfilterIdWithResponse(ctx context.Context, id string, body PutApiV1CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CustomfilterIdResponse, error)

	// GetApiV1DownloadclientWithResponse request
	GetApiV1DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientResponse, error)

	// PostApiV1DownloadclientWithBodyWithResponse request with any body
	PostApiV1DownloadclientWithBodyWithResponse(ctx context.Context, params *PostApiV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientResponse, error)

	PostApiV1DownloadclientWithResponse(ctx context.Context, params *PostApiV1DownloadclientParams, body PostApiV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientResponse, error)

	// PostApiV1DownloadclientActionNameWithBodyWithResponse request with any body
	PostApiV1DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientActionNameResponse, error)

	PostApiV1DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostApiV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientActionNameResponse, error)

	// DeleteApiV1DownloadclientBulkWithBodyWithResponse request with any body
	DeleteApiV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientBulkResponse, error)

	DeleteApiV1DownloadclientBulkWithResponse(ctx context.Context, body DeleteApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientBulkResponse, error)

	// PutApiV1DownloadclientBulkWithBodyWithResponse request with any body
	PutApiV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientBulkResponse, error)

	PutApiV1DownloadclientBulkWithResponse(ctx context.Context, body PutApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientBulkResponse, error)

	// GetApiV1DownloadclientSchemaWithResponse request
	GetApiV1DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientSchemaResponse, error)

	// PostApiV1DownloadclientTestWithBodyWithResponse request with any body
	PostApiV1DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostApiV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestResponse, error)

	PostApiV1DownloadclientTestWithResponse(ctx context.Context, params *PostApiV1DownloadclientTestParams, body PostApiV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestResponse, error)

	// PostApiV1DownloadclientTestallWithResponse request
	PostApiV1DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestallResponse, error)

	// DeleteApiV1DownloadclientIdWithResponse request
	DeleteApiV1DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientIdResponse, error)

	// GetApiV1DownloadclientIdWithResponse request
	GetApiV1DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientIdResponse, error)

	// PutApiV1DownloadclientIdWithBodyWithResponse request with any body
	PutApiV1DownloadclientIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientIdResponse, error)

	PutApiV1DownloadclientIdWithResponse(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, body PutApiV1DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientIdResponse, error)

	// GetApiV1FilesystemWithResponse request
	GetApiV1FilesystemWithResponse(ctx context.Context, params *GetApiV1FilesystemParams, reqEditors ...RequestEditorFn) (*GetApiV1FilesystemResponse, error)

	// GetApiV1FilesystemTypeWithResponse request
	GetApiV1FilesystemTypeWithResponse(ctx context.Context, params *GetApiV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetApiV1FilesystemTypeResponse, error)

	// GetApiV1HealthWithResponse request
	GetApiV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error)

	// GetApiV1HistoryWithResponse request
	GetApiV1HistoryWithResponse(ctx context.Context, params *GetApiV1HistoryParams, reqEditors ...RequestEditorFn) (*GetApiV1HistoryResponse, error)

	// GetApiV1HistoryIndexerWithResponse request
	GetApiV1HistoryIndexerWithResponse(ctx context.Context, params *GetApiV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*GetApiV1HistoryIndexerResponse, error)

	// GetApiV1HistorySinceWithResponse request
	GetApiV1HistorySinceWithResponse(ctx context.Context, params *GetApiV1HistorySinceParams, reqEditors ...RequestEditorFn) (*GetApiV1HistorySinceResponse, error)

	// GetApiV1IndexerWithResponse request
	GetApiV1IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerResponse, error)

	// PostApiV1IndexerWithBodyWithResponse request with any body
	PostApiV1IndexerWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerResponse, error)

	PostApiV1IndexerWithResponse(ctx context.Context, params *PostApiV1IndexerParams, body PostApiV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerResponse, error)

	// PostApiV1IndexerActionNameWithBodyWithResponse request with any body
	PostApiV1IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerActionNameResponse, error)

	PostApiV1IndexerActionNameWithResponse(ctx context.Context, name string, body PostApiV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerActionNameResponse, error)

	// DeleteApiV1IndexerBulkWithBodyWithResponse request with any body
	DeleteApiV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerBulkResponse, error)

	DeleteApiV1IndexerBulkWithResponse(ctx context.Context, body DeleteApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerBulkResponse, error)

	// PutApiV1IndexerBulkWithBodyWithResponse request with any body
	PutApiV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerBulkResponse, error)

	PutApiV1IndexerBulkWithResponse(ctx context.Context, body PutApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerBulkResponse, error)

	// GetApiV1IndexerCategoriesWithResponse request
	GetApiV1IndexerCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerCategoriesResponse, error)

	// GetApiV1IndexerSchemaWithResponse request
	GetApiV1IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerSchemaResponse, error)

	// PostApiV1IndexerTestWithBodyWithResponse request with any body
	PostApiV1IndexerTestWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestResponse, error)

	PostApiV1IndexerTestWithResponse(ctx context.Context, params *PostApiV1IndexerTestParams, body PostApiV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestResponse, error)

	// PostApiV1IndexerTestallWithResponse request
	PostApiV1IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestallResponse, error)

	// DeleteApiV1IndexerIdWithResponse request
	DeleteApiV1IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerIdResponse, error)

	// GetApiV1IndexerIdWithResponse request
	GetApiV1IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdResponse, error)

	// PutApiV1IndexerIdWithBodyWithResponse request with any body
	PutApiV1IndexerIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerIdResponse, error)

	PutApiV1IndexerIdWithResponse(ctx context.Context, id string, params *PutApiV1IndexerIdParams, body PutApiV1IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerIdResponse, error)

	// GetApiV1IndexerIdDownloadWithResponse request
	GetApiV1IndexerIdDownloadWithResponse(ctx context.Context, id int32, params *GetApiV1IndexerIdDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdDownloadResponse, error)

	// GetApiV1IndexerIdNewznabWithResponse request
	GetApiV1IndexerIdNewznabWithResponse(ctx context.Context, id int32, params *GetApiV1IndexerIdNewznabParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdNewznabResponse, error)

	// GetApiV1IndexerproxyWithResponse request
	GetApiV1IndexerproxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxyResponse, error)

	// PostApiV1IndexerproxyWithBodyWithResponse request with any body
	PostApiV1IndexerproxyWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyResponse, error)

	PostApiV1IndexerproxyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyParams, body PostApiV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyResponse, error)

	// PostApiV1IndexerproxyActionNameWithBodyWithResponse request with any body
	PostApiV1IndexerproxyActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyActionNameResponse, error)

	PostApiV1IndexerproxyActionNameWithResponse(ctx context.Context, name string, body PostApiV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyActionNameResponse, error)

	// GetApiV1IndexerproxySchemaWithResponse request
	GetApiV1IndexerproxySchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxySchemaResponse, error)

	// PostApiV1IndexerproxyTestWithBodyWithResponse request with any body
	PostApiV1IndexerproxyTestWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestResponse, error)

	PostApiV1IndexerproxyTestWithResponse(ctx context.Context, params *PostApiV1IndexerproxyTestParams, body PostApiV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestResponse, error)

	// PostApiV1IndexerproxyTestallWithResponse request
	PostApiV1IndexerproxyTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestallResponse, error)

	// DeleteApiV1IndexerproxyIdWithResponse request
	DeleteApiV1IndexerproxyIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerproxyIdResponse, error)

	// GetApiV1IndexerproxyIdWithResponse request
	GetApiV1IndexerproxyIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxyIdResponse, error)

	// PutApiV1IndexerproxyIdWithBodyWithResponse request with any body
	PutApiV1IndexerproxyIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerproxyIdResponse, error)

	PutApiV1IndexerproxyIdWithResponse(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, body PutApiV1IndexerproxyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerproxyIdResponse, error)

	// GetApiV1IndexerstatsWithResponse request
	GetApiV1IndexerstatsWithResponse(ctx context.Context, params *GetApiV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerstatsResponse, error)

	// GetApiV1IndexerstatusWithResponse request
	GetApiV1IndexerstatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerstatusResponse, error)

	// GetApiV1LocalizationWithResponse request
	GetApiV1LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LocalizationResponse, error)

	// GetApiV1LocalizationOptionsWithResponse request
	GetApiV1LocalizationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LocalizationOptionsResponse, error)

	// GetApiV1LogWithResponse request
	GetApiV1LogWithResponse(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*GetApiV1LogResponse, error)

	// GetApiV1LogFileWithResponse request
	GetApiV1LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LogFileResponse, error)

	// GetApiV1LogFileUpdateWithResponse request
	GetApiV1LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LogFileUpdateResponse, error)

	// GetApiV1LogFileUpdateFilenameWithResponse request
	GetApiV1LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV1LogFileUpdateFilenameResponse, error)

	// GetApiV1LogFileFilenameWithResponse request
	GetApiV1LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV1LogFileFilenameResponse, error)

	// GetApiV1NotificationWithResponse request
	GetApiV1NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1NotificationResponse, error)

	// PostApiV1NotificationWithBodyWithResponse request with any body
	PostApiV1NotificationWithBodyWithResponse(ctx context.Context, params *PostApiV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationResponse, error)

	PostApiV1NotificationWithResponse(ctx context.Context, params *PostApiV1NotificationParams, body PostApiV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationResponse, error)

	// PostApiV1NotificationActionNameWithBodyWithResponse request with any body
	PostApiV1NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationActionNameResponse, error)

	PostApiV1NotificationActionNameWithResponse(ctx context.Context, name string, body PostApiV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationActionNameResponse, error)

	// GetApiV1NotificationSchemaWithResponse request
	GetApiV1NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1NotificationSchemaResponse, error)

	// PostApiV1NotificationTestWithBodyWithResponse request with any body
	PostApiV1NotificationTestWithBodyWithResponse(ctx context.Context, params *PostApiV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestResponse, error)

	PostApiV1NotificationTestWithResponse(ctx context.Context, params *PostApiV1NotificationTestParams, body PostApiV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestResponse, error)

	// PostApiV1NotificationTestallWithResponse request
	PostApiV1NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestallResponse, error)

	// DeleteApiV1NotificationIdWithResponse request
	DeleteApiV1NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1NotificationIdResponse, error)

	// GetApiV1NotificationIdWithResponse request
	GetApiV1NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1NotificationIdResponse, error)

	// PutApiV1NotificationIdWithBodyWithResponse request with any body
	PutApiV1NotificationIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1NotificationIdResponse, error)

	PutApiV1NotificationIdWithResponse(ctx context.Context, id string, params *PutApiV1NotificationIdParams, body PutApiV1NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1NotificationIdResponse, error)

	// GetApiV1SearchWithResponse request
	GetApiV1SearchWithResponse(ctx context.Context, params *GetApiV1SearchParams, reqEditors ...RequestEditorFn) (*GetApiV1SearchResponse, error)

	// PostApiV1SearchWithBodyWithResponse request with any body
	PostApiV1SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SearchResponse, error)

	PostApiV1SearchWithResponse(ctx context.Context, body PostApiV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SearchResponse, error)

	// PostApiV1SearchBulkWithBodyWithResponse request with any body
	PostApiV1SearchBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SearchBulkResponse, error)

	PostApiV1SearchBulkWithResponse(ctx context.Context, body PostApiV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SearchBulkResponse, error)

	// GetApiV1SystemBackupWithResponse request
	GetApiV1SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemBackupResponse, error)

	// PostApiV1SystemBackupRestoreUploadWithResponse request
	PostApiV1SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemBackupRestoreUploadResponse, error)

	// PostApiV1SystemBackupRestoreIdWithResponse request
	PostApiV1SystemBackupRestoreIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV1SystemBackupRestoreIdResponse, error)

	// DeleteApiV1SystemBackupIdWithResponse request
	DeleteApiV1SystemBackupIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1SystemBackupIdResponse, error)

	// PostApiV1SystemRestartWithResponse request
	PostApiV1SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemRestartResponse, error)

	// GetApiV1SystemRoutesWithResponse request
	GetApiV1SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemRoutesResponse, error)

	// GetApiV1SystemRoutesDuplicateWithResponse request
	GetApiV1SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemRoutesDuplicateResponse, error)

	// PostApiV1SystemShutdownWithResponse request
	PostApiV1SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemShutdownResponse, error)

	// GetApiV1SystemStatusWithResponse request
	GetApiV1SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemStatusResponse, error)

	// GetApiV1SystemTaskWithResponse request
	GetApiV1SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemTaskResponse, error)

	// GetApiV1SystemTaskIdWithResponse request
	GetApiV1SystemTaskIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1SystemTaskIdResponse, error)

	// GetApiV1TagWithResponse request
	GetApiV1TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TagResponse, error)

	// PostApiV1TagWithBodyWithResponse request with any body
	PostApiV1TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TagResponse, error)

	PostApiV1TagWithResponse(ctx context.Context, body PostApiV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TagResponse, error)

	// GetApiV1TagDetailWithResponse request
	GetApiV1TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TagDetailResponse, error)

	// GetApiV1TagDetailIdWithResponse request
	GetApiV1TagDetailIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1TagDetailIdResponse, error)

	// DeleteApiV1TagIdWithResponse request
	DeleteApiV1TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1TagIdResponse, error)

	// GetApiV1TagIdWithResponse request
	GetApiV1TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1TagIdResponse, error)

	// PutApiV1TagIdWithBodyWithResponse request with any body
	PutApiV1TagIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1TagIdResponse, error)

	PutApiV1TagIdWithResponse(ctx context.Context, id string, body PutApiV1TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1TagIdResponse, error)

	// GetApiV1UpdateWithResponse request
	GetApiV1UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UpdateResponse, error)

	// GetContentPathWithResponse request
	GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error)

	// GetLoginWithResponse request
	GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetLogoutWithResponse request
	GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// HeadPingWithResponse request
	HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error)

	// GetIdApiWithResponse request
	GetIdApiWithResponse(ctx context.Context, id int32, params *GetIdApiParams, reqEditors ...RequestEditorFn) (*GetIdApiResponse, error)

	// GetIdDownloadWithResponse request
	GetIdDownloadWithResponse(ctx context.Context, id int32, params *GetIdDownloadParams, reqEditors ...RequestEditorFn) (*GetIdDownloadResponse, error)

	// GetPathWithResponse request
	GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error)
}

type GetApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiInfoResource
}

// Status returns HTTPResponse.Status
func (r GetApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ApplicationsActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1ApplicationsActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ApplicationsActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ApplicationsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ApplicationsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ApplicationsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ApplicationsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ApplicationsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ApplicationsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ApplicationsSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ApplicationsTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1ApplicationsTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ApplicationsTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ApplicationsTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1ApplicationsTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ApplicationsTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AppprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1AppprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AppprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AppprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1AppprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AppprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AppprofileSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1AppprofileSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AppprofileSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AppprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AppprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AppprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AppprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
	JSON404      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetApiV1AppprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AppprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1AppprofileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1AppprofileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1AppprofileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommandResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1CommandIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1CommandIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1CommandIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CommandIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1CommandIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CommandIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigDevelopmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigDevelopmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigDevelopmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigDevelopmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigDevelopmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigDevelopmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ConfigDevelopmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ConfigDevelopmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ConfigDevelopmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigDownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigDownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigDownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigDownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigDownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigDownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ConfigDownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ConfigDownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ConfigDownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigHostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigHostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigHostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ConfigHostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ConfigHostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ConfigHostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigUiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigUiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigUiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ConfigUiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1ConfigUiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ConfigUiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ConfigUiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1ConfigUiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ConfigUiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1CustomfilterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1CustomfilterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1CustomfilterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DownloadclientActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1DownloadclientActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DownloadclientActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DownloadclientSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1DownloadclientSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DownloadclientSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DownloadclientTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1DownloadclientTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DownloadclientTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DownloadclientTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1DownloadclientTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DownloadclientTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1DownloadclientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1DownloadclientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1DownloadclientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1FilesystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1FilesystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1FilesystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1FilesystemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1FilesystemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1FilesystemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HealthResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistoryResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1HistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HistoryIndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1HistoryIndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HistoryIndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HistorySinceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1HistorySinceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HistorySinceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerCategory
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1IndexerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1IndexerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1IndexerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerIdNewznabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerIdNewznabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerIdNewznabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerproxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerproxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerproxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerproxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerproxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerproxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerproxyActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerproxyActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerproxyActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerproxySchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerproxySchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerproxySchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerproxyTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerproxyTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerproxyTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IndexerproxyTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IndexerproxyTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IndexerproxyTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1IndexerproxyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1IndexerproxyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1IndexerproxyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerproxyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerproxyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerproxyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1IndexerproxyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1IndexerproxyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1IndexerproxyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerstatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerStatsResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerstatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerstatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IndexerstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerStatusResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1IndexerstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IndexerstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1LocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LocalizationOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LocalizationOption
}

// Status returns HTTPResponse.Status
func (r GetApiV1LocalizationOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LocalizationOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogFileUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogFileUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogFileUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogFileUpdateFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogFileUpdateFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogFileUpdateFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LogFileFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1LogFileFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LogFileFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1NotificationActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1NotificationActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1NotificationActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1NotificationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1NotificationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1NotificationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1NotificationTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1NotificationTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1NotificationTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1NotificationTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1NotificationTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1NotificationTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1NotificationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1NotificationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1NotificationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReleaseResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SearchBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1SearchBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SearchBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BackupResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SystemBackupRestoreUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SystemBackupRestoreUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SystemBackupRestoreUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SystemBackupRestoreIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SystemBackupRestoreIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SystemBackupRestoreIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1SystemBackupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1SystemBackupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1SystemBackupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SystemRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SystemRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SystemRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemRoutesDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemRoutesDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemRoutesDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SystemShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SystemShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SystemShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaskResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SystemTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1SystemTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SystemTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PostApiV1TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1TagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TagDetailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1TagDetailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TagDetailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1TagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PutApiV1TagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1TagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UpdateResource
}

// Status returns HTTPResponse.Status
func (r GetApiV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContentPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r HeadPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiWithResponse request returning *GetApiResponse
func (c *ClientWithResponses) GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error) {
	rsp, err := c.GetApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResponse(rsp)
}

// GetApiV1ApplicationsWithResponse request returning *GetApiV1ApplicationsResponse
func (c *ClientWithResponses) GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error) {
	rsp, err := c.GetApiV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsResponse(rsp)
}

// PostApiV1ApplicationsWithBodyWithResponse request with arbitrary body returning *PostApiV1ApplicationsResponse
func (c *ClientWithResponses) PostApiV1ApplicationsWithBodyWithResponse(ctx context.Context, params *PostApiV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsResponse, error) {
	rsp, err := c.PostApiV1ApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ApplicationsWithResponse(ctx context.Context, params *PostApiV1ApplicationsParams, body PostApiV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsResponse, error) {
	rsp, err := c.PostApiV1Applications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsResponse(rsp)
}

// PostApiV1ApplicationsActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV1ApplicationsActionNameResponse
func (c *ClientWithResponses) PostApiV1ApplicationsActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsActionNameResponse, error) {
	rsp, err := c.PostApiV1ApplicationsActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ApplicationsActionNameWithResponse(ctx context.Context, name string, body PostApiV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsActionNameResponse, error) {
	rsp, err := c.PostApiV1ApplicationsActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsActionNameResponse(rsp)
}

// DeleteApiV1ApplicationsBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV1ApplicationsBulkResponse
func (c *ClientWithResponses) DeleteApiV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsBulkResponse, error) {
	rsp, err := c.DeleteApiV1ApplicationsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ApplicationsBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV1ApplicationsBulkWithResponse(ctx context.Context, body DeleteApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsBulkResponse, error) {
	rsp, err := c.DeleteApiV1ApplicationsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ApplicationsBulkResponse(rsp)
}

// PutApiV1ApplicationsBulkWithBodyWithResponse request with arbitrary body returning *PutApiV1ApplicationsBulkResponse
func (c *ClientWithResponses) PutApiV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsBulkResponse, error) {
	rsp, err := c.PutApiV1ApplicationsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ApplicationsBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ApplicationsBulkWithResponse(ctx context.Context, body PutApiV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsBulkResponse, error) {
	rsp, err := c.PutApiV1ApplicationsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ApplicationsBulkResponse(rsp)
}

// GetApiV1ApplicationsSchemaWithResponse request returning *GetApiV1ApplicationsSchemaResponse
func (c *ClientWithResponses) GetApiV1ApplicationsSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsSchemaResponse, error) {
	rsp, err := c.GetApiV1ApplicationsSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsSchemaResponse(rsp)
}

// PostApiV1ApplicationsTestWithBodyWithResponse request with arbitrary body returning *PostApiV1ApplicationsTestResponse
func (c *ClientWithResponses) PostApiV1ApplicationsTestWithBodyWithResponse(ctx context.Context, params *PostApiV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestResponse, error) {
	rsp, err := c.PostApiV1ApplicationsTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ApplicationsTestWithResponse(ctx context.Context, params *PostApiV1ApplicationsTestParams, body PostApiV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestResponse, error) {
	rsp, err := c.PostApiV1ApplicationsTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsTestResponse(rsp)
}

// PostApiV1ApplicationsTestallWithResponse request returning *PostApiV1ApplicationsTestallResponse
func (c *ClientWithResponses) PostApiV1ApplicationsTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1ApplicationsTestallResponse, error) {
	rsp, err := c.PostApiV1ApplicationsTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ApplicationsTestallResponse(rsp)
}

// DeleteApiV1ApplicationsIdWithResponse request returning *DeleteApiV1ApplicationsIdResponse
func (c *ClientWithResponses) DeleteApiV1ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1ApplicationsIdResponse, error) {
	rsp, err := c.DeleteApiV1ApplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ApplicationsIdResponse(rsp)
}

// GetApiV1ApplicationsIdWithResponse request returning *GetApiV1ApplicationsIdResponse
func (c *ClientWithResponses) GetApiV1ApplicationsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsIdResponse, error) {
	rsp, err := c.GetApiV1ApplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsIdResponse(rsp)
}

// PutApiV1ApplicationsIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ApplicationsIdResponse
func (c *ClientWithResponses) PutApiV1ApplicationsIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsIdResponse, error) {
	rsp, err := c.PutApiV1ApplicationsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ApplicationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ApplicationsIdWithResponse(ctx context.Context, id string, params *PutApiV1ApplicationsIdParams, body PutApiV1ApplicationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ApplicationsIdResponse, error) {
	rsp, err := c.PutApiV1ApplicationsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ApplicationsIdResponse(rsp)
}

// GetApiV1AppprofileWithResponse request returning *GetApiV1AppprofileResponse
func (c *ClientWithResponses) GetApiV1AppprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileResponse, error) {
	rsp, err := c.GetApiV1Appprofile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AppprofileResponse(rsp)
}

// PostApiV1AppprofileWithBodyWithResponse request with arbitrary body returning *PostApiV1AppprofileResponse
func (c *ClientWithResponses) PostApiV1AppprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AppprofileResponse, error) {
	rsp, err := c.PostApiV1AppprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AppprofileResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AppprofileWithResponse(ctx context.Context, body PostApiV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AppprofileResponse, error) {
	rsp, err := c.PostApiV1Appprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AppprofileResponse(rsp)
}

// GetApiV1AppprofileSchemaWithResponse request returning *GetApiV1AppprofileSchemaResponse
func (c *ClientWithResponses) GetApiV1AppprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileSchemaResponse, error) {
	rsp, err := c.GetApiV1AppprofileSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AppprofileSchemaResponse(rsp)
}

// DeleteApiV1AppprofileIdWithResponse request returning *DeleteApiV1AppprofileIdResponse
func (c *ClientWithResponses) DeleteApiV1AppprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1AppprofileIdResponse, error) {
	rsp, err := c.DeleteApiV1AppprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AppprofileIdResponse(rsp)
}

// GetApiV1AppprofileIdWithResponse request returning *GetApiV1AppprofileIdResponse
func (c *ClientWithResponses) GetApiV1AppprofileIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1AppprofileIdResponse, error) {
	rsp, err := c.GetApiV1AppprofileId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AppprofileIdResponse(rsp)
}

// PutApiV1AppprofileIdWithBodyWithResponse request with arbitrary body returning *PutApiV1AppprofileIdResponse
func (c *ClientWithResponses) PutApiV1AppprofileIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1AppprofileIdResponse, error) {
	rsp, err := c.PutApiV1AppprofileIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AppprofileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1AppprofileIdWithResponse(ctx context.Context, id string, body PutApiV1AppprofileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1AppprofileIdResponse, error) {
	rsp, err := c.PutApiV1AppprofileId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1AppprofileIdResponse(rsp)
}

// GetApiV1CommandWithResponse request returning *GetApiV1CommandResponse
func (c *ClientWithResponses) GetApiV1CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CommandResponse, error) {
	rsp, err := c.GetApiV1Command(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommandResponse(rsp)
}

// PostApiV1CommandWithBodyWithResponse request with arbitrary body returning *PostApiV1CommandResponse
func (c *ClientWithResponses) PostApiV1CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CommandResponse, error) {
	rsp, err := c.PostApiV1CommandWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommandResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CommandWithResponse(ctx context.Context, body PostApiV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CommandResponse, error) {
	rsp, err := c.PostApiV1Command(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CommandResponse(rsp)
}

// DeleteApiV1CommandIdWithResponse request returning *DeleteApiV1CommandIdResponse
func (c *ClientWithResponses) DeleteApiV1CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CommandIdResponse, error) {
	rsp, err := c.DeleteApiV1CommandId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1CommandIdResponse(rsp)
}

// GetApiV1CommandIdWithResponse request returning *GetApiV1CommandIdResponse
func (c *ClientWithResponses) GetApiV1CommandIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CommandIdResponse, error) {
	rsp, err := c.GetApiV1CommandId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CommandIdResponse(rsp)
}

// GetApiV1ConfigDevelopmentWithResponse request returning *GetApiV1ConfigDevelopmentResponse
func (c *ClientWithResponses) GetApiV1ConfigDevelopmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDevelopmentResponse, error) {
	rsp, err := c.GetApiV1ConfigDevelopment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigDevelopmentResponse(rsp)
}

// GetApiV1ConfigDevelopmentIdWithResponse request returning *GetApiV1ConfigDevelopmentIdResponse
func (c *ClientWithResponses) GetApiV1ConfigDevelopmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDevelopmentIdResponse, error) {
	rsp, err := c.GetApiV1ConfigDevelopmentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigDevelopmentIdResponse(rsp)
}

// PutApiV1ConfigDevelopmentIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ConfigDevelopmentIdResponse
func (c *ClientWithResponses) PutApiV1ConfigDevelopmentIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDevelopmentIdResponse, error) {
	rsp, err := c.PutApiV1ConfigDevelopmentIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigDevelopmentIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ConfigDevelopmentIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigDevelopmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDevelopmentIdResponse, error) {
	rsp, err := c.PutApiV1ConfigDevelopmentId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigDevelopmentIdResponse(rsp)
}

// GetApiV1ConfigDownloadclientWithResponse request returning *GetApiV1ConfigDownloadclientResponse
func (c *ClientWithResponses) GetApiV1ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDownloadclientResponse, error) {
	rsp, err := c.GetApiV1ConfigDownloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigDownloadclientResponse(rsp)
}

// GetApiV1ConfigDownloadclientIdWithResponse request returning *GetApiV1ConfigDownloadclientIdResponse
func (c *ClientWithResponses) GetApiV1ConfigDownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigDownloadclientIdResponse, error) {
	rsp, err := c.GetApiV1ConfigDownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigDownloadclientIdResponse(rsp)
}

// PutApiV1ConfigDownloadclientIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ConfigDownloadclientIdResponse
func (c *ClientWithResponses) PutApiV1ConfigDownloadclientIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDownloadclientIdResponse, error) {
	rsp, err := c.PutApiV1ConfigDownloadclientIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigDownloadclientIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ConfigDownloadclientIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigDownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigDownloadclientIdResponse, error) {
	rsp, err := c.PutApiV1ConfigDownloadclientId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigDownloadclientIdResponse(rsp)
}

// GetApiV1ConfigHostWithResponse request returning *GetApiV1ConfigHostResponse
func (c *ClientWithResponses) GetApiV1ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigHostResponse, error) {
	rsp, err := c.GetApiV1ConfigHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigHostResponse(rsp)
}

// GetApiV1ConfigHostIdWithResponse request returning *GetApiV1ConfigHostIdResponse
func (c *ClientWithResponses) GetApiV1ConfigHostIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigHostIdResponse, error) {
	rsp, err := c.GetApiV1ConfigHostId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigHostIdResponse(rsp)
}

// PutApiV1ConfigHostIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ConfigHostIdResponse
func (c *ClientWithResponses) PutApiV1ConfigHostIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigHostIdResponse, error) {
	rsp, err := c.PutApiV1ConfigHostIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigHostIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ConfigHostIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigHostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigHostIdResponse, error) {
	rsp, err := c.PutApiV1ConfigHostId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigHostIdResponse(rsp)
}

// GetApiV1ConfigUiWithResponse request returning *GetApiV1ConfigUiResponse
func (c *ClientWithResponses) GetApiV1ConfigUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ConfigUiResponse, error) {
	rsp, err := c.GetApiV1ConfigUi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigUiResponse(rsp)
}

// GetApiV1ConfigUiIdWithResponse request returning *GetApiV1ConfigUiIdResponse
func (c *ClientWithResponses) GetApiV1ConfigUiIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1ConfigUiIdResponse, error) {
	rsp, err := c.GetApiV1ConfigUiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ConfigUiIdResponse(rsp)
}

// PutApiV1ConfigUiIdWithBodyWithResponse request with arbitrary body returning *PutApiV1ConfigUiIdResponse
func (c *ClientWithResponses) PutApiV1ConfigUiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ConfigUiIdResponse, error) {
	rsp, err := c.PutApiV1ConfigUiIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigUiIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ConfigUiIdWithResponse(ctx context.Context, id string, body PutApiV1ConfigUiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ConfigUiIdResponse, error) {
	rsp, err := c.PutApiV1ConfigUiId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ConfigUiIdResponse(rsp)
}

// GetApiV1CustomfilterWithResponse request returning *GetApiV1CustomfilterResponse
func (c *ClientWithResponses) GetApiV1CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CustomfilterResponse, error) {
	rsp, err := c.GetApiV1Customfilter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CustomfilterResponse(rsp)
}

// PostApiV1CustomfilterWithBodyWithResponse request with arbitrary body returning *PostApiV1CustomfilterResponse
func (c *ClientWithResponses) PostApiV1CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1CustomfilterResponse, error) {
	rsp, err := c.PostApiV1CustomfilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustomfilterResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1CustomfilterWithResponse(ctx context.Context, body PostApiV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1CustomfilterResponse, error) {
	rsp, err := c.PostApiV1Customfilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1CustomfilterResponse(rsp)
}

// DeleteApiV1CustomfilterIdWithResponse request returning *DeleteApiV1CustomfilterIdResponse
func (c *ClientWithResponses) DeleteApiV1CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1CustomfilterIdResponse, error) {
	rsp, err := c.DeleteApiV1CustomfilterId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1CustomfilterIdResponse(rsp)
}

// GetApiV1CustomfilterIdWithResponse request returning *GetApiV1CustomfilterIdResponse
func (c *ClientWithResponses) GetApiV1CustomfilterIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1CustomfilterIdResponse, error) {
	rsp, err := c.GetApiV1CustomfilterId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CustomfilterIdResponse(rsp)
}

// PutApiV1CustomfilterIdWithBodyWithResponse request with arbitrary body returning *PutApiV1CustomfilterIdResponse
func (c *ClientWithResponses) PutApiV1CustomfilterIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1CustomfilterIdResponse, error) {
	rsp, err := c.PutApiV1CustomfilterIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CustomfilterIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1CustomfilterIdWithResponse(ctx context.Context, id string, body PutApiV1CustomfilterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1CustomfilterIdResponse, error) {
	rsp, err := c.PutApiV1CustomfilterId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1CustomfilterIdResponse(rsp)
}

// GetApiV1DownloadclientWithResponse request returning *GetApiV1DownloadclientResponse
func (c *ClientWithResponses) GetApiV1DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientResponse, error) {
	rsp, err := c.GetApiV1Downloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DownloadclientResponse(rsp)
}

// PostApiV1DownloadclientWithBodyWithResponse request with arbitrary body returning *PostApiV1DownloadclientResponse
func (c *ClientWithResponses) PostApiV1DownloadclientWithBodyWithResponse(ctx context.Context, params *PostApiV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientResponse, error) {
	rsp, err := c.PostApiV1DownloadclientWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DownloadclientWithResponse(ctx context.Context, params *PostApiV1DownloadclientParams, body PostApiV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientResponse, error) {
	rsp, err := c.PostApiV1Downloadclient(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientResponse(rsp)
}

// PostApiV1DownloadclientActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV1DownloadclientActionNameResponse
func (c *ClientWithResponses) PostApiV1DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientActionNameResponse, error) {
	rsp, err := c.PostApiV1DownloadclientActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostApiV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientActionNameResponse, error) {
	rsp, err := c.PostApiV1DownloadclientActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientActionNameResponse(rsp)
}

// DeleteApiV1DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV1DownloadclientBulkResponse
func (c *ClientWithResponses) DeleteApiV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteApiV1DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV1DownloadclientBulkWithResponse(ctx context.Context, body DeleteApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteApiV1DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DownloadclientBulkResponse(rsp)
}

// PutApiV1DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *PutApiV1DownloadclientBulkResponse
func (c *ClientWithResponses) PutApiV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientBulkResponse, error) {
	rsp, err := c.PutApiV1DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DownloadclientBulkWithResponse(ctx context.Context, body PutApiV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientBulkResponse, error) {
	rsp, err := c.PutApiV1DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DownloadclientBulkResponse(rsp)
}

// GetApiV1DownloadclientSchemaWithResponse request returning *GetApiV1DownloadclientSchemaResponse
func (c *ClientWithResponses) GetApiV1DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientSchemaResponse, error) {
	rsp, err := c.GetApiV1DownloadclientSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DownloadclientSchemaResponse(rsp)
}

// PostApiV1DownloadclientTestWithBodyWithResponse request with arbitrary body returning *PostApiV1DownloadclientTestResponse
func (c *ClientWithResponses) PostApiV1DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostApiV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestResponse, error) {
	rsp, err := c.PostApiV1DownloadclientTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DownloadclientTestWithResponse(ctx context.Context, params *PostApiV1DownloadclientTestParams, body PostApiV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestResponse, error) {
	rsp, err := c.PostApiV1DownloadclientTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientTestResponse(rsp)
}

// PostApiV1DownloadclientTestallWithResponse request returning *PostApiV1DownloadclientTestallResponse
func (c *ClientWithResponses) PostApiV1DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1DownloadclientTestallResponse, error) {
	rsp, err := c.PostApiV1DownloadclientTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DownloadclientTestallResponse(rsp)
}

// DeleteApiV1DownloadclientIdWithResponse request returning *DeleteApiV1DownloadclientIdResponse
func (c *ClientWithResponses) DeleteApiV1DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1DownloadclientIdResponse, error) {
	rsp, err := c.DeleteApiV1DownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1DownloadclientIdResponse(rsp)
}

// GetApiV1DownloadclientIdWithResponse request returning *GetApiV1DownloadclientIdResponse
func (c *ClientWithResponses) GetApiV1DownloadclientIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1DownloadclientIdResponse, error) {
	rsp, err := c.GetApiV1DownloadclientId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DownloadclientIdResponse(rsp)
}

// PutApiV1DownloadclientIdWithBodyWithResponse request with arbitrary body returning *PutApiV1DownloadclientIdResponse
func (c *ClientWithResponses) PutApiV1DownloadclientIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientIdResponse, error) {
	rsp, err := c.PutApiV1DownloadclientIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DownloadclientIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1DownloadclientIdWithResponse(ctx context.Context, id string, params *PutApiV1DownloadclientIdParams, body PutApiV1DownloadclientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1DownloadclientIdResponse, error) {
	rsp, err := c.PutApiV1DownloadclientId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1DownloadclientIdResponse(rsp)
}

// GetApiV1FilesystemWithResponse request returning *GetApiV1FilesystemResponse
func (c *ClientWithResponses) GetApiV1FilesystemWithResponse(ctx context.Context, params *GetApiV1FilesystemParams, reqEditors ...RequestEditorFn) (*GetApiV1FilesystemResponse, error) {
	rsp, err := c.GetApiV1Filesystem(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1FilesystemResponse(rsp)
}

// GetApiV1FilesystemTypeWithResponse request returning *GetApiV1FilesystemTypeResponse
func (c *ClientWithResponses) GetApiV1FilesystemTypeWithResponse(ctx context.Context, params *GetApiV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetApiV1FilesystemTypeResponse, error) {
	rsp, err := c.GetApiV1FilesystemType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1FilesystemTypeResponse(rsp)
}

// GetApiV1HealthWithResponse request returning *GetApiV1HealthResponse
func (c *ClientWithResponses) GetApiV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1HealthResponse, error) {
	rsp, err := c.GetApiV1Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HealthResponse(rsp)
}

// GetApiV1HistoryWithResponse request returning *GetApiV1HistoryResponse
func (c *ClientWithResponses) GetApiV1HistoryWithResponse(ctx context.Context, params *GetApiV1HistoryParams, reqEditors ...RequestEditorFn) (*GetApiV1HistoryResponse, error) {
	rsp, err := c.GetApiV1History(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HistoryResponse(rsp)
}

// GetApiV1HistoryIndexerWithResponse request returning *GetApiV1HistoryIndexerResponse
func (c *ClientWithResponses) GetApiV1HistoryIndexerWithResponse(ctx context.Context, params *GetApiV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*GetApiV1HistoryIndexerResponse, error) {
	rsp, err := c.GetApiV1HistoryIndexer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HistoryIndexerResponse(rsp)
}

// GetApiV1HistorySinceWithResponse request returning *GetApiV1HistorySinceResponse
func (c *ClientWithResponses) GetApiV1HistorySinceWithResponse(ctx context.Context, params *GetApiV1HistorySinceParams, reqEditors ...RequestEditorFn) (*GetApiV1HistorySinceResponse, error) {
	rsp, err := c.GetApiV1HistorySince(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HistorySinceResponse(rsp)
}

// GetApiV1IndexerWithResponse request returning *GetApiV1IndexerResponse
func (c *ClientWithResponses) GetApiV1IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerResponse, error) {
	rsp, err := c.GetApiV1Indexer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerResponse(rsp)
}

// PostApiV1IndexerWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerResponse
func (c *ClientWithResponses) PostApiV1IndexerWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerResponse, error) {
	rsp, err := c.PostApiV1IndexerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerWithResponse(ctx context.Context, params *PostApiV1IndexerParams, body PostApiV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerResponse, error) {
	rsp, err := c.PostApiV1Indexer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerResponse(rsp)
}

// PostApiV1IndexerActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerActionNameResponse
func (c *ClientWithResponses) PostApiV1IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerActionNameResponse, error) {
	rsp, err := c.PostApiV1IndexerActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerActionNameWithResponse(ctx context.Context, name string, body PostApiV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerActionNameResponse, error) {
	rsp, err := c.PostApiV1IndexerActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerActionNameResponse(rsp)
}

// DeleteApiV1IndexerBulkWithBodyWithResponse request with arbitrary body returning *DeleteApiV1IndexerBulkResponse
func (c *ClientWithResponses) DeleteApiV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerBulkResponse, error) {
	rsp, err := c.DeleteApiV1IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV1IndexerBulkWithResponse(ctx context.Context, body DeleteApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerBulkResponse, error) {
	rsp, err := c.DeleteApiV1IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IndexerBulkResponse(rsp)
}

// PutApiV1IndexerBulkWithBodyWithResponse request with arbitrary body returning *PutApiV1IndexerBulkResponse
func (c *ClientWithResponses) PutApiV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerBulkResponse, error) {
	rsp, err := c.PutApiV1IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1IndexerBulkWithResponse(ctx context.Context, body PutApiV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerBulkResponse, error) {
	rsp, err := c.PutApiV1IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerBulkResponse(rsp)
}

// GetApiV1IndexerCategoriesWithResponse request returning *GetApiV1IndexerCategoriesResponse
func (c *ClientWithResponses) GetApiV1IndexerCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerCategoriesResponse, error) {
	rsp, err := c.GetApiV1IndexerCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerCategoriesResponse(rsp)
}

// GetApiV1IndexerSchemaWithResponse request returning *GetApiV1IndexerSchemaResponse
func (c *ClientWithResponses) GetApiV1IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerSchemaResponse, error) {
	rsp, err := c.GetApiV1IndexerSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerSchemaResponse(rsp)
}

// PostApiV1IndexerTestWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerTestResponse
func (c *ClientWithResponses) PostApiV1IndexerTestWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestResponse, error) {
	rsp, err := c.PostApiV1IndexerTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerTestWithResponse(ctx context.Context, params *PostApiV1IndexerTestParams, body PostApiV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestResponse, error) {
	rsp, err := c.PostApiV1IndexerTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerTestResponse(rsp)
}

// PostApiV1IndexerTestallWithResponse request returning *PostApiV1IndexerTestallResponse
func (c *ClientWithResponses) PostApiV1IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1IndexerTestallResponse, error) {
	rsp, err := c.PostApiV1IndexerTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerTestallResponse(rsp)
}

// DeleteApiV1IndexerIdWithResponse request returning *DeleteApiV1IndexerIdResponse
func (c *ClientWithResponses) DeleteApiV1IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerIdResponse, error) {
	rsp, err := c.DeleteApiV1IndexerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IndexerIdResponse(rsp)
}

// GetApiV1IndexerIdWithResponse request returning *GetApiV1IndexerIdResponse
func (c *ClientWithResponses) GetApiV1IndexerIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdResponse, error) {
	rsp, err := c.GetApiV1IndexerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerIdResponse(rsp)
}

// PutApiV1IndexerIdWithBodyWithResponse request with arbitrary body returning *PutApiV1IndexerIdResponse
func (c *ClientWithResponses) PutApiV1IndexerIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1IndexerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerIdResponse, error) {
	rsp, err := c.PutApiV1IndexerIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1IndexerIdWithResponse(ctx context.Context, id string, params *PutApiV1IndexerIdParams, body PutApiV1IndexerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerIdResponse, error) {
	rsp, err := c.PutApiV1IndexerId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerIdResponse(rsp)
}

// GetApiV1IndexerIdDownloadWithResponse request returning *GetApiV1IndexerIdDownloadResponse
func (c *ClientWithResponses) GetApiV1IndexerIdDownloadWithResponse(ctx context.Context, id int32, params *GetApiV1IndexerIdDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdDownloadResponse, error) {
	rsp, err := c.GetApiV1IndexerIdDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerIdDownloadResponse(rsp)
}

// GetApiV1IndexerIdNewznabWithResponse request returning *GetApiV1IndexerIdNewznabResponse
func (c *ClientWithResponses) GetApiV1IndexerIdNewznabWithResponse(ctx context.Context, id int32, params *GetApiV1IndexerIdNewznabParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerIdNewznabResponse, error) {
	rsp, err := c.GetApiV1IndexerIdNewznab(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerIdNewznabResponse(rsp)
}

// GetApiV1IndexerproxyWithResponse request returning *GetApiV1IndexerproxyResponse
func (c *ClientWithResponses) GetApiV1IndexerproxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxyResponse, error) {
	rsp, err := c.GetApiV1Indexerproxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerproxyResponse(rsp)
}

// PostApiV1IndexerproxyWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerproxyResponse
func (c *ClientWithResponses) PostApiV1IndexerproxyWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerproxyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyParams, body PostApiV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyResponse, error) {
	rsp, err := c.PostApiV1Indexerproxy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyResponse(rsp)
}

// PostApiV1IndexerproxyActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerproxyActionNameResponse
func (c *ClientWithResponses) PostApiV1IndexerproxyActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyActionNameResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerproxyActionNameWithResponse(ctx context.Context, name string, body PostApiV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyActionNameResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyActionNameResponse(rsp)
}

// GetApiV1IndexerproxySchemaWithResponse request returning *GetApiV1IndexerproxySchemaResponse
func (c *ClientWithResponses) GetApiV1IndexerproxySchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxySchemaResponse, error) {
	rsp, err := c.GetApiV1IndexerproxySchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerproxySchemaResponse(rsp)
}

// PostApiV1IndexerproxyTestWithBodyWithResponse request with arbitrary body returning *PostApiV1IndexerproxyTestResponse
func (c *ClientWithResponses) PostApiV1IndexerproxyTestWithBodyWithResponse(ctx context.Context, params *PostApiV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IndexerproxyTestWithResponse(ctx context.Context, params *PostApiV1IndexerproxyTestParams, body PostApiV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyTestResponse(rsp)
}

// PostApiV1IndexerproxyTestallWithResponse request returning *PostApiV1IndexerproxyTestallResponse
func (c *ClientWithResponses) PostApiV1IndexerproxyTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1IndexerproxyTestallResponse, error) {
	rsp, err := c.PostApiV1IndexerproxyTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IndexerproxyTestallResponse(rsp)
}

// DeleteApiV1IndexerproxyIdWithResponse request returning *DeleteApiV1IndexerproxyIdResponse
func (c *ClientWithResponses) DeleteApiV1IndexerproxyIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1IndexerproxyIdResponse, error) {
	rsp, err := c.DeleteApiV1IndexerproxyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IndexerproxyIdResponse(rsp)
}

// GetApiV1IndexerproxyIdWithResponse request returning *GetApiV1IndexerproxyIdResponse
func (c *ClientWithResponses) GetApiV1IndexerproxyIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1IndexerproxyIdResponse, error) {
	rsp, err := c.GetApiV1IndexerproxyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerproxyIdResponse(rsp)
}

// PutApiV1IndexerproxyIdWithBodyWithResponse request with arbitrary body returning *PutApiV1IndexerproxyIdResponse
func (c *ClientWithResponses) PutApiV1IndexerproxyIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1IndexerproxyIdResponse, error) {
	rsp, err := c.PutApiV1IndexerproxyIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerproxyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1IndexerproxyIdWithResponse(ctx context.Context, id string, params *PutApiV1IndexerproxyIdParams, body PutApiV1IndexerproxyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1IndexerproxyIdResponse, error) {
	rsp, err := c.PutApiV1IndexerproxyId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1IndexerproxyIdResponse(rsp)
}

// GetApiV1IndexerstatsWithResponse request returning *GetApiV1IndexerstatsResponse
func (c *ClientWithResponses) GetApiV1IndexerstatsWithResponse(ctx context.Context, params *GetApiV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*GetApiV1IndexerstatsResponse, error) {
	rsp, err := c.GetApiV1Indexerstats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerstatsResponse(rsp)
}

// GetApiV1IndexerstatusWithResponse request returning *GetApiV1IndexerstatusResponse
func (c *ClientWithResponses) GetApiV1IndexerstatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IndexerstatusResponse, error) {
	rsp, err := c.GetApiV1Indexerstatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IndexerstatusResponse(rsp)
}

// GetApiV1LocalizationWithResponse request returning *GetApiV1LocalizationResponse
func (c *ClientWithResponses) GetApiV1LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LocalizationResponse, error) {
	rsp, err := c.GetApiV1Localization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LocalizationResponse(rsp)
}

// GetApiV1LocalizationOptionsWithResponse request returning *GetApiV1LocalizationOptionsResponse
func (c *ClientWithResponses) GetApiV1LocalizationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LocalizationOptionsResponse, error) {
	rsp, err := c.GetApiV1LocalizationOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LocalizationOptionsResponse(rsp)
}

// GetApiV1LogWithResponse request returning *GetApiV1LogResponse
func (c *ClientWithResponses) GetApiV1LogWithResponse(ctx context.Context, params *GetApiV1LogParams, reqEditors ...RequestEditorFn) (*GetApiV1LogResponse, error) {
	rsp, err := c.GetApiV1Log(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogResponse(rsp)
}

// GetApiV1LogFileWithResponse request returning *GetApiV1LogFileResponse
func (c *ClientWithResponses) GetApiV1LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LogFileResponse, error) {
	rsp, err := c.GetApiV1LogFile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogFileResponse(rsp)
}

// GetApiV1LogFileUpdateWithResponse request returning *GetApiV1LogFileUpdateResponse
func (c *ClientWithResponses) GetApiV1LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1LogFileUpdateResponse, error) {
	rsp, err := c.GetApiV1LogFileUpdate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogFileUpdateResponse(rsp)
}

// GetApiV1LogFileUpdateFilenameWithResponse request returning *GetApiV1LogFileUpdateFilenameResponse
func (c *ClientWithResponses) GetApiV1LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV1LogFileUpdateFilenameResponse, error) {
	rsp, err := c.GetApiV1LogFileUpdateFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogFileUpdateFilenameResponse(rsp)
}

// GetApiV1LogFileFilenameWithResponse request returning *GetApiV1LogFileFilenameResponse
func (c *ClientWithResponses) GetApiV1LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetApiV1LogFileFilenameResponse, error) {
	rsp, err := c.GetApiV1LogFileFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LogFileFilenameResponse(rsp)
}

// GetApiV1NotificationWithResponse request returning *GetApiV1NotificationResponse
func (c *ClientWithResponses) GetApiV1NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1NotificationResponse, error) {
	rsp, err := c.GetApiV1Notification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1NotificationResponse(rsp)
}

// PostApiV1NotificationWithBodyWithResponse request with arbitrary body returning *PostApiV1NotificationResponse
func (c *ClientWithResponses) PostApiV1NotificationWithBodyWithResponse(ctx context.Context, params *PostApiV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationResponse, error) {
	rsp, err := c.PostApiV1NotificationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1NotificationWithResponse(ctx context.Context, params *PostApiV1NotificationParams, body PostApiV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationResponse, error) {
	rsp, err := c.PostApiV1Notification(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationResponse(rsp)
}

// PostApiV1NotificationActionNameWithBodyWithResponse request with arbitrary body returning *PostApiV1NotificationActionNameResponse
func (c *ClientWithResponses) PostApiV1NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationActionNameResponse, error) {
	rsp, err := c.PostApiV1NotificationActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1NotificationActionNameWithResponse(ctx context.Context, name string, body PostApiV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationActionNameResponse, error) {
	rsp, err := c.PostApiV1NotificationActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationActionNameResponse(rsp)
}

// GetApiV1NotificationSchemaWithResponse request returning *GetApiV1NotificationSchemaResponse
func (c *ClientWithResponses) GetApiV1NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1NotificationSchemaResponse, error) {
	rsp, err := c.GetApiV1NotificationSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1NotificationSchemaResponse(rsp)
}

// PostApiV1NotificationTestWithBodyWithResponse request with arbitrary body returning *PostApiV1NotificationTestResponse
func (c *ClientWithResponses) PostApiV1NotificationTestWithBodyWithResponse(ctx context.Context, params *PostApiV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestResponse, error) {
	rsp, err := c.PostApiV1NotificationTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1NotificationTestWithResponse(ctx context.Context, params *PostApiV1NotificationTestParams, body PostApiV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestResponse, error) {
	rsp, err := c.PostApiV1NotificationTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationTestResponse(rsp)
}

// PostApiV1NotificationTestallWithResponse request returning *PostApiV1NotificationTestallResponse
func (c *ClientWithResponses) PostApiV1NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1NotificationTestallResponse, error) {
	rsp, err := c.PostApiV1NotificationTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1NotificationTestallResponse(rsp)
}

// DeleteApiV1NotificationIdWithResponse request returning *DeleteApiV1NotificationIdResponse
func (c *ClientWithResponses) DeleteApiV1NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1NotificationIdResponse, error) {
	rsp, err := c.DeleteApiV1NotificationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1NotificationIdResponse(rsp)
}

// GetApiV1NotificationIdWithResponse request returning *GetApiV1NotificationIdResponse
func (c *ClientWithResponses) GetApiV1NotificationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1NotificationIdResponse, error) {
	rsp, err := c.GetApiV1NotificationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1NotificationIdResponse(rsp)
}

// PutApiV1NotificationIdWithBodyWithResponse request with arbitrary body returning *PutApiV1NotificationIdResponse
func (c *ClientWithResponses) PutApiV1NotificationIdWithBodyWithResponse(ctx context.Context, id string, params *PutApiV1NotificationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1NotificationIdResponse, error) {
	rsp, err := c.PutApiV1NotificationIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1NotificationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1NotificationIdWithResponse(ctx context.Context, id string, params *PutApiV1NotificationIdParams, body PutApiV1NotificationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1NotificationIdResponse, error) {
	rsp, err := c.PutApiV1NotificationId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1NotificationIdResponse(rsp)
}

// GetApiV1SearchWithResponse request returning *GetApiV1SearchResponse
func (c *ClientWithResponses) GetApiV1SearchWithResponse(ctx context.Context, params *GetApiV1SearchParams, reqEditors ...RequestEditorFn) (*GetApiV1SearchResponse, error) {
	rsp, err := c.GetApiV1Search(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SearchResponse(rsp)
}

// PostApiV1SearchWithBodyWithResponse request with arbitrary body returning *PostApiV1SearchResponse
func (c *ClientWithResponses) PostApiV1SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SearchResponse, error) {
	rsp, err := c.PostApiV1SearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SearchResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SearchWithResponse(ctx context.Context, body PostApiV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SearchResponse, error) {
	rsp, err := c.PostApiV1Search(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SearchResponse(rsp)
}

// PostApiV1SearchBulkWithBodyWithResponse request with arbitrary body returning *PostApiV1SearchBulkResponse
func (c *ClientWithResponses) PostApiV1SearchBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SearchBulkResponse, error) {
	rsp, err := c.PostApiV1SearchBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SearchBulkResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SearchBulkWithResponse(ctx context.Context, body PostApiV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SearchBulkResponse, error) {
	rsp, err := c.PostApiV1SearchBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SearchBulkResponse(rsp)
}

// GetApiV1SystemBackupWithResponse request returning *GetApiV1SystemBackupResponse
func (c *ClientWithResponses) GetApiV1SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemBackupResponse, error) {
	rsp, err := c.GetApiV1SystemBackup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemBackupResponse(rsp)
}

// PostApiV1SystemBackupRestoreUploadWithResponse request returning *PostApiV1SystemBackupRestoreUploadResponse
func (c *ClientWithResponses) PostApiV1SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemBackupRestoreUploadResponse, error) {
	rsp, err := c.PostApiV1SystemBackupRestoreUpload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SystemBackupRestoreUploadResponse(rsp)
}

// PostApiV1SystemBackupRestoreIdWithResponse request returning *PostApiV1SystemBackupRestoreIdResponse
func (c *ClientWithResponses) PostApiV1SystemBackupRestoreIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV1SystemBackupRestoreIdResponse, error) {
	rsp, err := c.PostApiV1SystemBackupRestoreId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SystemBackupRestoreIdResponse(rsp)
}

// DeleteApiV1SystemBackupIdWithResponse request returning *DeleteApiV1SystemBackupIdResponse
func (c *ClientWithResponses) DeleteApiV1SystemBackupIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1SystemBackupIdResponse, error) {
	rsp, err := c.DeleteApiV1SystemBackupId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1SystemBackupIdResponse(rsp)
}

// PostApiV1SystemRestartWithResponse request returning *PostApiV1SystemRestartResponse
func (c *ClientWithResponses) PostApiV1SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemRestartResponse, error) {
	rsp, err := c.PostApiV1SystemRestart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SystemRestartResponse(rsp)
}

// GetApiV1SystemRoutesWithResponse request returning *GetApiV1SystemRoutesResponse
func (c *ClientWithResponses) GetApiV1SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemRoutesResponse, error) {
	rsp, err := c.GetApiV1SystemRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemRoutesResponse(rsp)
}

// GetApiV1SystemRoutesDuplicateWithResponse request returning *GetApiV1SystemRoutesDuplicateResponse
func (c *ClientWithResponses) GetApiV1SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemRoutesDuplicateResponse, error) {
	rsp, err := c.GetApiV1SystemRoutesDuplicate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemRoutesDuplicateResponse(rsp)
}

// PostApiV1SystemShutdownWithResponse request returning *PostApiV1SystemShutdownResponse
func (c *ClientWithResponses) PostApiV1SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1SystemShutdownResponse, error) {
	rsp, err := c.PostApiV1SystemShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SystemShutdownResponse(rsp)
}

// GetApiV1SystemStatusWithResponse request returning *GetApiV1SystemStatusResponse
func (c *ClientWithResponses) GetApiV1SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemStatusResponse, error) {
	rsp, err := c.GetApiV1SystemStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemStatusResponse(rsp)
}

// GetApiV1SystemTaskWithResponse request returning *GetApiV1SystemTaskResponse
func (c *ClientWithResponses) GetApiV1SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SystemTaskResponse, error) {
	rsp, err := c.GetApiV1SystemTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemTaskResponse(rsp)
}

// GetApiV1SystemTaskIdWithResponse request returning *GetApiV1SystemTaskIdResponse
func (c *ClientWithResponses) GetApiV1SystemTaskIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1SystemTaskIdResponse, error) {
	rsp, err := c.GetApiV1SystemTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SystemTaskIdResponse(rsp)
}

// GetApiV1TagWithResponse request returning *GetApiV1TagResponse
func (c *ClientWithResponses) GetApiV1TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TagResponse, error) {
	rsp, err := c.GetApiV1Tag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TagResponse(rsp)
}

// PostApiV1TagWithBodyWithResponse request with arbitrary body returning *PostApiV1TagResponse
func (c *ClientWithResponses) PostApiV1TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TagResponse, error) {
	rsp, err := c.PostApiV1TagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TagResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1TagWithResponse(ctx context.Context, body PostApiV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TagResponse, error) {
	rsp, err := c.PostApiV1Tag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TagResponse(rsp)
}

// GetApiV1TagDetailWithResponse request returning *GetApiV1TagDetailResponse
func (c *ClientWithResponses) GetApiV1TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TagDetailResponse, error) {
	rsp, err := c.GetApiV1TagDetail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TagDetailResponse(rsp)
}

// GetApiV1TagDetailIdWithResponse request returning *GetApiV1TagDetailIdResponse
func (c *ClientWithResponses) GetApiV1TagDetailIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1TagDetailIdResponse, error) {
	rsp, err := c.GetApiV1TagDetailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TagDetailIdResponse(rsp)
}

// DeleteApiV1TagIdWithResponse request returning *DeleteApiV1TagIdResponse
func (c *ClientWithResponses) DeleteApiV1TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApiV1TagIdResponse, error) {
	rsp, err := c.DeleteApiV1TagId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1TagIdResponse(rsp)
}

// GetApiV1TagIdWithResponse request returning *GetApiV1TagIdResponse
func (c *ClientWithResponses) GetApiV1TagIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV1TagIdResponse, error) {
	rsp, err := c.GetApiV1TagId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TagIdResponse(rsp)
}

// PutApiV1TagIdWithBodyWithResponse request with arbitrary body returning *PutApiV1TagIdResponse
func (c *ClientWithResponses) PutApiV1TagIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1TagIdResponse, error) {
	rsp, err := c.PutApiV1TagIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1TagIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1TagIdWithResponse(ctx context.Context, id string, body PutApiV1TagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1TagIdResponse, error) {
	rsp, err := c.PutApiV1TagId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1TagIdResponse(rsp)
}

// GetApiV1UpdateWithResponse request returning *GetApiV1UpdateResponse
func (c *ClientWithResponses) GetApiV1UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UpdateResponse, error) {
	rsp, err := c.GetApiV1Update(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UpdateResponse(rsp)
}

// GetContentPathWithResponse request returning *GetContentPathResponse
func (c *ClientWithResponses) GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error) {
	rsp, err := c.GetContentPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentPathResponse(rsp)
}

// GetLoginWithResponse request returning *GetLoginResponse
func (c *ClientWithResponses) GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error) {
	rsp, err := c.GetLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetLogoutWithResponse request returning *GetLogoutResponse
func (c *ClientWithResponses) GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error) {
	rsp, err := c.GetLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogoutResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// HeadPingWithResponse request returning *HeadPingResponse
func (c *ClientWithResponses) HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error) {
	rsp, err := c.HeadPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadPingResponse(rsp)
}

// GetIdApiWithResponse request returning *GetIdApiResponse
func (c *ClientWithResponses) GetIdApiWithResponse(ctx context.Context, id int32, params *GetIdApiParams, reqEditors ...RequestEditorFn) (*GetIdApiResponse, error) {
	rsp, err := c.GetIdApi(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdApiResponse(rsp)
}

// GetIdDownloadWithResponse request returning *GetIdDownloadResponse
func (c *ClientWithResponses) GetIdDownloadWithResponse(ctx context.Context, id int32, params *GetIdDownloadParams, reqEditors ...RequestEditorFn) (*GetIdDownloadResponse, error) {
	rsp, err := c.GetIdDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdDownloadResponse(rsp)
}

// GetPathWithResponse request returning *GetPathResponse
func (c *ClientWithResponses) GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error) {
	rsp, err := c.GetPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPathResponse(rsp)
}

// ParseGetApiResponse parses an HTTP response from a GetApiWithResponse call
func ParseGetApiResponse(rsp *http.Response) (*GetApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiInfoResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ApplicationsResponse parses an HTTP response from a GetApiV1ApplicationsWithResponse call
func ParseGetApiV1ApplicationsResponse(rsp *http.Response) (*GetApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1ApplicationsResponse parses an HTTP response from a PostApiV1ApplicationsWithResponse call
func ParsePostApiV1ApplicationsResponse(rsp *http.Response) (*PostApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1ApplicationsActionNameResponse parses an HTTP response from a PostApiV1ApplicationsActionNameWithResponse call
func ParsePostApiV1ApplicationsActionNameResponse(rsp *http.Response) (*PostApiV1ApplicationsActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ApplicationsActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1ApplicationsBulkResponse parses an HTTP response from a DeleteApiV1ApplicationsBulkWithResponse call
func ParseDeleteApiV1ApplicationsBulkResponse(rsp *http.Response) (*DeleteApiV1ApplicationsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ApplicationsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1ApplicationsBulkResponse parses an HTTP response from a PutApiV1ApplicationsBulkWithResponse call
func ParsePutApiV1ApplicationsBulkResponse(rsp *http.Response) (*PutApiV1ApplicationsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ApplicationsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ApplicationsSchemaResponse parses an HTTP response from a GetApiV1ApplicationsSchemaWithResponse call
func ParseGetApiV1ApplicationsSchemaResponse(rsp *http.Response) (*GetApiV1ApplicationsSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1ApplicationsTestResponse parses an HTTP response from a PostApiV1ApplicationsTestWithResponse call
func ParsePostApiV1ApplicationsTestResponse(rsp *http.Response) (*PostApiV1ApplicationsTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ApplicationsTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1ApplicationsTestallResponse parses an HTTP response from a PostApiV1ApplicationsTestallWithResponse call
func ParsePostApiV1ApplicationsTestallResponse(rsp *http.Response) (*PostApiV1ApplicationsTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ApplicationsTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1ApplicationsIdResponse parses an HTTP response from a DeleteApiV1ApplicationsIdWithResponse call
func ParseDeleteApiV1ApplicationsIdResponse(rsp *http.Response) (*DeleteApiV1ApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1ApplicationsIdResponse parses an HTTP response from a GetApiV1ApplicationsIdWithResponse call
func ParseGetApiV1ApplicationsIdResponse(rsp *http.Response) (*GetApiV1ApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1ApplicationsIdResponse parses an HTTP response from a PutApiV1ApplicationsIdWithResponse call
func ParsePutApiV1ApplicationsIdResponse(rsp *http.Response) (*PutApiV1ApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AppprofileResponse parses an HTTP response from a GetApiV1AppprofileWithResponse call
func ParseGetApiV1AppprofileResponse(rsp *http.Response) (*GetApiV1AppprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AppprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AppprofileResponse parses an HTTP response from a PostApiV1AppprofileWithResponse call
func ParsePostApiV1AppprofileResponse(rsp *http.Response) (*PostApiV1AppprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AppprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AppprofileSchemaResponse parses an HTTP response from a GetApiV1AppprofileSchemaWithResponse call
func ParseGetApiV1AppprofileSchemaResponse(rsp *http.Response) (*GetApiV1AppprofileSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AppprofileSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AppprofileIdResponse parses an HTTP response from a DeleteApiV1AppprofileIdWithResponse call
func ParseDeleteApiV1AppprofileIdResponse(rsp *http.Response) (*DeleteApiV1AppprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AppprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1AppprofileIdResponse parses an HTTP response from a GetApiV1AppprofileIdWithResponse call
func ParseGetApiV1AppprofileIdResponse(rsp *http.Response) (*GetApiV1AppprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AppprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutApiV1AppprofileIdResponse parses an HTTP response from a PutApiV1AppprofileIdWithResponse call
func ParsePutApiV1AppprofileIdResponse(rsp *http.Response) (*PutApiV1AppprofileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1AppprofileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CommandResponse parses an HTTP response from a GetApiV1CommandWithResponse call
func ParseGetApiV1CommandResponse(rsp *http.Response) (*GetApiV1CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CommandResponse parses an HTTP response from a PostApiV1CommandWithResponse call
func ParsePostApiV1CommandResponse(rsp *http.Response) (*PostApiV1CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1CommandIdResponse parses an HTTP response from a DeleteApiV1CommandIdWithResponse call
func ParseDeleteApiV1CommandIdResponse(rsp *http.Response) (*DeleteApiV1CommandIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1CommandIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1CommandIdResponse parses an HTTP response from a GetApiV1CommandIdWithResponse call
func ParseGetApiV1CommandIdResponse(rsp *http.Response) (*GetApiV1CommandIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CommandIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigDevelopmentResponse parses an HTTP response from a GetApiV1ConfigDevelopmentWithResponse call
func ParseGetApiV1ConfigDevelopmentResponse(rsp *http.Response) (*GetApiV1ConfigDevelopmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigDevelopmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigDevelopmentIdResponse parses an HTTP response from a GetApiV1ConfigDevelopmentIdWithResponse call
func ParseGetApiV1ConfigDevelopmentIdResponse(rsp *http.Response) (*GetApiV1ConfigDevelopmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigDevelopmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1ConfigDevelopmentIdResponse parses an HTTP response from a PutApiV1ConfigDevelopmentIdWithResponse call
func ParsePutApiV1ConfigDevelopmentIdResponse(rsp *http.Response) (*PutApiV1ConfigDevelopmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ConfigDevelopmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigDownloadclientResponse parses an HTTP response from a GetApiV1ConfigDownloadclientWithResponse call
func ParseGetApiV1ConfigDownloadclientResponse(rsp *http.Response) (*GetApiV1ConfigDownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigDownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigDownloadclientIdResponse parses an HTTP response from a GetApiV1ConfigDownloadclientIdWithResponse call
func ParseGetApiV1ConfigDownloadclientIdResponse(rsp *http.Response) (*GetApiV1ConfigDownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigDownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1ConfigDownloadclientIdResponse parses an HTTP response from a PutApiV1ConfigDownloadclientIdWithResponse call
func ParsePutApiV1ConfigDownloadclientIdResponse(rsp *http.Response) (*PutApiV1ConfigDownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ConfigDownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigHostResponse parses an HTTP response from a GetApiV1ConfigHostWithResponse call
func ParseGetApiV1ConfigHostResponse(rsp *http.Response) (*GetApiV1ConfigHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigHostIdResponse parses an HTTP response from a GetApiV1ConfigHostIdWithResponse call
func ParseGetApiV1ConfigHostIdResponse(rsp *http.Response) (*GetApiV1ConfigHostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigHostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1ConfigHostIdResponse parses an HTTP response from a PutApiV1ConfigHostIdWithResponse call
func ParsePutApiV1ConfigHostIdResponse(rsp *http.Response) (*PutApiV1ConfigHostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ConfigHostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigUiResponse parses an HTTP response from a GetApiV1ConfigUiWithResponse call
func ParseGetApiV1ConfigUiResponse(rsp *http.Response) (*GetApiV1ConfigUiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigUiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ConfigUiIdResponse parses an HTTP response from a GetApiV1ConfigUiIdWithResponse call
func ParseGetApiV1ConfigUiIdResponse(rsp *http.Response) (*GetApiV1ConfigUiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ConfigUiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1ConfigUiIdResponse parses an HTTP response from a PutApiV1ConfigUiIdWithResponse call
func ParsePutApiV1ConfigUiIdResponse(rsp *http.Response) (*PutApiV1ConfigUiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ConfigUiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CustomfilterResponse parses an HTTP response from a GetApiV1CustomfilterWithResponse call
func ParseGetApiV1CustomfilterResponse(rsp *http.Response) (*GetApiV1CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1CustomfilterResponse parses an HTTP response from a PostApiV1CustomfilterWithResponse call
func ParsePostApiV1CustomfilterResponse(rsp *http.Response) (*PostApiV1CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1CustomfilterIdResponse parses an HTTP response from a DeleteApiV1CustomfilterIdWithResponse call
func ParseDeleteApiV1CustomfilterIdResponse(rsp *http.Response) (*DeleteApiV1CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1CustomfilterIdResponse parses an HTTP response from a GetApiV1CustomfilterIdWithResponse call
func ParseGetApiV1CustomfilterIdResponse(rsp *http.Response) (*GetApiV1CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1CustomfilterIdResponse parses an HTTP response from a PutApiV1CustomfilterIdWithResponse call
func ParsePutApiV1CustomfilterIdResponse(rsp *http.Response) (*PutApiV1CustomfilterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1CustomfilterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DownloadclientResponse parses an HTTP response from a GetApiV1DownloadclientWithResponse call
func ParseGetApiV1DownloadclientResponse(rsp *http.Response) (*GetApiV1DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1DownloadclientResponse parses an HTTP response from a PostApiV1DownloadclientWithResponse call
func ParsePostApiV1DownloadclientResponse(rsp *http.Response) (*PostApiV1DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1DownloadclientActionNameResponse parses an HTTP response from a PostApiV1DownloadclientActionNameWithResponse call
func ParsePostApiV1DownloadclientActionNameResponse(rsp *http.Response) (*PostApiV1DownloadclientActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DownloadclientActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1DownloadclientBulkResponse parses an HTTP response from a DeleteApiV1DownloadclientBulkWithResponse call
func ParseDeleteApiV1DownloadclientBulkResponse(rsp *http.Response) (*DeleteApiV1DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1DownloadclientBulkResponse parses an HTTP response from a PutApiV1DownloadclientBulkWithResponse call
func ParsePutApiV1DownloadclientBulkResponse(rsp *http.Response) (*PutApiV1DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DownloadclientSchemaResponse parses an HTTP response from a GetApiV1DownloadclientSchemaWithResponse call
func ParseGetApiV1DownloadclientSchemaResponse(rsp *http.Response) (*GetApiV1DownloadclientSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DownloadclientSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1DownloadclientTestResponse parses an HTTP response from a PostApiV1DownloadclientTestWithResponse call
func ParsePostApiV1DownloadclientTestResponse(rsp *http.Response) (*PostApiV1DownloadclientTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DownloadclientTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1DownloadclientTestallResponse parses an HTTP response from a PostApiV1DownloadclientTestallWithResponse call
func ParsePostApiV1DownloadclientTestallResponse(rsp *http.Response) (*PostApiV1DownloadclientTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DownloadclientTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1DownloadclientIdResponse parses an HTTP response from a DeleteApiV1DownloadclientIdWithResponse call
func ParseDeleteApiV1DownloadclientIdResponse(rsp *http.Response) (*DeleteApiV1DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1DownloadclientIdResponse parses an HTTP response from a GetApiV1DownloadclientIdWithResponse call
func ParseGetApiV1DownloadclientIdResponse(rsp *http.Response) (*GetApiV1DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1DownloadclientIdResponse parses an HTTP response from a PutApiV1DownloadclientIdWithResponse call
func ParsePutApiV1DownloadclientIdResponse(rsp *http.Response) (*PutApiV1DownloadclientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1DownloadclientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1FilesystemResponse parses an HTTP response from a GetApiV1FilesystemWithResponse call
func ParseGetApiV1FilesystemResponse(rsp *http.Response) (*GetApiV1FilesystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1FilesystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1FilesystemTypeResponse parses an HTTP response from a GetApiV1FilesystemTypeWithResponse call
func ParseGetApiV1FilesystemTypeResponse(rsp *http.Response) (*GetApiV1FilesystemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1FilesystemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1HealthResponse parses an HTTP response from a GetApiV1HealthWithResponse call
func ParseGetApiV1HealthResponse(rsp *http.Response) (*GetApiV1HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HealthResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1HistoryResponse parses an HTTP response from a GetApiV1HistoryWithResponse call
func ParseGetApiV1HistoryResponse(rsp *http.Response) (*GetApiV1HistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistoryResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1HistoryIndexerResponse parses an HTTP response from a GetApiV1HistoryIndexerWithResponse call
func ParseGetApiV1HistoryIndexerResponse(rsp *http.Response) (*GetApiV1HistoryIndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HistoryIndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1HistorySinceResponse parses an HTTP response from a GetApiV1HistorySinceWithResponse call
func ParseGetApiV1HistorySinceResponse(rsp *http.Response) (*GetApiV1HistorySinceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HistorySinceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerResponse parses an HTTP response from a GetApiV1IndexerWithResponse call
func ParseGetApiV1IndexerResponse(rsp *http.Response) (*GetApiV1IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerResponse parses an HTTP response from a PostApiV1IndexerWithResponse call
func ParsePostApiV1IndexerResponse(rsp *http.Response) (*PostApiV1IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerActionNameResponse parses an HTTP response from a PostApiV1IndexerActionNameWithResponse call
func ParsePostApiV1IndexerActionNameResponse(rsp *http.Response) (*PostApiV1IndexerActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1IndexerBulkResponse parses an HTTP response from a DeleteApiV1IndexerBulkWithResponse call
func ParseDeleteApiV1IndexerBulkResponse(rsp *http.Response) (*DeleteApiV1IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV1IndexerBulkResponse parses an HTTP response from a PutApiV1IndexerBulkWithResponse call
func ParsePutApiV1IndexerBulkResponse(rsp *http.Response) (*PutApiV1IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerCategoriesResponse parses an HTTP response from a GetApiV1IndexerCategoriesWithResponse call
func ParseGetApiV1IndexerCategoriesResponse(rsp *http.Response) (*GetApiV1IndexerCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerSchemaResponse parses an HTTP response from a GetApiV1IndexerSchemaWithResponse call
func ParseGetApiV1IndexerSchemaResponse(rsp *http.Response) (*GetApiV1IndexerSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerTestResponse parses an HTTP response from a PostApiV1IndexerTestWithResponse call
func ParsePostApiV1IndexerTestResponse(rsp *http.Response) (*PostApiV1IndexerTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1IndexerTestallResponse parses an HTTP response from a PostApiV1IndexerTestallWithResponse call
func ParsePostApiV1IndexerTestallResponse(rsp *http.Response) (*PostApiV1IndexerTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1IndexerIdResponse parses an HTTP response from a DeleteApiV1IndexerIdWithResponse call
func ParseDeleteApiV1IndexerIdResponse(rsp *http.Response) (*DeleteApiV1IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IndexerIdResponse parses an HTTP response from a GetApiV1IndexerIdWithResponse call
func ParseGetApiV1IndexerIdResponse(rsp *http.Response) (*GetApiV1IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1IndexerIdResponse parses an HTTP response from a PutApiV1IndexerIdWithResponse call
func ParsePutApiV1IndexerIdResponse(rsp *http.Response) (*PutApiV1IndexerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1IndexerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerIdDownloadResponse parses an HTTP response from a GetApiV1IndexerIdDownloadWithResponse call
func ParseGetApiV1IndexerIdDownloadResponse(rsp *http.Response) (*GetApiV1IndexerIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IndexerIdNewznabResponse parses an HTTP response from a GetApiV1IndexerIdNewznabWithResponse call
func ParseGetApiV1IndexerIdNewznabResponse(rsp *http.Response) (*GetApiV1IndexerIdNewznabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerIdNewznabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IndexerproxyResponse parses an HTTP response from a GetApiV1IndexerproxyWithResponse call
func ParseGetApiV1IndexerproxyResponse(rsp *http.Response) (*GetApiV1IndexerproxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerproxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerproxyResponse parses an HTTP response from a PostApiV1IndexerproxyWithResponse call
func ParsePostApiV1IndexerproxyResponse(rsp *http.Response) (*PostApiV1IndexerproxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerproxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerproxyActionNameResponse parses an HTTP response from a PostApiV1IndexerproxyActionNameWithResponse call
func ParsePostApiV1IndexerproxyActionNameResponse(rsp *http.Response) (*PostApiV1IndexerproxyActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerproxyActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IndexerproxySchemaResponse parses an HTTP response from a GetApiV1IndexerproxySchemaWithResponse call
func ParseGetApiV1IndexerproxySchemaResponse(rsp *http.Response) (*GetApiV1IndexerproxySchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerproxySchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1IndexerproxyTestResponse parses an HTTP response from a PostApiV1IndexerproxyTestWithResponse call
func ParsePostApiV1IndexerproxyTestResponse(rsp *http.Response) (*PostApiV1IndexerproxyTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerproxyTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1IndexerproxyTestallResponse parses an HTTP response from a PostApiV1IndexerproxyTestallWithResponse call
func ParsePostApiV1IndexerproxyTestallResponse(rsp *http.Response) (*PostApiV1IndexerproxyTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IndexerproxyTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1IndexerproxyIdResponse parses an HTTP response from a DeleteApiV1IndexerproxyIdWithResponse call
func ParseDeleteApiV1IndexerproxyIdResponse(rsp *http.Response) (*DeleteApiV1IndexerproxyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1IndexerproxyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IndexerproxyIdResponse parses an HTTP response from a GetApiV1IndexerproxyIdWithResponse call
func ParseGetApiV1IndexerproxyIdResponse(rsp *http.Response) (*GetApiV1IndexerproxyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerproxyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1IndexerproxyIdResponse parses an HTTP response from a PutApiV1IndexerproxyIdWithResponse call
func ParsePutApiV1IndexerproxyIdResponse(rsp *http.Response) (*PutApiV1IndexerproxyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1IndexerproxyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerstatsResponse parses an HTTP response from a GetApiV1IndexerstatsWithResponse call
func ParseGetApiV1IndexerstatsResponse(rsp *http.Response) (*GetApiV1IndexerstatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerstatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerStatsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1IndexerstatusResponse parses an HTTP response from a GetApiV1IndexerstatusWithResponse call
func ParseGetApiV1IndexerstatusResponse(rsp *http.Response) (*GetApiV1IndexerstatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IndexerstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerStatusResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1LocalizationResponse parses an HTTP response from a GetApiV1LocalizationWithResponse call
func ParseGetApiV1LocalizationResponse(rsp *http.Response) (*GetApiV1LocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1LocalizationOptionsResponse parses an HTTP response from a GetApiV1LocalizationOptionsWithResponse call
func ParseGetApiV1LocalizationOptionsResponse(rsp *http.Response) (*GetApiV1LocalizationOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LocalizationOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LocalizationOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogResponse parses an HTTP response from a GetApiV1LogWithResponse call
func ParseGetApiV1LogResponse(rsp *http.Response) (*GetApiV1LogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogFileResponse parses an HTTP response from a GetApiV1LogFileWithResponse call
func ParseGetApiV1LogFileResponse(rsp *http.Response) (*GetApiV1LogFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogFileUpdateResponse parses an HTTP response from a GetApiV1LogFileUpdateWithResponse call
func ParseGetApiV1LogFileUpdateResponse(rsp *http.Response) (*GetApiV1LogFileUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogFileUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1LogFileUpdateFilenameResponse parses an HTTP response from a GetApiV1LogFileUpdateFilenameWithResponse call
func ParseGetApiV1LogFileUpdateFilenameResponse(rsp *http.Response) (*GetApiV1LogFileUpdateFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogFileUpdateFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1LogFileFilenameResponse parses an HTTP response from a GetApiV1LogFileFilenameWithResponse call
func ParseGetApiV1LogFileFilenameResponse(rsp *http.Response) (*GetApiV1LogFileFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LogFileFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1NotificationResponse parses an HTTP response from a GetApiV1NotificationWithResponse call
func ParseGetApiV1NotificationResponse(rsp *http.Response) (*GetApiV1NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1NotificationResponse parses an HTTP response from a PostApiV1NotificationWithResponse call
func ParsePostApiV1NotificationResponse(rsp *http.Response) (*PostApiV1NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1NotificationActionNameResponse parses an HTTP response from a PostApiV1NotificationActionNameWithResponse call
func ParsePostApiV1NotificationActionNameResponse(rsp *http.Response) (*PostApiV1NotificationActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1NotificationActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1NotificationSchemaResponse parses an HTTP response from a GetApiV1NotificationSchemaWithResponse call
func ParseGetApiV1NotificationSchemaResponse(rsp *http.Response) (*GetApiV1NotificationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1NotificationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1NotificationTestResponse parses an HTTP response from a PostApiV1NotificationTestWithResponse call
func ParsePostApiV1NotificationTestResponse(rsp *http.Response) (*PostApiV1NotificationTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1NotificationTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1NotificationTestallResponse parses an HTTP response from a PostApiV1NotificationTestallWithResponse call
func ParsePostApiV1NotificationTestallResponse(rsp *http.Response) (*PostApiV1NotificationTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1NotificationTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1NotificationIdResponse parses an HTTP response from a DeleteApiV1NotificationIdWithResponse call
func ParseDeleteApiV1NotificationIdResponse(rsp *http.Response) (*DeleteApiV1NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1NotificationIdResponse parses an HTTP response from a GetApiV1NotificationIdWithResponse call
func ParseGetApiV1NotificationIdResponse(rsp *http.Response) (*GetApiV1NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1NotificationIdResponse parses an HTTP response from a PutApiV1NotificationIdWithResponse call
func ParsePutApiV1NotificationIdResponse(rsp *http.Response) (*PutApiV1NotificationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1NotificationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SearchResponse parses an HTTP response from a GetApiV1SearchWithResponse call
func ParseGetApiV1SearchResponse(rsp *http.Response) (*GetApiV1SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SearchResponse parses an HTTP response from a PostApiV1SearchWithResponse call
func ParsePostApiV1SearchResponse(rsp *http.Response) (*PostApiV1SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SearchBulkResponse parses an HTTP response from a PostApiV1SearchBulkWithResponse call
func ParsePostApiV1SearchBulkResponse(rsp *http.Response) (*PostApiV1SearchBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SearchBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SystemBackupResponse parses an HTTP response from a GetApiV1SystemBackupWithResponse call
func ParseGetApiV1SystemBackupResponse(rsp *http.Response) (*GetApiV1SystemBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BackupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SystemBackupRestoreUploadResponse parses an HTTP response from a PostApiV1SystemBackupRestoreUploadWithResponse call
func ParsePostApiV1SystemBackupRestoreUploadResponse(rsp *http.Response) (*PostApiV1SystemBackupRestoreUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SystemBackupRestoreUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SystemBackupRestoreIdResponse parses an HTTP response from a PostApiV1SystemBackupRestoreIdWithResponse call
func ParsePostApiV1SystemBackupRestoreIdResponse(rsp *http.Response) (*PostApiV1SystemBackupRestoreIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SystemBackupRestoreIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1SystemBackupIdResponse parses an HTTP response from a DeleteApiV1SystemBackupIdWithResponse call
func ParseDeleteApiV1SystemBackupIdResponse(rsp *http.Response) (*DeleteApiV1SystemBackupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1SystemBackupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SystemRestartResponse parses an HTTP response from a PostApiV1SystemRestartWithResponse call
func ParsePostApiV1SystemRestartResponse(rsp *http.Response) (*PostApiV1SystemRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SystemRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SystemRoutesResponse parses an HTTP response from a GetApiV1SystemRoutesWithResponse call
func ParseGetApiV1SystemRoutesResponse(rsp *http.Response) (*GetApiV1SystemRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SystemRoutesDuplicateResponse parses an HTTP response from a GetApiV1SystemRoutesDuplicateWithResponse call
func ParseGetApiV1SystemRoutesDuplicateResponse(rsp *http.Response) (*GetApiV1SystemRoutesDuplicateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemRoutesDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SystemShutdownResponse parses an HTTP response from a PostApiV1SystemShutdownWithResponse call
func ParsePostApiV1SystemShutdownResponse(rsp *http.Response) (*PostApiV1SystemShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SystemShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SystemStatusResponse parses an HTTP response from a GetApiV1SystemStatusWithResponse call
func ParseGetApiV1SystemStatusResponse(rsp *http.Response) (*GetApiV1SystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SystemTaskResponse parses an HTTP response from a GetApiV1SystemTaskWithResponse call
func ParseGetApiV1SystemTaskResponse(rsp *http.Response) (*GetApiV1SystemTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SystemTaskIdResponse parses an HTTP response from a GetApiV1SystemTaskIdWithResponse call
func ParseGetApiV1SystemTaskIdResponse(rsp *http.Response) (*GetApiV1SystemTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SystemTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1TagResponse parses an HTTP response from a GetApiV1TagWithResponse call
func ParseGetApiV1TagResponse(rsp *http.Response) (*GetApiV1TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1TagResponse parses an HTTP response from a PostApiV1TagWithResponse call
func ParsePostApiV1TagResponse(rsp *http.Response) (*PostApiV1TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1TagDetailResponse parses an HTTP response from a GetApiV1TagDetailWithResponse call
func ParseGetApiV1TagDetailResponse(rsp *http.Response) (*GetApiV1TagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1TagDetailIdResponse parses an HTTP response from a GetApiV1TagDetailIdWithResponse call
func ParseGetApiV1TagDetailIdResponse(rsp *http.Response) (*GetApiV1TagDetailIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TagDetailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1TagIdResponse parses an HTTP response from a DeleteApiV1TagIdWithResponse call
func ParseDeleteApiV1TagIdResponse(rsp *http.Response) (*DeleteApiV1TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1TagIdResponse parses an HTTP response from a GetApiV1TagIdWithResponse call
func ParseGetApiV1TagIdResponse(rsp *http.Response) (*GetApiV1TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1TagIdResponse parses an HTTP response from a PutApiV1TagIdWithResponse call
func ParsePutApiV1TagIdResponse(rsp *http.Response) (*PutApiV1TagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1TagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1UpdateResponse parses an HTTP response from a GetApiV1UpdateWithResponse call
func ParseGetApiV1UpdateResponse(rsp *http.Response) (*GetApiV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UpdateResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContentPathResponse parses an HTTP response from a GetContentPathWithResponse call
func ParseGetContentPathResponse(rsp *http.Response) (*GetContentPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoginResponse parses an HTTP response from a GetLoginWithResponse call
func ParseGetLoginResponse(rsp *http.Response) (*GetLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLogoutResponse parses an HTTP response from a GetLogoutWithResponse call
func ParseGetLogoutResponse(rsp *http.Response) (*GetLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadPingResponse parses an HTTP response from a HeadPingWithResponse call
func ParseHeadPingResponse(rsp *http.Response) (*HeadPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIdApiResponse parses an HTTP response from a GetIdApiWithResponse call
func ParseGetIdApiResponse(rsp *http.Response) (*GetIdApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIdDownloadResponse parses an HTTP response from a GetIdDownloadWithResponse call
func ParseGetIdDownloadResponse(rsp *http.Response) (*GetIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPathResponse parses an HTTP response from a GetPathWithResponse call
func ParseGetPathResponse(rsp *http.Response) (*GetPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
